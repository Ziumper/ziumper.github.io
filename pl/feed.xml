<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://ziumper.github.io/pl/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ziumper.github.io/pl/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-30T21:18:17+00:00</updated><id>https://ziumper.github.io/feed.xml</id><title type="html">Ziumper</title><entry><title type="html">Nowy tool n8n!</title><link href="https://ziumper.github.io/pl/blog/2025/n8n-automation-tool/" rel="alternate" type="text/html" title="Nowy tool n8n!"/><published>2025-10-09T00:00:00+00:00</published><updated>2025-10-09T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/n8n-automation-tool</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/n8n-automation-tool/"><![CDATA[<h2 id="czym-jest-n8n">Czym jest n8n?</h2> <p>n8n to narzędzie do automatyzacji procesów, ze szczególnym naciskiem na automatyzacje w obszarze AI.</p> <p>Jego cechy charakterystyczne to:</p> <ul> <li>posiada wersję community (open source). <a href="https://github.com/n8n-io/n8n">Link do repozytorium</a></li> <li>został napisany w TypeScript</li> <li>bardzo przypomina programowanie w blueprintach z Unreal Engine</li> <li>oferuje wiele gotowych węzłów oraz integracji</li> <li>jest prosty w użyciu (przeciągnij i upuść)</li> <li>pozwala na łączenie procesów w podprocesy</li> <li>jeśli znasz <a href="https://www.bpmn.org/">BPMN</a>, szybko zrozumiesz zasadę działania</li> <li>umożliwia pisanie kodu w wbudowanym edytorze przy użyciu JavaScript oraz Pythona</li> </ul> <h2 id="charakter-pracy-z-n8n">Charakter pracy z n8n</h2> <p>Jedną z najważniejszych rzeczy, które zrozumiałem podczas pracy z n8n, było to, jak istotne jest zapewnienie odpowiedniej struktury danych wejściowych i wyjściowych. Daje możliwości zbierania, agregacji i filtrowania danych. Praca na danych ma z automatu charakter iteracyjny.</p> <p>Pisanie kodu jest całkiem wygodne – dostępne są podpowiedzi i autouzupełnianie. Musiałem trochę się przestawić i wykorzystywać bloki z JavaScriptem, aby zapewnić odpowiednią hydratację i strukturę danych.</p> <h2 id="do-czego-go-wykorzystać">Do czego go wykorzystać?</h2> <p>Myślę, że świetnie nadaje się do:</p> <ul> <li>orkiestracji i automatyzacji procesów</li> <li>automatyzacji powtarzalnych czynności</li> <li>szybkiej integracji znanych narzędzi</li> <li>synchronizacji danych</li> </ul> <h2 id="wady-i-ograniczenia">Wady i ograniczenia</h2> <p>Podczas testów zauważyłem, że:</p> <ul> <li>niektóre integracje wymagają dodatkowej konfiguracji lub kluczy API,</li> <li>interfejs webowy bywa czasem mniej responsywny przy dużych workflow,</li> <li>dokumentacja jest obszerna, ale nie zawsze szczegółowa dla mniej popularnych węzłów.</li> </ul> <h2 id="podsumowanie">Podsumowanie</h2> <p>n8n to świetne narzędzie dla osób, które chcą szybko wdrażać automatyzacje bez konieczności pisania dużej ilości kodu. Szczególnie polecam je tym, którzy cenią sobie elastyczność i możliwość rozbudowy własnych workflow.</p>]]></content><author><name></name></author><category term="n8n"/><summary type="html"><![CDATA[Ostatnio miałem możliwość zabawy z hostowaną wersją n8n i chciałem podzielić się swoimi wrażeniami]]></summary></entry><entry><title type="html">Alternatywne IDE dla PHP? Apache Netbeans, ale nie tylko!</title><link href="https://ziumper.github.io/pl/blog/2025/alternative-ide-for-php/" rel="alternate" type="text/html" title="Alternatywne IDE dla PHP? Apache Netbeans, ale nie tylko!"/><published>2025-10-08T00:00:00+00:00</published><updated>2025-10-08T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/alternative-ide-for-php</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/alternative-ide-for-php/"><![CDATA[<p>Ten post będzie trochę dłuższy, ponieważ chcę przedstawić bolączki i ścieżkę, jaką to IDE przeszło od starego oprogramowania do jego nowszej wersji. Chcę również skupić się na wadach oraz w pewnym sensie przedstawić, jak wygląda obecna praca w Apache NetBeans. Kiedy się na niego natknąłem? Dlaczego zacząłem go używać dopiero niedawno i dlaczego wygląda na to, że to IDE wraca do łask! Postaram się też przedstawić sposób konfiguracji IDE i pierwsze wrażenia.</p> <h2 id="apache-netbeans">Apache Netbeans</h2> <p>Na początek warto jest wspomniec o historii Apache NetBeansa. Jest to zintegrowane środowisko programistyczne, które zostało stworzone głównie do programowania w Javie, ale teraz wspiera kilka języków programistycznych w tym oczywiście PHP. Ogólnie oś czasu wygląda następująco:</p> <ul> <li><strong>1996</strong> – Na Uniwersytecie Karola w Pradze grupa studentów rozpoczyna projekt Xelfi, będący jednym z pierwszych środowisk programistycznych dla Javy napisanych w tym języku.</li> <li><strong>1997-1998</strong> – Projekt Xelfi zostaje rozwinięty, a jego nazwa zmienia się na NetBeans.</li> <li><strong>1999</strong> – Firma Sun Microsystems kupuje NetBeans od twórców z Pragi i rozpoczyna oficjalny rozwój oraz udostępnia go jako otwarte oprogramowanie.</li> <li><strong>2000-2010</strong> – NetBeans dynamicznie się rozwija, zyskuje wsparcie dla kolejnych wersji Javy i innych technologii. Staje się jednym z najpopularniejszych IDE dla programistów Java.</li> <li><strong>2010</strong> – Oracle przejmuje Sun Microsystems i tym samym staje się właścicielem projektu NetBeans.</li> <li><strong>2016</strong> – Oracle decyduje się przekazać NetBeans do Apache Software Foundation, rozpoczynając proces inkubacji projektu.</li> <li><strong>2018</strong> – NetBeans oficjalnie staje się projektem Apache i otrzymuje nazwę Apache NetBeans. Wychodzi pierwsza wersja pod szyldem Apache – Apache NetBeans 9.0.</li> <li><strong>2018-obecnie</strong> – Apache NetBeans jest aktywnie rozwijany przez społeczność open source. Regularnie pojawiają się nowe wersje, które wspierają najnowsze technologie i języki programowania.</li> </ul> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/netbeans/netbeans_ide-480.webp 480w,/assets/img/posts/netbeans/netbeans_ide-800.webp 800w,/assets/img/posts/netbeans/netbeans_ide-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/netbeans/netbeans_ide.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Konfiguracja NetBeans jest stosunkowo prosta, choć wymaga kilku kroków: NetBeans można pobrać bezpośrednio ze strony Apache. Instalator jest dostępny na wszystkie popularne systemy operacyjne. Najwygodniejszym sposobem jest pobranie Apache Netbeansa bezpośrednio z strony <a href="https://github.com/apache/netbeans/releases">repozytorium</a>.</p> <p>Po instalacji warto przejrzeć dostępne wtyczki. NetBeans domyślnie obsługuje PHP, ale można doinstalować wsparcie dla innych języków. Przede wszystkim polecam włączyć domyślną wtyczkę dla PHP.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/netbeans/netbeans_php_plugin-480.webp 480w,/assets/img/posts/netbeans/netbeans_php_plugin-800.webp 800w,/assets/img/posts/netbeans/netbeans_php_plugin-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/netbeans/netbeans_php_plugin.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Dodatkowo polecam doinstalować tą wtyczkę poprzez github: <a href="https://github.com/junichi11/netbeans-php-enhancements/releases">netbeans-php-enhancements</a> lub poprzez portal z pluginami <a href="https://plugins.netbeans.apache.org/catalogue/?id=29">link do wtyczki</a></p> <p>Aby zainstalować wtyczkę wystarczy ją ściągnąć i rozpakować następnie wrzucić przez Tools -&gt; Plugins -&gt; Downloaded i wybrać plik w formacie *.nbm</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/netbeans/plugin_instruction-480.webp 480w,/assets/img/posts/netbeans/plugin_instruction-800.webp 800w,/assets/img/posts/netbeans/plugin_instruction-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/netbeans/plugin_instruction.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Po zainstalowaniu powinno to wyglądać następująco:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/netbeans/php-enhancments-480.webp 480w,/assets/img/posts/netbeans/php-enhancments-800.webp 800w,/assets/img/posts/netbeans/php-enhancments-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/netbeans/php-enhancments.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>W ustawieniach należy wskazać ścieżkę do interpretera PHP</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/netbeans/cli_inerpreter-480.webp 480w,/assets/img/posts/netbeans/cli_inerpreter-800.webp 800w,/assets/img/posts/netbeans/cli_inerpreter-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/netbeans/cli_inerpreter.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>oraz włączyć dodatkowe opcje i podpowiedzi do najnowszej wtyczki</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/netbeans/php-config-enhance-480.webp 480w,/assets/img/posts/netbeans/php-config-enhance-800.webp 800w,/assets/img/posts/netbeans/php-config-enhance-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/netbeans/php-config-enhance.png" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="debugowanie">Debugowanie</h3> <p>Jeżeli chodzi o debugowanie to mamy następującą opcję.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/netbeans/Debugging-480.webp 480w,/assets/img/posts/netbeans/Debugging-800.webp 800w,/assets/img/posts/netbeans/Debugging-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/netbeans/Debugging.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Trzeba również zainstalować <a href="https://chromewebstore.google.com/detail/xdebug-helper-by-jetbrain/aoelhdemabeimdhedkidlnbkfhnhgnhm">Xdebug Helper</a>. i ustawić odpowiedni klucz IDE.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/netbeans/xdebug_netbeans-480.webp 480w,/assets/img/posts/netbeans/xdebug_netbeans-800.webp 800w,/assets/img/posts/netbeans/xdebug_netbeans-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/netbeans/xdebug_netbeans.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>W przypadku debugowania z dockera kod testowy na dockerze możemy odpalić w następujący sposób:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker compose exec -e XDEBUG_MODE=debug -e XDEBUG_CONFIG="start_with_request=trigger idekey=netbeans client_host=host.docker.internal client_port=9003" myServiceInDocker vendor/bin/phpunit'
</code></pre></div></div> <h3 id="pisanie-kodu">Pisanie Kodu</h3> <p>Jeżeli chodzi o pisanie kodu PHP to trzeba się troszkę przestawić:</p> <ul> <li>importowanie wszystkich zależnosci przy pomocy skrótu klawiszowego <code class="language-plaintext highlighter-rouge">Ctrl + Shift + I</code> a nie jak w PHPStorm przy pomocy <code class="language-plaintext highlighter-rouge">alt+enter</code>. Moim zdaniem jest nawet lepsze, gdyż otwiera okno dialogowe, w którym jesteśmy w stanie zdecydować jakie zależności powinniśmy zaimportować.</li> <li>wyszukiwanie za pomocą “Ctrl + I” w prawym górnym rogu</li> <li>przełączanie pomiędzy plikami za pomocą “Ctrl + PageUp” i “Ctrl + PageDown”</li> <li>php doc <code class="language-plaintext highlighter-rouge">/** @var MyClass $myVariable */</code> działa tylko w jednej lini.</li> </ul> <p>Jest trochę bolączek i zapożyczeń z innych IDE. Koniec końców można go używać jeżeli bardzo się chce. Netbeans zapewnia również wsparcie dla języka szablonów <a href="https://twig.symfony.com/">Twig</a>. Działa podśwetlenie składni i auto-complete, ale niestety nie wiele więcej. Szybkie wyszukiwanie nie działa dla plików <strong>Twig</strong> oraz innych podobnych plików i wymaga odpowiednich modyfikacji modułów dla PHP lub rozszerzeń.</p> <h3 id="zalety">Zalety</h3> <ul> <li><strong>Lekkość</strong> – NetBeans jest zauważalnie mniej zasobożerny niż PHPStorm. Działa płynnie nawet na starszych komputerach.</li> <li><strong>Open Source</strong> – Całkowicie darmowy, bez ograniczeń licencyjnych.</li> <li><strong>Wsparcie dla wielu języków</strong> – Oprócz PHP, świetnie radzi sobie z Javą, JavaScriptem, HTML, C/C++.</li> <li><strong>Wbudowane narzędzia</strong> – Debugger, profiler, integracja z GIT, wsparcie dla frameworków (np. Symfony, Laravel).</li> <li><strong>Stabilność</strong> – Rzadko się zawiesza, a aktualizacje są regularne.</li> <li><strong>Prosta konfiguracja</strong> – Szybko można zacząć pracę bez konieczności instalowania dziesiątek rozszerzeń.</li> <li><strong>Rozszerzalność</strong> - Sami możemy bardzo szybko zacząć rozszerzać swoje IDE, o dziwo jest znacznie bardziej wygodne niż w PHP</li> <li><strong>Powrót do przeszłości</strong> - Co ciekawe jest to taki trochę powrót do przeszłości i można po prostu poczuć się jak się programowało kiedyś, gdy IDE nie podpowiadało wszystkiego</li> <li><strong>Proces indeksacji dla PHPStorm</strong> - Obecnie jest dosyć prosty i wydajny na tyle, że bez problemu można korzystać.</li> <li><strong>Zawiera kilka unikalnych pomyslów</strong> - O dziwo znalazlem w nim kilka fajnych i przydatnych rzeczy, takich jak lista zadań albo troszkę odmienny styl pracy z terminalem.</li> <li><strong>Możliwość dostosowania motywów, skrótów klawiszowych i układu okien.</strong></li> </ul> <h3 id="wady">Wady</h3> <ul> <li><strong>Autocomplete</strong> – Działa dobrze, ale wymaga stosowania PHPDoc. W PHPStormie podpowiedzi są bardziej zaawansowane i nie wymagają tak szczegółowej dokumentacji.</li> <li><strong>Mniej wtyczek</strong> – Społeczność NetBeans jest mniejsza niż np. VSCode, przez co liczba dostępnych rozszerzeń jest ograniczona.</li> <li><strong>Wygląd</strong> – Interfejs użytkownika jest nieco przestarzały w porównaniu do konkurencji.</li> <li><strong>Brak natywnej integracji z Dockerem</strong> – Trzeba ręcznie konfigurować środowisko, co może być uciążliwe przy pracy z kontenerami. Interpreter PHP tylko w natywnym środowisku, nie można podpiąć z dockera, co jest trochę uciążliwe.</li> <li><strong>Statyczna analiza kodu</strong> – Działa, ale nie jest tak rozbudowana jak w PHPStormie.</li> <li><strong>Mniej materiałów edukacyjnych</strong> – Trudniej znaleźć aktualne tutoriale i wsparcie społeczności.</li> <li><strong>Trochę zacofany</strong> - W ogólnym konkursie raczej sporo mu brakuje do swoich darmowych alternatyw. Zwłaszcza do Visual Studio Code, ale obstawiam, że z czasem się to zmieni</li> <li><strong>Brak natywnego wsparcia dla dockera</strong> -</li> <li><strong>Debugging</strong> - tylko na serwerze, jeżeli chcemy debugować skrypty to juz jest z tym trochę gorzej i trzeba już pokombinować.</li> <li><strong>Integracja GIT</strong> - NetBeans posiada wbudowaną obsługę GIT, co pozwala na wygodną pracę z repozytoriami bezpośrednio z poziomu IDE, ale nie działa niestety tak jak bym tego oczekiwał, więc tutaj polecam sie uzbroić w pracę z terminalem. Prawdopodobnie trzeba poczekać na naprawę błędów.</li> <li><strong>AI</strong> - brak integracji z copilotem, jest wtyczka, która symuluje to, ale to nie to samo co w PHPStorm. Równie dobrze, może to być plus ;-)</li> </ul> <h3 id="przykładowe-zastosowania">Przykładowe zastosowania</h3> <p>NetBeans sprawdzi się świetnie w małych i średnich projektach PHP, gdzie nie potrzebujemy zaawansowanych narzędzi do refaktoryzacji czy integracji z chmurą. Jest idealny dla osób, które cenią prostotę i stabilność, a jednocześnie chcą mieć dostęp do podstawowych funkcji IDE.</p> <h2 id="wskazówki-i-triki">Wskazówki i triki</h2> <ul> <li>Warto korzystać z funkcji “Live Templates” do szybkiego wstawiania powtarzalnych fragmentów kodu.</li> <li>Można skonfigurować własne skróty klawiszowe, co znacznie przyspiesza pracę.</li> <li>NetBeans pozwala na szybkie przełączanie się między plikami i klasami (Ctrl+O, Ctrl+Shift+O).</li> <li>Warto regularnie aktualizować IDE i wtyczki – poprawia to stabilność i bezpieczeństwo.</li> <li>Jeśli pracujesz z Dockerem to raczej będziesz potrzebował ręcznej konfiguracji środowiska.</li> </ul> <h2 id="moje-doświadczenia-i-rekomendacje">Moje doświadczenia i rekomendacje</h2> <p>Po kilku miesiącach pracy z NetBeans mogę powiedzieć, że to narzędzie, które pozwala skupić się na kodzie. Nie rozprasza nadmiarem opcji, a jednocześnie daje wszystko, co potrzebne do codziennej pracy. Jeśli szukasz alternatywy dla ciężkich, płatnych IDE – warto spróbować NetBeans. Szczególnie polecam go osobom, które cenią prostotę, stabilność i open source. Trzeba jednak uzbroić się w cierpliwość, bo praca z tym IDE różni się znacznie od obecnych na rynku rozwiązań i sprawia wrażenie ociężałego narzędzia. Jestem pewny, że wraz z czasem rozwój apache netbeansa przyśpieszy i zacznie stanowić realną alternatywę dla produktów JETBrains. Mimo, że nawet teraz większość produktów tej firmy już można korzystać za darmo, ale czas płynie a firmy przechodzą z rąk do rąk, a kod zostaje.</p> <h2 id="a-co-z-phpstorm">A co z PHPStorm?</h2> <p>To nie tak, że PHPStorm jest zły. Jest bardzo dobry! Można też powiedzieć, że nawet za bardzo. To, co lubię w oprogramowaniu, to poczucie, że mam kontrolę nad tym, co robię. Niestety w przypadku produktów JetBrains, tego mi brakuje. Zawsze lubiłem patrzeć, co jest pod spodem narzędzi, zabawek, które używałem jako dziecko, i chyba tak mi już zostało.</p> <p>W związku z tym postanowiłem bardziej wgłębić się w problematykę samego IDE. Jednakże zamknięty kod źródłowy nie bardzo zachęca do pisania wtyczek. Trzeba się naprawdę wczytać w dokumentację . Mieć wiedzę z zakresu takich języków programowania jak Kotlin czy Gradle . To już jest dosyć spory punkt wejścia dla programistów, którzy nie mieli zbytnio styczności z Javą.</p> <p>Z perspektywy użytkownika jest to bardzo dobre narzędzie dla osób, które zaczynają swoją przygodę programistyczną z PHP. Ma w sobie bardzo dużo ułatwiającej automagii, przez co można odnieść wrażenie, że programowanie w nim jest bardzo ułatwione. Niestety nie jest okupione pewną ceną w postaci zasobów komputera. Wiadomo jednak, że to również kwestia tego, jak dużo “ułatwień” podczas naszej pracy potrzebujemy. W sumie jest bardzo ciekawy model biznesowy, w którym uzależniamy użytkownika od naszego produktu. Brzmi znajomo prawda?</p> <p>Im więcej, im łatwiej nam idzie, tym częściej jesteśmy skłonni by tego narzędzia używać nawet za sporo wyższą cenę. W tym przypadku na szczęście zawsze można użyć notatnika i męczyć się z miejscem, w którym nie postawiło się średnika. Aż roni się łza… Tymczasem ludzie generują już całe aplikacje używając nowoczesnych narzędzi AI.</p> <p>Kto wie może IDE też powinno do czegoś podobnego służyć. Najważniejsze jednak przed nami. Dlaczego PHPStorm może nie być najlepszym dostępnym IDE i co za tym idzie może warto skupić się na alternatywnych opcjach. Chciałbym w tym poście przyjrzeć się alternatywie w postaci Apache Netbeans .</p> <p>Na co dzień narzędzia programistyczne potrafią być trochę przytłaczające. PhpStorm instaluje automatycznie sporo zasobożernych wtyczek, takich jak:</p> <ul> <li> <p><a href="https://plugins.jetbrains.com/plugin/17718-github-copilot">Github Copilot</a> - wtyczka pozwalająca używać w wygodny sposób GitHub Copilota. Jest całkiem przydatna, ale jej zasobożerność z pewnymi konfiguracjami może być problematyczna. A każdy ma ograniczone zasoby, zwłaszcza jeśli programuje na laptopie. Moim zdaniem znacznie lepiej spisuje się w ograniczonym kontekście, kiedy używam jej z poziomu przeglądarki internetowej lub po prostu używam czata. Przydaje się jednak w trybie <strong>Agenta</strong> w celu generacji kodu. Zazwyczaj pytam go o bardzo głupie rzeczy, albo kiedy nie jestem pewny czy moje podejście ma sens. No, bo na pewno już kiedyś tego próbował, prawda? Z rzeczy, które wyłączyłem z tej wtyczki, to tutaj należy nadmienić auto complete, potrafi nieźle zjeść pamięć mojego laptopa i nie jest wcale tak bardzo przydatna. Można wręcz powiedzieć, że “Autocomplete” robi z ciebie debila, ale to raczej temat na inny post.</p> </li> <li> <p><a href="https://plugins.jetbrains.com/plugin/22282-jetbrains-ai-assistant">Jetbrains Assistant</a> - Nic tak nie pomaga w programowaniu, niż kolejny asystent AI! W dodatku płatny i to od JetBrains. Jest on w pewnym sensie znacznie lepszy w debugowaniu i podpowiadaniu niż jego konkurent Copilot. Nic dziwnego, w końcu to pewna sfera do zagospodarowania. Oczywiście, dopóty jeszcze są inne produkty lub serwisy, które udostępniają podobne usługi. Wiadomo jednakże, że trzeba się nad tym pochylić. Jest równie zasobożerna co jego konkurent. Oferuje przyjemny i bardziej czytelny interfejs i śmiało mogę powiedzieć, że pomogło mi rozwiązać kilka problemów podczas codziennego kodowania.</p> </li> <li> <p><a href="https://plugins.jetbrains.com/plugin/10925-database-tools-and-sql-for-webstorm">Zarządzanie bazami</a> - Ten eksplorator jest naprawdę wygodny. Można manipulować widokiem tabel, w szybki sposób dostosować widok, filtry oraz wybrać dogodny sterownik do swojej bazy danych. Bardzo ładnie podsumowuje dane i szybko mogę przejrzeć co tam mam w środku. Z całym sercem mogę polecić, jeżeli zależy nam na szybkim przeglądzie bazy danych. Jednakże i ten klient może zawieść. W moim przypadku był to sterownik do bazy danych przy korzystaniu dostępu do bazy danych AWS MySQL. Nie mogłem skasować rekordu ani podejrzeć wykonanych zmian. Tunneling jest możliwy, ale trzeba dobrze go skonfigurować. Tak czy siak, solidne 7/10! No, ale nic nie odda magii pisania zapytań w terminalu.</p> </li> <li> <p><a href="https://plugins.jetbrains.com/plugin/7724-docker">Docker</a> - Nie pamiętam, kiedy ostatnio go użyłem, ponieważ większość rzeczy robię w konsoli.</p> </li> <li> <p><a href="https://plugins.jetbrains.com/plugin/13125-ftp-sftp-webdav-connectivity">FTP</a> - Najczęściej odpalam ten plugin tylko po to, żeby zalogować się na serwer. Wiem, że powinno się tutaj użyć terminala. I chyba szybko się na terminal przerzucę. Warto wspomnieć o funkcji synchronizacji za pomocą <strong>rsync</strong>, to naprawdę nie raz uratowało mi skórę, gdy musiałem wrzucić szybko zmiany albo poprawić buga na produkcji po niezbyt dobrze przetestowanym deploymencie.</p> </li> <li> <p><a href="https://plugins.jetbrains.com/plugin/7219-symfony-plugin">Symfony</a> - sporo przydatnych funkcji, to jest akurat plugin, który polecam. Zwłaszcza początkującym i uczącym się frameworka <a href="https://symfony.com/">Symfony</a>.</p> </li> </ul> <p>Podsumowując, wtyczki są niezbędne, jeżeli chcemy być produktywni, mimo to więcej wiedzy zyskamy, nie używając tych wtyczek jako deweloperzy. Rozwiązując problemy integracyjne i obcując bezpośrednio z oprogramowaniem jesteśmy w stanie znacznie lepiej zrozumieć “co autor miał na myśli”. Szkoda, jednak, że dopiero niedawno to odkryłem. Lepiej późno niż wcale!</p> <p>Zanim odpaliłem projekt, to pięć razy zdążyłem wyłączyć niepotrzebne dodatki i zrestartować laptopa. Dodatkowo musiałem skonfigurować podwójną ilość pamięci na partycji Swap, by móc w ogóle odpalić udostępnianie ekranu. Musiałem odpowiednio skonfiugorwać cały projekt, zignorować odpowiednie foldery, tylko po to, żeby zmniejszyć liczbę zajmowanej pamięci. To naprawdę niepokojące zwłaszcza pracując z większymi projektami. Opóźniało i dokuczało mi to w codziennej pracy. Można by się sugerować tym, że większość osób pracuje w PHP używając Mac-a, który jest w stanie wyciągnąć takie obciążenie bez większych problemów. Zastanawiam się, czy to aby w porządku zwłaszcza, że dopiero niedawno zacząłem mierzyć jak dużo prądu mój laptop jest w stanie zużyć pracując na pełnych obrotach. Skończyło się na tym, że po wyłączeniu większości nieużywanych pluginów i pominięciu generowanych przez aplikacje plików projektowych wreszcie byłem w stanie normalnie pracować. Najprawdopodobniej trzeba równie mocno optymalizować nie tylko kod, który jest przez nas napisany, ale i narzędzia, które używamy muszą być odpowiednio do tego celu skonfigurowane. Jest to trochę kuszące, aby zostawić rzeczy takimi jakie je zastaliśmy.</p> <p>Pomijąc problemy z zasobami, drugim istotnym czynnikiem jest, to, że nawet jeżeli mamy możliwości podejrzenia działających procesów, to PHPStorm wiele rzeczy robi za nas automatycznie.</p> <ul> <li>Wybór wersji PHP-a z pliku <code class="language-plaintext highlighter-rouge">composer.json</code>,</li> <li>Instalowanie zależności.</li> <li>Naprawianie za nas błędów konfiguracyjnych.</li> <li>Autoimportowanie zależności</li> <li>Listy zadań</li> <li>Debugowanie</li> <li>Generacja kodu (z pluginami AI)</li> </ul> <p>Dlaczego więc, podjąłem się próby przerzucenia się na starszą, darmową alternatywe?</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/netbeans/usage-480.webp 480w,/assets/img/posts/netbeans/usage-800.webp 800w,/assets/img/posts/netbeans/usage-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/netbeans/usage.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Na dole to NetBeans a na górze PHPStorm… zjada pamięc jak królik kapustę :-) Jest to z pewnością zasługa tego, że z wielką mocą wiąże się jeszcze wiekszy proces indeksacji.</p>]]></content><author><name></name></author><category term="php"/><category term="ide"/><category term="netbeans"/><summary type="html"><![CDATA[Dlaczego nie PHPStorm? Dlaczego nie VIM albo Visual Studio Code? Od pewnego czasu szukałem narzędzia dla siebie, które byłoby na tyle nieprzeładowane bajerami a jednocześnie wystarczająco użyteczny i poteżne by ułatwiać codzienną pracę.]]></summary></entry><entry><title type="html">Przecinek po nowej linii w argumentach funkcji PHP (trailing comma)</title><link href="https://ziumper.github.io/pl/blog/2025/trailing-comma-line/" rel="alternate" type="text/html" title="Przecinek po nowej linii w argumentach funkcji PHP (trailing comma)"/><published>2025-10-07T00:00:00+00:00</published><updated>2025-10-07T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/trailing-comma-line</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/trailing-comma-line/"><![CDATA[<p>Czy zdarzyło Ci się kiedyś dodać nowy argument do funkcji lub konstruktora w PHP i zapomnieć o przecinku na końcu poprzedniej linii? To częsty błąd, który może prowadzić do niepotrzebnych poprawek i frustracji.</p> <p>Na szczęście od PHP 7.3 możesz używać tzw. trailing comma, czyli przecinka po ostatnim argumencie w wywołaniach funkcji, deklaracjach funkcji oraz w tablicach. Dzięki temu, gdy dodajesz nowy argument, nie musisz pamiętać o ręcznym dodaniu przecinka na końcu poprzedniej linii.</p> <h3 id="-przykład-bez-trailing-comma">🛑 Przykład bez trailing comma</h3> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">int</span> <span class="nv">$age</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Jeśli chcesz dodać kolejny argument, musisz wrócić do poprzedniej linii i dodać przecinek:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">int</span> <span class="nv">$age</span><span class="p">,</span> <span class="c1">// musisz dodać przecinek</span>
        <span class="kt">string</span> <span class="nv">$email</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="-przykład-z-trailing-comma">✅ Przykład z trailing comma</h3> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">int</span> <span class="nv">$age</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Teraz możesz po prostu dopisać kolejny argument bez martwienia się o przecinki:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">int</span> <span class="nv">$age</span><span class="p">,</span>
        <span class="kt">string</span> <span class="nv">$email</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="-od-kiedy">📅 Od kiedy?</h3> <p>Trailing comma w listach argumentów funkcji i metod jest dostępny od PHP 7.3. Wcześniej można było jej używać tylko w tablicach.</p> <h3 id="-podsumowanie">📝 Podsumowanie</h3> <p>Stosowanie trailing comma:</p> <ul> <li>ułatwia dodawanie i usuwanie argumentów,</li> <li>zmniejsza ryzyko błędów składniowych,</li> <li>poprawia czytelność kodu w dłuższej perspektywie.</li> </ul> <p>Warto korzystać z tej możliwości, szczególnie w większych projektach!</p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[Jak trailing comma (,) w PHP ułatwia życie programisty przy pracy z argumentami funkcji i konstruktorów.,]]></summary></entry><entry><title type="html">Wykorzystanie array_map() w codziennym życiu programisty. Przegląd PHP #7</title><link href="https://ziumper.github.io/pl/blog/2025/array-map-in-php/" rel="alternate" type="text/html" title="Wykorzystanie array_map() w codziennym życiu programisty. Przegląd PHP #7"/><published>2025-09-30T00:00:00+00:00</published><updated>2025-09-30T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/array-map-in-php</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/array-map-in-php/"><![CDATA[<p>Artykuł nie będzie zbyt długi, ale na pewno będzie na tyle użyteczny, że może komuś posłużyć jako dobry odnośnik do przyszłych decyzji. Czy warto użyć <code class="language-plaintext highlighter-rouge">array_map</code>? Zdecydowanie tak, jeżeli musimy wykonać pewne operacje mutacji na poszczególnych elementach. Może to być na przykład:</p> <ul> <li>budowanie podtablic z róznych wartości</li> </ul> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">php</span> <span class="o">&gt;</span> <span class="nb">var_dump</span><span class="p">(</span><span class="nb">array_map</span><span class="p">(</span><span class="k">static</span> <span class="k">fn</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'numeric_string'</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">],</span> <span class="p">[</span><span class="s1">'zero'</span><span class="p">,</span><span class="s1">'one'</span><span class="p">,</span><span class="s1">'two'</span><span class="p">,</span><span class="s1">'three'</span><span class="p">]));</span>
<span class="k">array</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=&gt;</span>
  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">"numeric_string"</span><span class="p">]</span><span class="o">=&gt;</span>
    <span class="nf">string</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="s2">"zero"</span>
  <span class="p">}</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=&gt;</span>
  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">"numeric_string"</span><span class="p">]</span><span class="o">=&gt;</span>
    <span class="nf">string</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="s2">"one"</span>
  <span class="p">}</span>
  <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=&gt;</span>
  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">"numeric_string"</span><span class="p">]</span><span class="o">=&gt;</span>
    <span class="nf">string</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="s2">"two"</span>
  <span class="p">}</span>
  <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=&gt;</span>
  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">"numeric_string"</span><span class="p">]</span><span class="o">=&gt;</span>
    <span class="nf">string</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="s2">"three"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>wyciągnięcie wartości innej tablicy i zamiana ją na inną</li> </ul> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ids</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">static</span> <span class="k">fn</span> <span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="nv">$id</span><span class="p">],</span> <span class="nb">array_values</span><span class="p">(</span><span class="nv">$ids</span><span class="p">));</span>
</code></pre></div></div> <ul> <li>zwrócenie nowej listy wartości ze zmienionnymi wartościami, nie zmieniając starej listy</li> </ul> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$newArray</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">static</span> <span class="k">fn</span> <span class="p">(</span><span class="nv">$item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">'"'</span><span class="mf">.</span><span class="s1">'""'</span><span class="mf">.</span><span class="nv">$item</span><span class="p">);</span>
</code></pre></div></div> <p>Przykłady można mnożyć, ale najwięcej użytecznych przykładów można znaleźć tu: <a href="https://www.php.net/manual/en/function.array-map.php">link do dokumentacji PHP</a></p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[Tym razem postanowiłem przyjrzeć się najczęstszym wykorzystaniom array_map w moim codziennym kodzie.]]></summary></entry><entry><title type="html">W końcu dobrze napisane testy z odpowiednią strukturą ładowania Composer</title><link href="https://ziumper.github.io/pl/blog/2025/Composer-with-phpunit-setup/" rel="alternate" type="text/html" title="W końcu dobrze napisane testy z odpowiednią strukturą ładowania Composer"/><published>2025-09-29T00:00:00+00:00</published><updated>2025-09-29T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Composer-with-phpunit-setup</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Composer-with-phpunit-setup/"><![CDATA[<p>Potykałem się, czołgałem po ziemi, mając źle skonfigurowany projekt, nad którym powinienem był pracować. I wtedy zrozumiałem, jak powinienem uporządkować sposób ładowania klas.</p> <p>Oto, co miałem wcześniej w moim projekcie:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"autoload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Ale w ten sposób wszystkie moje klasy były ładowane do mapy autoload Composera. Wiedziałem, że musi być na to lepszy sposób. I oto co odkryłem:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"autoload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src/"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"autoload-dev"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>W międzyczasie napotkałem kilka poważnych problemów — nie mogłem zadeklarować Traitów w folderze testów, a kopiowanie i wklejanie całego tego kodu było bardzo frustrujące. W końcu przeszedłem do kolejnej wersji:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"autoload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src"</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\Tests\\Utils\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/utils"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"exclude-from-classmap"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"tests"</span><span class="p">]</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"autoload-dev"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\Tests\\Unit\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/unit"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\Tests\\Integration\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/integration"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Jak to działa:</p> <ul> <li>wszystkie deklaracje przechowywane są w folderze src, a te używane w testach — np. bazowe przypadki testowe, trait’y, data providery itd. w folderze tests utils,</li> <li>testy integracyjne i jednostkowe korzystają z odniesień do tests i wszystko działa bardzo sprawnie,</li> <li><code class="language-plaintext highlighter-rouge">exclude-from-classmap</code> to coś w rodzaju strażnika, który pilnuje, aby kod testowy nie został przypadkowo załadowany do produkcyjnego środowiska.</li> <li>PSR-4 autoloader Composera ładuje klasy w locie po namespace → folder → filename.</li> <li>PHPUnit korzysta z autoloadera, więc klasy są widoczne w testach.</li> <li>exclude-from-classmap = chroni produkcję przed ładowaniem klas testowych, nie blokuje testów</li> <li>nie ma potrzeby pisania wielu skryptów do ładowania klas php</li> </ul> <p>Myślę, że w ten sposób mogę w końcu zacząć budować coś… co naprawdę ma sens!</p>]]></content><author><name></name></author><category term="php"/><category term="composer"/><category term="phpunit"/><summary type="html"><![CDATA[Ten wpis wyjaśnia, jak zorganizować projekt oparty na Composerze z zależnościami PHPUnit, aby nie ładować przypadków testowych do classmapy, oraz opisuje wnioski, które wyciągnąłem w trakcie pracy.]]></summary></entry><entry><title type="html">Jak zintegrować GitHub Copilot do automatycznego generowania wiadomości commitów?</title><link href="https://ziumper.github.io/pl/blog/2025/Add-github-copilot-auto-commit-message-generation/" rel="alternate" type="text/html" title="Jak zintegrować GitHub Copilot do automatycznego generowania wiadomości commitów?"/><published>2025-09-24T00:00:00+00:00</published><updated>2025-09-24T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Add-github-copilot-auto-commit-message-generation</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Add-github-copilot-auto-commit-message-generation/"><![CDATA[<p>Najważniejszą częścią pracy w zespole jest komunikacja. Jednym z najważniejszych sposobów komunikacji z zespołem są wiadomości commitów. Dobra wiadomość commita powinna być jasna, zwięzła i informatywna. Powinna opisywać, jakie zmiany zostały wprowadzone i dlaczego. Jednak pisanie dobrych wiadomości commitów może być czasochłonne i nużące. Tu z pomocą przychodzi GitHub Copilot. GitHub Copilot to narzędzie wspierane przez AI, które pomaga pisać kod szybciej i efektywniej. Ale czy wiesz, że GitHub Copilot może także pomóc w pisaniu lepszych wiadomości commitów? W tym wpisie pokażemy, jak używać GitHub Copilot do automatycznego generowania wiadomości commitów.</p> <h2 id="krok-1-dodaj-szablon-github-copilot-do-swojego-repozytorium">Krok 1: Dodaj szablon GitHub Copilot do swojego repozytorium</h2> <p>Aby rozpocząć, musisz dodać szablon GitHub Copilot do swojego repozytorium. Ten szablon zapewni GitHub Copilot odpowiedni kontekst do generowania wiadomości commitów. Możesz utworzyć nowy plik w repozytorium o nazwie <code class="language-plaintext highlighter-rouge">.github/git-commit-instructions.md</code> i dodać następującą zawartość:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Git Commit Instructions

When making a commit, please follow these guidelines to ensure clarity and consistency in our commit history.
Provide description in the commit message.
* Describe the changes made in the commit and intended impact on the codebase in new lines.
* Make sure to include:
    * What was changed (e.g., added feature, fixed bug, updated documentation).
    * Why the change was necessary (e.g., to improve performance, fix an issue, enhance user experience).
    * Any relevant details that help understand the context of the change.
* Elaborate on the reasoning behind the changes and any relevant context that may help reviewers understand the
commit better.
</code></pre></div></div> <p>Ten szablon zawiera wytyczne dotyczące pisania dobrych wiadomości commitów i pomoże GitHub Copilot generować lepsze wiadomości.</p> <h2 id="krok-2-użyj-github-copilot-do-generowania-wiadomości-commitów">Krok 2: Użyj GitHub Copilot do generowania wiadomości commitów</h2> <p>Po dodaniu szablonu do repozytorium możesz zacząć używać GitHub Copilot do generowania wiadomości commitów. Gdy będziesz gotowy do wykonania commita, możesz użyć jednego z poniższych edytorów IDE wspierających GitHub Copilot:</p> <ul> <li>Visual Studio Code</li> <li>IDE JetBrains (np. IntelliJ IDEA, PyCharm, WebStorm)</li> <li>Neovim Po otwarciu edytora wiadomości commita GitHub Copilot automatycznie zaproponuje wiadomość commita na podstawie wprowadzonych zmian oraz wytycznych ze wskazanego szablonu. GitHub Copilot automatycznie zasugeruje wiadomość commita na podstawie wprowadzonych zmian oraz wytycznych ze wskazanego szablonu.</li> </ul> <h2 id="podsumowanie">Podsumowanie</h2> <p>Korzystanie z GitHub Copilot do automatycznego generowania wiadomości commitów może pomóc pisać lepsze wiadomości i zwiększyć produktywność. Dodając szablon GitHub Copilot do repozytorium i korzystając z jednego z obsługiwanych edytorów IDE wspierających GitHub Copilot, możesz łatwo generować przejrzyste i informatywne wiadomości commitów. Spróbuj i zobacz, jak może to usprawnić Twój workflow! Ja już korzystam i bardzo polecam! 😊</p>]]></content><author><name></name></author><category term="git"/><category term="github"/><category term="productivity"/><category term="copilot"/><summary type="html"><![CDATA[Ten post wyjaśnia, jak używać GitHub Copilot do automatycznego generowania wiadomości commitów, zwiększając produktywność i zapewniając przejrzystą historię zmian.]]></summary></entry><entry><title type="html">🤓 Dlaczego programiści PHP kochają pustą linię na końcu pliku? Przegląd PHP #6</title><link href="https://ziumper.github.io/pl/blog/2025/New-line-at-the-end-of-php-file/" rel="alternate" type="text/html" title="🤓 Dlaczego programiści PHP kochają pustą linię na końcu pliku? Przegląd PHP #6"/><published>2025-09-23T00:00:00+00:00</published><updated>2025-09-23T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/New-line-at-the-end-of-php-file</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/New-line-at-the-end-of-php-file/"><![CDATA[<h1 id="dlaczego-dodaje-się-pustą-linię-na-końcu-plików-php-i-twig-">Dlaczego dodaje się pustą linię na końcu plików PHP i Twig? 🤔</h1> <p>Czy kiedykolwiek zastanawiałeś się, dlaczego programiści z uporem maniaka dodają pustą linię na końcu plików? Czy to jakaś tajna tradycja? A może sposób na walkę z nudą? Odpowiedź jest bardziej techniczna, ale nie brakuje tu odrobiny historii i… odrobiny absurdu! 😄</p> <h2 id="powody-techniczne-️">Powody techniczne 🛠️</h2> <h3 id="1-standard-posix-">1. <strong>Standard POSIX</strong> 🧑‍💻</h3> <p>Wyobraź sobie, że POSIX to taki surowy nauczyciel w szkole programistów. Mówi: “Każdy plik tekstowy musi kończyć się nową linią (<code class="language-plaintext highlighter-rouge">\n</code>). Koniec dyskusji!” Dlaczego? Bo narzędzia takie jak <code class="language-plaintext highlighter-rouge">cat</code>, <code class="language-plaintext highlighter-rouge">diff</code> czy <code class="language-plaintext highlighter-rouge">git</code> lubią porządek. Jeśli plik nie kończy się nową linią, mogą się obrazić i pokazać dziwne wyniki, np. połączą ostatnią linię jednego pliku z pierwszą drugiego. To trochę jakby dwa zdania w książce zlały się w jedno – chaos! 📚</p> <p>POSIX (Portable Operating System Interface) powstał, by ujednolicić zachowanie systemów operacyjnych. Dzięki temu programy mogą działać przewidywalnie na różnych komputerach. A pusta linia na końcu pliku to taki mały gest w stronę porządku i kompatybilności. ✨</p> <h3 id="2-unikanie-błędów-w-php-">2. <strong>Unikanie błędów w PHP</strong> 🐘</h3> <p>W PHP, jeśli po zamknięciu tagu <code class="language-plaintext highlighter-rouge">?&gt;</code> pojawi się cokolwiek – nawet niewinna spacja czy nowa linia – serwer może się zdenerwować i wysłać nagłówki HTTP w złym momencie. Efekt? Strona wygląda dziwnie, a Ty szukasz błędu przez pół dnia. Pusta linia to taki programistyczny amulet na szczęście! 🍀</p> <h3 id="3-lepsza-czytelność-">3. <strong>Lepsza czytelność</strong> 👀</h3> <p>Pusta linia na końcu pliku to jak kropka na końcu zdania. Dzięki niej kod wygląda schludnie, a zmiany w systemach kontroli wersji są bardziej przejrzyste. Git lubi, gdy wszystko jest na swoim miejscu! 😎</p> <h3 id="4-standardy-psr-2-i-psr-12-">4. <strong>Standardy PSR-2 i PSR-12</strong> 📏</h3> <p>A co na to PHP-FIG, czyli programistyczna rada starszych? Wymyślili standard PSR-2, a potem jego młodszego, bardziej wymagającego brata PSR-12. Oba mówią jasno: na końcu pliku ma być nowa linia! Dzięki temu kod jest zgodny z wytycznymi, a Twój linter nie dostaje ataku paniki. To trochę jak przestrzeganie zasad BHP w kodzie – nikt nie chce dostać mandatu od reviewera! 🚨</p> <h2 id="powody-historyczne-">Powody historyczne 🏺</h2> <p>Dawniej edytory tekstu były kapryśne. Brak pustej linii mógł wywołać błędy przy kompilacji lub interpretacji kodu. Programiści nauczyli się więc dodawać tę magiczną linię, by uniknąć niespodzianek. To trochę jak noszenie skarpetek do sandałów – nie zawsze potrzebne i jest traktowane jako bezguście, ale czasem ratuje dzień! 🧦</p> <h2 id="twig-️">Twig 🕸️</h2> <p>W plikach Twig pusta linia pomaga uniknąć niechcianych znaków w generowanym HTML. Dzięki temu Twoja strona nie wygląda jak patchwork z przypadkowych spacji i enterów. A systemy kontroli wersji? One też są wdzięczne! 🙏</p> <h2 id="podsumowanie-">Podsumowanie 🎉</h2> <p>Dodawanie pustej linii na końcu plików PHP i Twig to nie tylko techniczna konieczność, ale też element programistycznej kultury. Chroni przed błędami, dba o porządek i sprawia, że narzędzia są szczęśliwe. Więc następnym razem, gdy dodasz pustą linię, możesz poczuć się jak bohater kodu! 🦸‍♂️</p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[Post wyjaśnia, dlaczego programiści dodają pustą linię na końcu plików PHP i Twig, przedstawiając techniczne, historyczne oraz humorystyczne powody tej praktyki. Dowiesz się, jak wpływa to na kompatybilność, czytelność kodu i uniknięcie błędów]]></summary></entry><entry><title type="html">🧹 Jak usunąć przepisy z sekcji `extra` w composer.json</title><link href="https://ziumper.github.io/pl/blog/2025/Composer-recipes-fix/" rel="alternate" type="text/html" title="🧹 Jak usunąć przepisy z sekcji `extra` w composer.json"/><published>2025-09-22T00:00:00+00:00</published><updated>2025-09-22T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Composer-recipes-fix</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Composer-recipes-fix/"><![CDATA[<p>Pracując nad projektami PHP, szczególnie tymi opartymi o Symfony, możesz natrafić na sekcję <code class="language-plaintext highlighter-rouge">extra</code> w pliku <code class="language-plaintext highlighter-rouge">composer.json</code>. Często zawiera ona przepisy (recipes), które pomagają skonfigurować Twój projekt. Z czasem możesz jednak zechcieć usunąć lub uporządkować te przepisy.</p> <h2 id="czym-jest-sekcja-extra-w-composerjson">Czym jest sekcja <code class="language-plaintext highlighter-rouge">extra</code> w composer.json?</h2> <p>Sekcja <code class="language-plaintext highlighter-rouge">extra</code> to specjalne miejsce w pliku <code class="language-plaintext highlighter-rouge">composer.json</code> na niestandardową konfigurację.<br/> Używana jest przez wtyczki Composera, frameworki (np. Symfony), czy skrypty do przechowywania dodatkowych ustawień.</p> <h3 id="przykład">Przykład</h3> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"extra"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"symfony"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"allow-contrib"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"recipes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"symfony/console"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"ref"</span><span class="p">:</span><span class="w"> </span><span class="s2">"abcdef"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="do-czego-używałem-sekcji-extra">Do czego używałem sekcji <code class="language-plaintext highlighter-rouge">extra</code>?</h2> <p>Ja wykorzystywałem ją do przechowywania przepisów Symfony Flex. Symfony Flex to wtyczka Composera, która pomaga zarządzać aplikacjami Symfony poprzez automatyczną instalację i konfigurację pakietów. Gdy instalujesz pakiet posiadający przepis, Symfony Flex dodaje pliki konfiguracyjne i ustawienia do projektu automatycznie. Możesz chcieć usunąć niektóre z tych przepisów, jeśli nie są Ci już potrzebne lub chcesz dostosować swoją konfigurację. W moim przypadku była to konfiguracja dockera, której nie potrzebowałem.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"extra"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"symfony"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"allow-contrib"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"docker"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="symfony-flex">Symfony Flex</h2> <p>Przepisy Flex przyjmują pewne założenia co do struktury katalogów w Twoim projekcie. Część z tych założeń można dostosować, dodając odpowiedni klucz w sekcji extra w pliku composer.json. Przykładowo, aby powiedzieć Flexowi, by kopiował klasy PHP do src/App zamiast src:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"..."</span><span class="p">:</span><span class="w"> </span><span class="s2">"..."</span><span class="p">,</span><span class="w">

  </span><span class="nl">"extra"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"src-dir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src/App"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="rozwiązywanie-problemów">Rozwiązywanie problemów</h2> <p>Jeśli napotkasz problemy po usunięciu przepisów, spróbuj wykonać poniższe kroki:</p> <ul> <li>Uruchom <code class="language-plaintext highlighter-rouge">composer install</code>, aby odświeżyć zależności.</li> <li>Sprawdź, czy nie brakuje plików konfiguracyjnych lub zmiennych środowiskowych.</li> <li>Przejrzyj dokumentację Symfony, aby sprawdzić, czy po usunięciu przepisu wymagane są dodatkowe ręczne kroki.</li> </ul> <h2 id="dodatkowe-zasoby">Dodatkowe zasoby</h2> <ul> <li><a href="https://symfony.com/doc/current/setup/flex.html">Dokumentacja przepisów Symfony</a></li> <li><a href="https://getcomposer.org/doc/04-schema.md#extra">Sekcja Extra w Composer</a></li> </ul>]]></content><author><name></name></author><category term="php,"/><category term="composer,"/><category term="symfony,"/><category term="symfony-flex"/><summary type="html"><![CDATA[Krótki przewodnik po sekcji `extra` w composer.json oraz usuwaniu przepisów Symfony.]]></summary></entry><entry><title type="html">🧐 PHP, Liczby zmiennoprzecinkowe i Tajemnica -0.0 Przegląd PHP #5</title><link href="https://ziumper.github.io/pl/blog/2025/Floats-and-mystery-of-zero/" rel="alternate" type="text/html" title="🧐 PHP, Liczby zmiennoprzecinkowe i Tajemnica -0.0 Przegląd PHP #5"/><published>2025-09-18T00:00:00+00:00</published><updated>2025-09-18T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Floats-and-mystery-of-zero</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Floats-and-mystery-of-zero/"><![CDATA[<p>Tak, serio. <code class="language-plaintext highlighter-rouge">-0.0</code> i <code class="language-plaintext highlighter-rouge">0.0</code> to dwie różne reprezentacje bajtowe w standardzie <a href="https://pl.wikipedia.org/wiki/IEEE_754">IEEE 754</a> – ale w praktyce… PHP i tak je traktuje tak samo.</p> <p>Miałem taki kod:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getPercentage</span><span class="p">():</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="c1">// epsilon to avoid division by zero</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">8</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nb">round</span><span class="p">((</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">totalCartPrice</span> <span class="o">/</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div> <p>I zacząłem się zastanawiać:</p> <ul> <li>Czy mogę po prostu porównać <code class="language-plaintext highlighter-rouge">$this-&gt;limitPrice == 0.0</code>?</li> <li>A co jeśli <code class="language-plaintext highlighter-rouge">limitPrice</code> = <code class="language-plaintext highlighter-rouge">-0.0</code>? 🤯</li> </ul> <hr/> <h2 id="-analiza">🔬 Analiza</h2> <h3 id="1️⃣-ieee-754-i--00">1️⃣ IEEE 754 i -0.0</h3> <p>W standardzie liczb zmiennoprzecinkowych istnieje <strong>dodatnie zero (0.0)</strong> i <strong>ujemne zero (-0.0)</strong>.<br/> Na poziomie bajtów to dwie różne wartości:</p> <ul> <li><code class="language-plaintext highlighter-rouge">0.0</code> → <code class="language-plaintext highlighter-rouge">0x0000000000000000</code></li> <li><code class="language-plaintext highlighter-rouge">-0.0</code> → <code class="language-plaintext highlighter-rouge">0x8000000000000000</code></li> </ul> <p>Czyli tak, binarnie to nie to samo.</p> <hr/> <h3 id="2️⃣-co-na-to-php">2️⃣ Co na to PHP?</h3> <p>Porównajmy:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="mf">0.0</span> <span class="o">==</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">);</span>   <span class="c1">// true</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="mf">0.0</span> <span class="o">===</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">);</span>  <span class="c1">// true</span>
</code></pre></div></div> <p>✅ PHP traktuje te dwie wartości jako równe zarówno w porównaniu luźnym (<code class="language-plaintext highlighter-rouge">==</code>), jak i ścisłym (<code class="language-plaintext highlighter-rouge">===</code>).</p> <p>Ale uwaga:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="mf">0.0</span><span class="p">);</span>  <span class="c1">// float(INF)</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">);</span> <span class="c1">// float(-INF)</span>
</code></pre></div></div> <p>➡️ Przy dzieleniu widać różnicę – znak zera wpływa na wynik (<code class="language-plaintext highlighter-rouge">+∞</code> vs <code class="language-plaintext highlighter-rouge">-∞</code>).</p> <hr/> <h3 id="3️⃣-czy-to-ma-znaczenie-w-moim-przypadku">3️⃣ Czy to ma znaczenie w moim przypadku?</h3> <p>W moim kodzie <code class="language-plaintext highlighter-rouge">limitPrice</code> ma <strong>maksymalnie 4 miejsca po przecinku</strong>, pochodzi z bazy danych lub prostych operacji.<br/> Nie mam tu ujemnych zer z kosmosu.<br/> W praktyce mogę spokojnie napisać:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span> <span class="o">==</span> <span class="mf">0.0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>I wszystko działa jak należy.<br/> Epsilon (<code class="language-plaintext highlighter-rouge">1e-8</code>) nie jest potrzebny, bo nie mam problemów z błędami zaokrągleń na poziomie 17 miejsc po przecinku.</p> <hr/> <h2 id="-bonus-jak-wykryć--00-dla-nerdów">🛠 Bonus: Jak wykryć -0.0 (dla nerdów)</h2> <p>Jeżeli jednak z jakiegoś powodu <strong>musisz wiedzieć, czy to -0.0</strong>, oto trik:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">isNegativeZero</span><span class="p">(</span><span class="kt">float</span> <span class="nv">$x</span><span class="p">):</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$x</span> <span class="o">===</span> <span class="mf">0.0</span> <span class="o">&amp;&amp;</span> <span class="mi">1</span> <span class="o">/</span> <span class="nv">$x</span> <span class="o">===</span> <span class="o">-</span><span class="no">INF</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nf">isNegativeZero</span><span class="p">(</span><span class="mf">0.0</span><span class="p">));</span>  <span class="c1">// false</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nf">isNegativeZero</span><span class="p">(</span><span class="o">-</span><span class="mf">0.0</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div> <p>Tak, trzeba podzielić przez zero, żeby to wykryć. 🧪</p> <hr/> <h2 id="-wniosek">✅ Wniosek</h2> <ul> <li>Tak, -0.0 i 0.0 to różne bajty.</li> <li>PHP traktuje je jako równe (<code class="language-plaintext highlighter-rouge">==</code>, <code class="language-plaintext highlighter-rouge">===</code>).</li> <li>Możesz śmiało pisać <code class="language-plaintext highlighter-rouge">== 0.0</code> w porównaniach.</li> <li>Jedynie dzielenie przez 0.0 i -0.0 zwraca różne nieskończoności (INF vs -INF) – więc jak dzielisz, warto używać <code class="language-plaintext highlighter-rouge">abs()</code>.</li> </ul> <hr/> <h2 id="-podsumowanie">🎉 Podsumowanie</h2> <p>Udało mi się uprościć kod i <strong>zamiast epsilonów</strong> mam po prostu:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getPercentage</span><span class="p">():</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span> <span class="o">?</span> <span class="nb">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nb">round</span><span class="p">((</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">totalCartPrice</span> <span class="o">/</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">))</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Czytelniej, prościej i dalej bezpiecznie.<br/> A fakt, że -0.0 istnieje, zostawiam jako ciekawostkę do impressowania znajomych programistów na kawie. ☕️😎</p> <p>PS: Jeżeli zależy Ci na użyciu epislona to chyba znacznie lepiej użyć tej stałej.</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kc">PHP_FLOAT_EPSILON</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[Czy wiesz, że w PHP istnieje ujemne zero? Ten post to podróż przez świat ujemnych zer, dzielenia przez nieskończoność i tego, czemu w Twoim kodzie i tak możesz spokojnie pisać == 0.0.]]></summary></entry><entry><title type="html">PhpUnit willReturnMap - Przegląd PHP #4</title><link href="https://ziumper.github.io/pl/blog/2025/PHPUnit-will-return-map-trap/" rel="alternate" type="text/html" title="PhpUnit willReturnMap - Przegląd PHP #4"/><published>2025-09-17T00:00:00+00:00</published><updated>2025-09-17T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/PHPUnit-will-return-map-trap</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/PHPUnit-will-return-map-trap/"><![CDATA[<p>Historia o tym, jak przez jeden mały <code class="language-plaintext highlighter-rouge">null</code> straciłem 30 minut życia na debugowanie testów,<br/> a potem znalazłem prawdę w dokumentacji… która milczy na ten temat. 🙃</p> <hr/> <h2 id="-problem">🧐 Problem</h2> <p>Załóżmy, że mamy taką metodę:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyService</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">doStuff</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$key</span><span class="p">,</span> <span class="kt">?string</span> <span class="nv">$flag</span> <span class="o">=</span> <span class="kc">null</span><span class="p">):</span> <span class="kt">string</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">"Result: "</span> <span class="mf">.</span> <span class="nv">$key</span> <span class="mf">.</span> <span class="p">(</span><span class="nv">$flag</span> <span class="o">?</span> <span class="s2">" (</span><span class="nv">$flag</span><span class="s2">)"</span> <span class="o">:</span> <span class="s2">""</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>I chcemy przetestować klasę, która używa <code class="language-plaintext highlighter-rouge">MyService</code> – oczywiście z mockiem.<br/> Używamy <strong><code class="language-plaintext highlighter-rouge">willReturnMap</code></strong>, bo jest eleganckie i działa dla wielu zestawów argumentów.</p> <p>Brzmi prosto?<br/> No to spójrzmy na test:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$mock</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">createMock</span><span class="p">(</span><span class="nc">MyService</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>

<span class="nv">$mock</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(</span><span class="s1">'doStuff'</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="nf">willReturnMap</span><span class="p">([</span>
        <span class="p">[</span><span class="s1">'foo'</span><span class="p">,</span> <span class="s1">'Result: foo (bar)'</span><span class="p">],</span>
        <span class="p">[</span><span class="s1">'baz'</span><span class="p">,</span> <span class="s1">'Result: baz'</span><span class="p">],</span>
    <span class="p">]);</span>
</code></pre></div></div> <p>Brzmi dobrze, nie?<br/> <strong>NIE.</strong> 😅</p> <hr/> <h2 id="-co-się-dzieje">💥 Co się dzieje?</h2> <p>Jeśli nie przekażesz dokładnie tylu argumentów, ile metoda przyjmuje, PHPUnit powie:</p> <blockquote> <p>“Nie wiem o co ci chodzi” 🤷‍♂️<br/> i zwróci <code class="language-plaintext highlighter-rouge">null</code>.</p> </blockquote> <p>Czyli gdy w kodzie produkcyjnym wywołasz:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$service</span><span class="o">-&gt;</span><span class="nf">doStuff</span><span class="p">(</span><span class="s1">'baz'</span><span class="p">);</span>
</code></pre></div></div> <p>to mock powie:</p> <blockquote> <p>“Przykro mi, ale ja nie znam takiej mapy”.</p> </blockquote> <p>I test wybucha. 💣</p> <hr/> <h2 id="-dlaczego-tak-jest">🤯 Dlaczego tak jest?</h2> <p>Bo <code class="language-plaintext highlighter-rouge">willReturnMap</code> dopasowuje argumenty <strong>po kolei</strong>, 1:1.<br/> Domyślny argument <code class="language-plaintext highlighter-rouge">null</code> nie jest w magiczny sposób “zgadywany”.<br/> Trzeba go tam podać jawnie w tablicy.</p> <hr/> <h2 id="-poprawne-rozwiązanie">✅ Poprawne rozwiązanie</h2> <p>Trzeba <strong>dopasować dokładnie liczbę argumentów</strong>, nawet jeśli są domyślne:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$mock</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(</span><span class="s1">'doStuff'</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="nf">willReturnMap</span><span class="p">([</span>
        <span class="p">[</span><span class="s1">'foo'</span><span class="p">,</span> <span class="s1">'bar'</span><span class="p">,</span> <span class="s1">'Result: foo (bar)'</span><span class="p">],</span>
        <span class="p">[</span><span class="s1">'baz'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="s1">'Result: baz'</span><span class="p">],</span> <span class="c1">// &lt;--- null musi być!</span>
    <span class="p">]);</span>
</code></pre></div></div> <p>Tak, wiem – niby oczywiste, ale jednak człowiek czasem liczy na trochę magii. 🪄<br/> Niestety – PHPUnit tutaj magii nie oferuje.</p> <hr/> <h2 id="-morał-historii">📝 Morał historii</h2> <ul> <li><code class="language-plaintext highlighter-rouge">willReturnMap</code> jest super, ale jest <strong>bardzo dosłowne</strong>.</li> <li>Jeśli metoda ma 2 argumenty – w mapie też musisz mieć 2 argumenty.</li> <li>Nawet jeśli ten drugi argument ma <code class="language-plaintext highlighter-rouge">null</code> jako default.</li> <li>PHPUnit nie robi za wróżkę – nie zgadnie, że miałeś na myśli default. 😅</li> </ul> <hr/> <h2 id="-wnioski">🎉 Wnioski</h2> <p>Po tym odkryciu moje testy przestały eksplodować.<br/> Wiedza, że <strong>trzeba jawnie podać każdy argument w mapie</strong>, oszczędziła mi godzin debugowania.<br/> Teraz już wiem – przy mockach <strong>lepiej podać o jeden argument za dużo niż za mało</strong>.</p> <blockquote> <p>🧠 <strong>Meritum:</strong> <code class="language-plaintext highlighter-rouge">willReturnMap</code> ≠ elastyczne dopasowanie.<br/> To <strong>twarda mapa argumentów</strong> – podaj wszystko albo nie narzekaj, że testy płoną. 🔥</p> </blockquote> <hr/> <p>✍️ <strong>PS:</strong> Jeśli ktoś znajdzie w dokumentacji PHPUnit wzmiankę o tym case – dajcie znać.<br/> Ja nie znalazłem, a przeszukałem pół internetu. 🙈</p> <p><a href="https://docs.phpunit.de/en/12.3/test-doubles.html#willreturnmap">Link do dokumentacji</a></p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[🐛 "PhpUnit, willReturnMap i domyślne argumenty – czyli jak wpaść w subtelną pułapkę 🪤"]]></summary></entry></feed>
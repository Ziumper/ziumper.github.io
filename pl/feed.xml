<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://ziumper.github.io/pl/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ziumper.github.io/pl/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-18T15:44:53+00:00</updated><id>https://ziumper.github.io/feed.xml</id><title type="html">Ziumper</title><entry><title type="html">🧐 PHP, Liczby zmiennoprzecinkowe i Tajemnica -0.0 Przegląd PHP #5</title><link href="https://ziumper.github.io/pl/blog/2025/Floats-and-mystery-of-zero/" rel="alternate" type="text/html" title="🧐 PHP, Liczby zmiennoprzecinkowe i Tajemnica -0.0 Przegląd PHP #5"/><published>2025-09-18T00:00:00+00:00</published><updated>2025-09-18T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Floats-and-mystery-of-zero</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Floats-and-mystery-of-zero/"><![CDATA[<p>Tak, serio. <code class="language-plaintext highlighter-rouge">-0.0</code> i <code class="language-plaintext highlighter-rouge">0.0</code> to dwie różne reprezentacje bajtowe w standardzie <a href="https://pl.wikipedia.org/wiki/IEEE_754">IEEE 754</a> – ale w praktyce… PHP i tak je traktuje tak samo.</p> <p>Miałem taki kod:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getPercentage</span><span class="p">():</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="c1">// epsilon to avoid division by zero</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">8</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nb">round</span><span class="p">((</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">totalCartPrice</span> <span class="o">/</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div> <p>I zacząłem się zastanawiać:</p> <ul> <li>Czy mogę po prostu porównać <code class="language-plaintext highlighter-rouge">$this-&gt;limitPrice == 0.0</code>?</li> <li>A co jeśli <code class="language-plaintext highlighter-rouge">limitPrice</code> = <code class="language-plaintext highlighter-rouge">-0.0</code>? 🤯</li> </ul> <hr/> <h2 id="-analiza">🔬 Analiza</h2> <h3 id="1️⃣-ieee-754-i--00">1️⃣ IEEE 754 i -0.0</h3> <p>W standardzie liczb zmiennoprzecinkowych istnieje <strong>dodatnie zero (0.0)</strong> i <strong>ujemne zero (-0.0)</strong>.<br/> Na poziomie bajtów to dwie różne wartości:</p> <ul> <li><code class="language-plaintext highlighter-rouge">0.0</code> → <code class="language-plaintext highlighter-rouge">0x0000000000000000</code></li> <li><code class="language-plaintext highlighter-rouge">-0.0</code> → <code class="language-plaintext highlighter-rouge">0x8000000000000000</code></li> </ul> <p>Czyli tak, binarnie to nie to samo.</p> <hr/> <h3 id="2️⃣-co-na-to-php">2️⃣ Co na to PHP?</h3> <p>Porównajmy:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="mf">0.0</span> <span class="o">==</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">);</span>   <span class="c1">// true</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="mf">0.0</span> <span class="o">===</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">);</span>  <span class="c1">// true</span>
</code></pre></div></div> <p>✅ PHP traktuje te dwie wartości jako równe zarówno w porównaniu luźnym (<code class="language-plaintext highlighter-rouge">==</code>), jak i ścisłym (<code class="language-plaintext highlighter-rouge">===</code>).</p> <p>Ale uwaga:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="mf">0.0</span><span class="p">);</span>  <span class="c1">// float(INF)</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">);</span> <span class="c1">// float(-INF)</span>
</code></pre></div></div> <p>➡️ Przy dzieleniu widać różnicę – znak zera wpływa na wynik (<code class="language-plaintext highlighter-rouge">+∞</code> vs <code class="language-plaintext highlighter-rouge">-∞</code>).</p> <hr/> <h3 id="3️⃣-czy-to-ma-znaczenie-w-moim-przypadku">3️⃣ Czy to ma znaczenie w moim przypadku?</h3> <p>W moim kodzie <code class="language-plaintext highlighter-rouge">limitPrice</code> ma <strong>maksymalnie 4 miejsca po przecinku</strong>, pochodzi z bazy danych lub prostych operacji.<br/> Nie mam tu ujemnych zer z kosmosu.<br/> W praktyce mogę spokojnie napisać:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span> <span class="o">==</span> <span class="mf">0.0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>I wszystko działa jak należy.<br/> Epsilon (<code class="language-plaintext highlighter-rouge">1e-8</code>) nie jest potrzebny, bo nie mam problemów z błędami zaokrągleń na poziomie 17 miejsc po przecinku.</p> <hr/> <h2 id="-bonus-jak-wykryć--00-dla-nerdów">🛠 Bonus: Jak wykryć -0.0 (dla nerdów)</h2> <p>Jeżeli jednak z jakiegoś powodu <strong>musisz wiedzieć, czy to -0.0</strong>, oto trik:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">isNegativeZero</span><span class="p">(</span><span class="kt">float</span> <span class="nv">$x</span><span class="p">):</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$x</span> <span class="o">===</span> <span class="mf">0.0</span> <span class="o">&amp;&amp;</span> <span class="mi">1</span> <span class="o">/</span> <span class="nv">$x</span> <span class="o">===</span> <span class="o">-</span><span class="no">INF</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nf">isNegativeZero</span><span class="p">(</span><span class="mf">0.0</span><span class="p">));</span>  <span class="c1">// false</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nf">isNegativeZero</span><span class="p">(</span><span class="o">-</span><span class="mf">0.0</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div> <p>Tak, trzeba podzielić przez zero, żeby to wykryć. 🧪</p> <hr/> <h2 id="-wniosek">✅ Wniosek</h2> <ul> <li>Tak, -0.0 i 0.0 to różne bajty.</li> <li>PHP traktuje je jako równe (<code class="language-plaintext highlighter-rouge">==</code>, <code class="language-plaintext highlighter-rouge">===</code>).</li> <li>Możesz śmiało pisać <code class="language-plaintext highlighter-rouge">== 0.0</code> w porównaniach.</li> <li>Jedynie dzielenie przez 0.0 i -0.0 zwraca różne nieskończoności (INF vs -INF) – więc jak dzielisz, warto używać <code class="language-plaintext highlighter-rouge">abs()</code>.</li> </ul> <hr/> <h2 id="-podsumowanie">🎉 Podsumowanie</h2> <p>Udało mi się uprościć kod i <strong>zamiast epsilonów</strong> mam po prostu:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getPercentage</span><span class="p">():</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span> <span class="o">?</span>
        <span class="o">:</span> <span class="nb">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nb">round</span><span class="p">((</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">totalCartPrice</span> <span class="o">/</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">))</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Czytelniej, prościej i dalej bezpiecznie.<br/> A fakt, że -0.0 istnieje, zostawiam jako ciekawostkę do impressowania znajomych programistów na kawie. ☕️😎</p> <p>PS: Jeżeli zależy Ci na użyciu epislona to chyba znacznie lepiej użyć tej stałej.</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kc">PHP_FLOAT_EPSILON</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[Czy wiesz, że w PHP istnieje ujemne zero? Ten post to podróż przez świat ujemnych zer, dzielenia przez nieskończoność i tego, czemu w Twoim kodzie i tak możesz spokojnie pisać == 0.0.]]></summary></entry><entry><title type="html">PhpUnit willReturnMap - Przegląd PHP #4</title><link href="https://ziumper.github.io/pl/blog/2025/PHPUnit-will-return-map-trap/" rel="alternate" type="text/html" title="PhpUnit willReturnMap - Przegląd PHP #4"/><published>2025-09-17T00:00:00+00:00</published><updated>2025-09-17T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/PHPUnit-will-return-map-trap</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/PHPUnit-will-return-map-trap/"><![CDATA[<p>Historia o tym, jak przez jeden mały <code class="language-plaintext highlighter-rouge">null</code> straciłem 30 minut życia na debugowanie testów,<br/> a potem znalazłem prawdę w dokumentacji… która milczy na ten temat. 🙃</p> <hr/> <h2 id="-problem">🧐 Problem</h2> <p>Załóżmy, że mamy taką metodę:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyService</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">doStuff</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$key</span><span class="p">,</span> <span class="kt">?string</span> <span class="nv">$flag</span> <span class="o">=</span> <span class="kc">null</span><span class="p">):</span> <span class="kt">string</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">"Result: "</span> <span class="mf">.</span> <span class="nv">$key</span> <span class="mf">.</span> <span class="p">(</span><span class="nv">$flag</span> <span class="o">?</span> <span class="s2">" (</span><span class="nv">$flag</span><span class="s2">)"</span> <span class="o">:</span> <span class="s2">""</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>I chcemy przetestować klasę, która używa <code class="language-plaintext highlighter-rouge">MyService</code> – oczywiście z mockiem.<br/> Używamy <strong><code class="language-plaintext highlighter-rouge">willReturnMap</code></strong>, bo jest eleganckie i działa dla wielu zestawów argumentów.</p> <p>Brzmi prosto?<br/> No to spójrzmy na test:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$mock</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">createMock</span><span class="p">(</span><span class="nc">MyService</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>

<span class="nv">$mock</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(</span><span class="s1">'doStuff'</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="nf">willReturnMap</span><span class="p">([</span>
        <span class="p">[</span><span class="s1">'foo'</span><span class="p">,</span> <span class="s1">'bar'</span><span class="p">,</span> <span class="s1">'Result: foo (bar)'</span><span class="p">],</span>
        <span class="p">[</span><span class="s1">'baz'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="s1">'Result: baz'</span><span class="p">],</span>
    <span class="p">]);</span>
</code></pre></div></div> <p>Brzmi dobrze, nie?<br/> <strong>NIE.</strong> 😅</p> <hr/> <h2 id="-co-się-dzieje">💥 Co się dzieje?</h2> <p>Jeśli nie przekażesz dokładnie tylu argumentów, ile metoda przyjmuje, PHPUnit powie:</p> <blockquote> <p>“Nie wiem o co ci chodzi” 🤷‍♂️<br/> i zwróci <code class="language-plaintext highlighter-rouge">null</code>.</p> </blockquote> <p>Czyli gdy w kodzie produkcyjnym wywołasz:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$service</span><span class="o">-&gt;</span><span class="nf">doStuff</span><span class="p">(</span><span class="s1">'baz'</span><span class="p">);</span>
</code></pre></div></div> <p>to mock powie:</p> <blockquote> <p>“Przykro mi, ale ja nie znam takiej mapy”.</p> </blockquote> <p>I test wybucha. 💣</p> <hr/> <h2 id="-dlaczego-tak-jest">🤯 Dlaczego tak jest?</h2> <p>Bo <code class="language-plaintext highlighter-rouge">willReturnMap</code> dopasowuje argumenty <strong>po kolei</strong>, 1:1.<br/> Domyślny argument <code class="language-plaintext highlighter-rouge">null</code> nie jest w magiczny sposób “zgadywany”.<br/> Trzeba go tam podać jawnie w tablicy.</p> <hr/> <h2 id="-poprawne-rozwiązanie">✅ Poprawne rozwiązanie</h2> <p>Trzeba <strong>dopasować dokładnie liczbę argumentów</strong>, nawet jeśli są domyślne:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$mock</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(</span><span class="s1">'doStuff'</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="nf">willReturnMap</span><span class="p">([</span>
        <span class="p">[</span><span class="s1">'foo'</span><span class="p">,</span> <span class="s1">'bar'</span><span class="p">,</span> <span class="s1">'Result: foo (bar)'</span><span class="p">],</span>
        <span class="p">[</span><span class="s1">'baz'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="s1">'Result: baz'</span><span class="p">],</span> <span class="c1">// &lt;--- null musi być!</span>
    <span class="p">]);</span>
</code></pre></div></div> <p>Tak, wiem – niby oczywiste, ale jednak człowiek czasem liczy na trochę magii. 🪄<br/> Niestety – PHPUnit tutaj magii nie oferuje.</p> <hr/> <h2 id="-morał-historii">📝 Morał historii</h2> <ul> <li><code class="language-plaintext highlighter-rouge">willReturnMap</code> jest super, ale jest <strong>bardzo dosłowne</strong>.</li> <li>Jeśli metoda ma 2 argumenty – w mapie też musisz mieć 2 argumenty.</li> <li>Nawet jeśli ten drugi argument ma <code class="language-plaintext highlighter-rouge">null</code> jako default.</li> <li>PHPUnit nie robi za wróżkę – nie zgadnie, że miałeś na myśli default. 😅</li> </ul> <hr/> <h2 id="-wnioski">🎉 Wnioski</h2> <p>Po tym odkryciu moje testy przestały eksplodować.<br/> Wiedza, że <strong>trzeba jawnie podać każdy argument w mapie</strong>, oszczędziła mi godzin debugowania.<br/> Teraz już wiem – przy mockach <strong>lepiej podać o jeden argument za dużo niż za mało</strong>.</p> <blockquote> <p>🧠 <strong>Meritum:</strong> <code class="language-plaintext highlighter-rouge">willReturnMap</code> ≠ elastyczne dopasowanie.<br/> To <strong>twarda mapa argumentów</strong> – podaj wszystko albo nie narzekaj, że testy płoną. 🔥</p> </blockquote> <hr/> <p>✍️ <strong>PS:</strong> Jeśli ktoś znajdzie w dokumentacji PHPUnit wzmiankę o tym case – dajcie znać.<br/> Ja nie znalazłem, a przeszukałem pół internetu. 🙈</p> <p><a href="https://docs.phpunit.de/en/12.3/test-doubles.html#willreturnmap">Link do dokumentacji</a></p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[🐛 "PhpUnit, willReturnMap i domyślne argumenty – czyli jak wpaść w subtelną pułapkę 🪤"]]></summary></entry><entry><title type="html">BackedEnum - Przegląd PHP #3</title><link href="https://ziumper.github.io/pl/blog/2025/PHP-Backed-enums/" rel="alternate" type="text/html" title="BackedEnum - Przegląd PHP #3"/><published>2025-09-16T00:00:00+00:00</published><updated>2025-09-16T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/PHP-Backed-enums</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/PHP-Backed-enums/"><![CDATA[<p>Historia pewnego developera, który postanowił pożegnać się z niekończącymi się <code class="language-plaintext highlighter-rouge">const</code> i tablicami mapperów.<br/> Przy okazji dowiesz się, czym są <code class="language-plaintext highlighter-rouge">BackedEnums</code>, jakie mają plusy i minusy, i czemu czasem lepiej sięgnąć po <code class="language-plaintext highlighter-rouge">enum-name</code> niż powielać wartości stringów.</p> <h2 id="-co-to-w-ogóle-są-te-backedenums">🤔 Co to w ogóle są te BackedEnums?</h2> <p>Od PHP <strong>8.1</strong> dostaliśmy wreszcie coś, na co czekaliśmy od lat – <strong>enumy</strong>!<br/> A do tego mamy ich bardziej wypasioną wersję – <strong>BackedEnums</strong>.<br/> Są to takie enumy, które oprócz nazwy mogą mieć jeszcze wartość (<code class="language-plaintext highlighter-rouge">string</code> albo <code class="language-plaintext highlighter-rouge">int</code>).<br/> Brzmi jak <code class="language-plaintext highlighter-rouge">const</code> w klasie, ale jest o niebo lepsze. 💪</p> <h3 id="przykład-w-akcji">Przykład w akcji</h3> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">enum</span> <span class="nc">Status</span><span class="o">:</span> <span class="n">string</span> <span class="p">{</span>
     <span class="k">case</span> <span class="k">NEW</span> <span class="o">=</span> <span class="s1">'new'</span><span class="p">;</span>
     <span class="k">case</span> <span class="no">IN_PROGRESS</span> <span class="o">=</span> <span class="s1">'in_progress'</span><span class="p">;</span>
     <span class="k">case</span> <span class="no">DONE</span> <span class="o">=</span> <span class="s1">'done'</span><span class="p">;</span>
 <span class="p">}</span>

 <span class="c1">// Użycie</span>
 <span class="nv">$orderStatus</span> <span class="o">=</span> <span class="nc">Status</span><span class="o">::</span><span class="k">NEW</span><span class="p">;</span>
 <span class="k">echo</span> <span class="nv">$orderStatus</span><span class="o">-</span><span class="n">value</span><span class="p">;</span> <span class="c1">// "new"</span>
 <span class="k">echo</span> <span class="nv">$orderStatus</span><span class="o">-</span><span class="n">name</span><span class="p">;</span>  <span class="c1">// "NEW"</span>
</code></pre></div></div> <hr/> <h2 id="-a-po-co-mi-to">🧐 A po co mi to?</h2> <h3 id="zalety">Zalety:</h3> <ul> <li>✅ <strong>Czytelność</strong> – koniec z magicznymi stringami i zgadywaniem, co autor miał na myśli.</li> <li>✅ <strong>Bezpieczeństwo typów</strong> – nie wciśniesz do funkcji <code class="language-plaintext highlighter-rouge">"N3W"</code> zamiast <code class="language-plaintext highlighter-rouge">"NEW"</code>.</li> <li>✅ <strong>Łatwość refaktoryzacji</strong> – zmieniasz wartość w jednym miejscu i gotowe.</li> <li>✅ <strong>Metody pomocnicze</strong> – możesz wrzucać do enumów logikę (np. <code class="language-plaintext highlighter-rouge">isFinished()</code>).</li> </ul> <h3 id="wady">Wady:</h3> <ul> <li>❌ <strong>Tylko w PHP 8.1+</strong> – jeśli utknąłeś na 7.4, to pozostaje ci tylko płakać w kącie.</li> <li>❌ <strong>Trochę magii</strong> – przy dużych projektach musisz dobrze przemyśleć, czy używać <code class="language-plaintext highlighter-rouge">value</code> czy <code class="language-plaintext highlighter-rouge">name</code>.</li> <li>❌ <strong>Overkill dla prostych przypadków</strong> – jak masz 2 wartości na krzyż, to może wystarczyć <code class="language-plaintext highlighter-rouge">const</code>.</li> </ul> <hr/> <h2 id="-dlaczego-backedenums-dla-stringów-mogą-być-kłopotliwe">😅 Dlaczego <code class="language-plaintext highlighter-rouge">BackedEnums</code> dla stringów mogą być kłopotliwe?</h2> <p>No właśnie, tutaj miałem małą zagwozdkę.<br/> Jeżeli <strong>wartość enuma = jego nazwa</strong>, to trochę strzelamy sobie w kolano, bo potem w kodzie mamy:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nc">Status</span><span class="o">::</span><span class="k">NEW</span><span class="o">-</span><span class="n">value</span> <span class="c1">// "NEW"</span>
 <span class="nc">Status</span><span class="o">::</span><span class="k">NEW</span><span class="o">-</span><span class="n">name</span>  <span class="c1">// "NEW"</span>
</code></pre></div></div> <p>A skoro można po prostu używać <code class="language-plaintext highlighter-rouge">-name</code>, to po co nam to całe <code class="language-plaintext highlighter-rouge">value</code>?<br/> Zamiast tego lepiej zostawić zwykłe <code class="language-plaintext highlighter-rouge">enum</code> (bez wartości) i mieć spokój.</p> <h2 id="-a-co-było-przed-enumami">⏳ A co było przed enumami?</h2> <p>Ach, stare dobre czasy…<br/> Pisaliśmy takie kwiatki:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Status</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">NEW</span> <span class="o">=</span> <span class="s1">'new'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">IN_PROGRESS</span> <span class="o">=</span> <span class="s1">'in_progress'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">DONE</span> <span class="o">=</span> <span class="s1">'done'</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$status</span> <span class="o">=</span> <span class="nc">Status</span><span class="o">::</span><span class="k">NEW</span><span class="p">;</span>
</code></pre></div></div> <p>Albo jeszcze lepiej – <strong>tablice mapperów</strong>, które trzeba było utrzymywać w 3 miejscach naraz.<br/> (Tak, wszyscy wiemy, że to bolało).</p> <hr/> <h2 id="-before--after--czyli-jak-się-pozbyłem-mapperów">🔄 Before &amp; After – czyli jak się pozbyłem mapperów</h2> <p><strong>Przed (mappery):</strong></p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OrderStatus</span> <span class="p">{</span>
   <span class="k">public</span> <span class="k">const</span> <span class="no">NEW</span> <span class="o">=</span> <span class="s1">'new'</span><span class="p">;</span>
   <span class="k">public</span> <span class="k">const</span> <span class="no">IN_PROGRESS</span> <span class="o">=</span> <span class="s1">'in_progress'</span><span class="p">;</span>
   <span class="k">public</span> <span class="k">const</span> <span class="no">DONE</span> <span class="o">=</span> <span class="s1">'done'</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">array</span> <span class="nv">$labels</span> <span class="o">=</span> <span class="p">[</span>
        <span class="k">self</span><span class="o">::</span><span class="k">NEW</span> <span class="o">=</span> <span class="s2">"I'm doing things now!"</span><span class="p">,</span>
        <span class="k">self</span><span class="o">::</span><span class="no">IN_PROGRESS</span> <span class="o">=</span> <span class="s2">"I'm working on it!"</span><span class="p">,</span>
        <span class="k">self</span><span class="o">::</span><span class="no">DONE</span> <span class="o">=</span> <span class="s2">"I finished"</span><span class="p">,</span>
    <span class="p">];</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nc">OrderStatus</span><span class="o">::</span><span class="nv">$labels</span><span class="p">[</span><span class="nc">OrderStatus</span><span class="o">::</span><span class="no">IN_PROGRESS</span><span class="p">];</span> <span class="c1">// "I'm working on it!"</span>
</code></pre></div></div> <p><strong>Po (enumy):</strong></p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">enum</span> <span class="nc">OrderStatus</span><span class="o">:</span> <span class="n">string</span> <span class="p">{</span>
    <span class="k">case</span> <span class="k">NEW</span> <span class="o">=</span> <span class="s1">'new'</span><span class="p">;</span>
    <span class="k">case</span> <span class="no">IN_PROGRESS</span> <span class="o">=</span> <span class="s1">'in_progress'</span><span class="p">;</span>
    <span class="k">case</span> <span class="no">DONE</span> <span class="o">=</span> <span class="s1">'done'</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">label</span><span class="p">():</span> <span class="kt">string</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">match</span><span class="p">(</span><span class="nv">$this</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">::</span><span class="k">NEW</span> <span class="o">=</span> <span class="s2">"I'm doing things now!"</span><span class="p">,,</span>
            <span class="k">self</span><span class="o">::</span><span class="no">IN_PROGRESS</span> <span class="o">=</span> <span class="s2">"I'm working on it!"</span><span class="p">,</span>
            <span class="k">self</span><span class="o">::</span><span class="no">DONE</span> <span class="o">=</span> <span class="s2">"I finished"</span><span class="p">,</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nc">OrderStatus</span><span class="o">::</span><span class="no">IN_PROGRESS</span><span class="o">-&gt;</span><span class="nf">label</span><span class="p">();</span> <span class="c1">// "I'm working on it!"</span>
</code></pre></div></div> <p>Rezultat? Mappery out, kod jest czytelniejszy, a IDE podpowiada mi wszystko na bieżąco. 😎<br/> Przykład jest ciut abstrakcyjny, ale mimo wszystko oddaje problemy, z którymi należy sobie radzić.</p> <hr/> <h2 id="-moja-mała-rewolucja">🎉 Moja mała rewolucja</h2> <p>Dzięki enumom udało mi się pozbyć całych mapperów wartości!<br/> Teraz kod jest czytelniejszy, IDE podpowiada mi wartości, a ja śpię spokojnie. 🛌</p> <p>Mappery? <strong>Nie, dziękuję.</strong><br/> Enumy przejęły pałeczkę i zrobiły to lepiej.<br/> I serio – warto było to zrobić. 😎</p> <hr/> <h2 id="-podsumowanie">📌 Podsumowanie</h2> <ul> <li>PHP 8.1 dało nam <strong>enumy</strong> i <strong>BackedEnums</strong>.</li> <li>Używaj BackedEnums, gdy potrzebujesz <em>mapowania</em> nazw na wartości (<code class="language-plaintext highlighter-rouge">int</code>, <code class="language-plaintext highlighter-rouge">string</code>).</li> <li>Gdy <code class="language-plaintext highlighter-rouge">value == name</code> – rozważ zwykłe <code class="language-plaintext highlighter-rouge">enum</code>.</li> <li>Enumy = mniej bugów, mniej mapperów, więcej spokoju w duszy.</li> </ul> <p><strong>Morał:</strong> Enumy to takie nowe <code class="language-plaintext highlighter-rouge">consty</code>, tylko ładniejsze i mądrzejsze.<br/> Mappery możesz teraz wysłać na emeryturę. 🏖️</p> <hr/> <p>✍️ <strong>PS:</strong> Tak, uśmiechałem się, pisząc ten post. Bo naprawdę cieszę się, że w końcu mamy porządne enumy w PHP. ❤️</p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[🏆 BackedEnums w PHP – czyli jak skończyłem z mapperami i pokochałem enumy ❤️]]></summary></entry><entry><title type="html">Funkcje tablicowe: inicjalizacja tablicy przy pomocy […] lub array()? - Przegląd PHP #2</title><link href="https://ziumper.github.io/pl/blog/2025/PHP-array-or-brackets/" rel="alternate" type="text/html" title="Funkcje tablicowe: inicjalizacja tablicy przy pomocy […] lub array()? - Przegląd PHP #2"/><published>2025-03-24T00:00:00+00:00</published><updated>2025-03-24T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/PHP-array-or-brackets</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/PHP-array-or-brackets/"><![CDATA[<p>Jest to kolejna seria z cyklu PHP review. Tym razem postanowłem przyjrzeć się trochę bliżej funkcji deklarującej array i co się za nią tak naprawdę kryje. Z tego co pamiętam zapis <code class="language-plaintext highlighter-rouge">array()</code> przez moich kolegów z pracy uznawany był za zażyłość i nie powinno się już go używać. Aby się o tym przekonać postanowiłem zaciągnąć repozytorium frameworka do refaktoryzacji i aktualizacji kodu PHP, czyli Rectora. No, bo jakie narzędzie najlepiej operuje na tablicach jak nie narzędzie do jego refaktoryzacji i będzie trzymać się najlepszych praktyk tworzenia i pisania kodu?</p> <h2 id="kolejne-głębokie-zanurzenie-w-płycizne">Kolejne głębokie zanurzenie w płycizne</h2> <p>Ku mojemu zdziwieniu nie znalazłem zbyt dużo przykładów. Nawiasem mówiąc jedynym przykładem, który rzeczywiście została użyta funkcja <code class="language-plaintext highlighter-rouge">array()</code> albo raczej jej dokumentacja, żeby jej nie używać :-). w frameworku Rector, była złota zasada dla <a href="https://github.com/rectorphp/rector/blob/59ca5ad3cdd75183ef65f6929693903f2f2a1717/rules/Php54/Rector/Array_/LongArrayToShortArrayRector.php#L30">LongArrayToShortArray</a></p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getRuleDefinition</span><span class="p">()</span> <span class="p">:</span> <span class="kt">RuleDefinition</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">RuleDefinition</span><span class="p">(</span><span class="s1">'Long array to short array'</span><span class="p">,</span> <span class="p">[</span><span class="k">new</span> <span class="nc">CodeSample</span><span class="p">(</span><span class="sh">&lt;&lt;&lt;'CODE_SAMPLE'
class SomeClass
{
    public function run()
    {
        return array();
    }
}
CODE_SAMPLE</span>
<span class="p">,</span> <span class="sh">&lt;&lt;&lt;'CODE_SAMPLE'
class SomeClass
{
    public function run()
    {
        return [];
    }
}
CODE_SAMPLE</span>
<span class="p">)]);</span>
</code></pre></div></div> <p>To daje do myślenia. Zważając na to, że metoda klasy <code class="language-plaintext highlighter-rouge">LongArrayToShortArrayRector.php</code> została umieszczona w pakiecie <code class="language-plaintext highlighter-rouge">Php54</code>. W wersji <strong>PHP5.4</strong> został dodany krótki operator tablicowy. Od tamej pory poleca się używać, krótszej wersji zapisu tablicy.</p> <p>To nadal nie odpowiada do końca na pytanie, jaka jest zasadnicza różnica pomiędzy wywołaniem <code class="language-plaintext highlighter-rouge">array()</code> a <code class="language-plaintext highlighter-rouge">[ ]</code>. A wiec co naprawdę dzieje się za kulisami? W momencie odpaleniu skryptu PHP trzeba najpierw upiec placek… aby upiec placek trzeba:</p> <figure> <iframe src="https://www.youtube.com/embed/oVSGrY4DfUg" class="rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="100%" height="500px"></iframe> </figure> <h2 id="stworzyć-abstract-syntax-tree-czyli-placek">Stworzyć Abstract Syntax Tree, czyli placek</h2> <p>Tak naprawdę wystarczy zrozumieć AST - Abstract Syntax Tree. Jest to struktura drzewiasta, która jest konieczna, aby oddzielić proces kompilacji od parsera. <a href="https://en.wikipedia.org/wiki/Lexical_analysis">Lexer</a> zwraca tokeny, które później są przetwarzane przez parser zwracający strukturę ast, która później przechodzi kompilacje i na świat przychodzi “placek” w postaci kodów opcode umieszczonych w opcache, a one później mogą zostać zrozumiane przez komputer jako ciąg wykonywalnych instrukcji. Aby dowiedzieć się więcej na ten temat polecam obejrzeć poniższy materiał video:</p> <blockquote> <p><a href="https://www.youtube.com/watch?v=MWITYIWyowk">Climbing the Abstract Syntax Tree - James Titcumb - Forum PHP 2017</a></p> </blockquote> <h2 id="no-dobra-gdzie-w-takim-razie-występuje-różnica-pomiędzy--a-array">No dobra, gdzie w takim razie występuje różnica pomiędzy <code class="language-plaintext highlighter-rouge">[]</code> a <code class="language-plaintext highlighter-rouge">array()</code>?</h2> <p>Pierwsza różnica, którą zauważyłem była w <a href="https://github.com/php/php-src/blob/master/Zend/zend_compile.h#L1044">kompilatorze</a>. Można łatwo zauważyć, że zapis został oddzielony na składnią długą oraz krótką.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#define ZEND_ARRAY_SYNTAX_LIST 1  /* list() */
#define ZEND_ARRAY_SYNTAX_LONG 2  /* array() */
#define ZEND_ARRAY_SYNTAX_SHORT 3 /* [] */
</code></pre></div></div> <p>oraz w przypadku walidacji przypisania</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">void</span> <span class="nf">zend_verify_list_assign_target</span><span class="p">(</span><span class="n">zend_ast</span> <span class="o">*</span><span class="n">var_ast</span><span class="p">,</span> <span class="n">zend_ast_attr</span> <span class="n">array_style</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">var_ast</span><span class="o">-&gt;</span><span class="n">kind</span> <span class="o">==</span> <span class="n">ZEND_AST_ARRAY</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">var_ast</span><span class="o">-&gt;</span><span class="n">attr</span> <span class="o">==</span> <span class="n">ZEND_ARRAY_SYNTAX_LONG</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">zend_error_noreturn</span><span class="p">(</span><span class="n">E_COMPILE_ERROR</span><span class="p">,</span> <span class="s">"Cannot assign to array(), use [] instead"</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">array_style</span> <span class="o">!=</span> <span class="n">var_ast</span><span class="o">-&gt;</span><span class="n">attr</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">zend_error_noreturn</span><span class="p">(</span><span class="n">E_COMPILE_ERROR</span><span class="p">,</span> <span class="s">"Cannot mix [] and list()"</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">zend_can_write_to_variable</span><span class="p">(</span><span class="n">var_ast</span><span class="p">))</span> <span class="p">{</span>
		<span class="n">zend_error_noreturn</span><span class="p">(</span><span class="n">E_COMPILE_ERROR</span><span class="p">,</span> <span class="s">"Assignments can only happen to writable values"</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>W kodzie php ma to następujące konsekwencje:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>  <span class="c1">// Błąd: nie można przypisać do array()</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>  <span class="c1">// Poprawne</span>
</code></pre></div></div> <p>Szczerze, nie spodziewałem się spotkać takich kruczków w kompilatorze, ale jest to pewna znacząca różnica.</p> <p>Kolejna różnica jest widoczna w tak zwanym <a href="https://en.wikipedia.org/wiki/Lexical_analysis">Lexerze</a>. w pliku <a href="https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1764C1-L1766C2">language_scanner.l</a></p> <pre><code class="language-lexer">&lt;ST_IN_SCRIPTING&gt;"array" {
	RETURN_TOKEN_WITH_IDENT(T_ARRAY);
}

&lt;ST_IN_SCRIPTING&gt;"["|"(" {
	enter_nesting(yytext[0]);
	RETURN_TOKEN(yytext[0]);
}

&lt;ST_IN_SCRIPTING&gt;"]"|")" {
	/* Check that ] and ) match up properly with a preceding [ or ( */
	RETURN_EXIT_NESTING_TOKEN(yytext[0]);
}

</code></pre> <h2 id="jakie-wnioski-można-wysunąć">Jakie wnioski można wysunąć?</h2> <ul> <li>W przypadku <code class="language-plaintext highlighter-rouge">[]</code> lexer musi zwrócić dwa tokeny, a parser potem łączy je w odpowiednią strukturę. To wymaga więcej pracy w fazie tokenizacji i parsowania w porównaniu do <code class="language-plaintext highlighter-rouge">array()</code>, gdzie lexer zwraca gotowy token <code class="language-plaintext highlighter-rouge">T_ARRAY</code>, a parser tylko przetwarza go jako jedno wyrażenie. Musi wykonać dodatkowe kroki, aby sprawdzić, czy to tablica, analizując dokładniej. Zatem w przypadku <code class="language-plaintext highlighter-rouge">[]</code> parser musi dłużej analizować kod. Gdyż zczytywanie struktur AST odbywa się znak po znaku, w odwróconej <a href="https://en.wikipedia.org/wiki/Reverse_Polish_notation">notacji polskiej</a>.</li> <li>Wersja PHP bez opcache wymaga każdorazowego przetwarzania kodu w czasie wykonywania. Oznacza to, że każde wywołanie kodu w PHP, zarówno array(), jak i [], wymaga zwrócenia się do lexera i parsera w celu wygenerowania AST i opcodów.</li> <li>Dłuższy czas parsowania dla []: Ponieważ [] wymaga dodatkowej analizy przez parsera (musi rozpoznać nawiasy), przetwarzanie zajmuje więcej czasu.</li> <li>Krótszy czas dla array(): Token `T_ARRAY jest prostszy do rozpoznania i parser nie musi przeprowadzać dodatkowej analizy składniowej. Proces parsowania jest szybszy dla T_ARRAY, ale tylko, gdy nie używa się opcache.</li> </ul> <p>No i kto by pomyślał, żeby określić, jaka jest prawdziwa różnica pomiędzy <code class="language-plaintext highlighter-rouge">[ ]</code> i <code class="language-plaintext highlighter-rouge">array()</code> będę zmuszony wgłębić się aż tak bardzo w php. Wydaje się, że nadal wywołanie funkcji <code class="language-plaintext highlighter-rouge">array()</code> może mieć pewne zastosowania.</p> <ul> <li>kiedy za każdym kompiluje się kod bez dostępu do pamięci tymczasowej opcache, co jest raczej rzadkością.</li> <li>funkcja <code class="language-plaintext highlighter-rouge">eval()</code> w której oppcache nie jest wykorzystywany.</li> </ul> <h2 id="ważne-linki">Ważne Linki</h2> <ul> <li><a href="https://github.com/php/php-src/tree/master">The PHP Interpreter</a></li> <li><a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a></li> <li><a href="https://www.php.net/manual/en/opcache.preloading.php">OpCache Preloading</a></li> </ul>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[Czy deklarowanie tablicy za pomocą słowa array() idzie na śmietnik historii? Co ma wspólnego pieczenie placka z kompilacją kodu?]]></summary></entry><entry><title type="html">Funkcje tablicowe: [‘array_filter’,’array_merge’] - Przegląd PHP #1</title><link href="https://ziumper.github.io/pl/blog/2025/PHP-array-functions-overview_array_filter_array_map/" rel="alternate" type="text/html" title="Funkcje tablicowe: [‘array_filter’,’array_merge’] - Przegląd PHP #1"/><published>2025-03-12T00:00:00+00:00</published><updated>2025-03-12T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/PHP-array-functions-overview_array_filter_array_map</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/PHP-array-functions-overview_array_filter_array_map/"><![CDATA[<p>Rozpoczynam cykl, w którym robię przegląd najbardziej użytecznych funkcji PHP i jak najefektywniej z nich korzystać. Nie ma to jak dobra ściąga przed rozmową kwalifikacyjną. Cykl jest podytkowany tym, że ostatnio w PHP bardzo dużo się zadziało, najnowsze wersje PHP sporo zamieszały, a dobrze jest odświeżyć sobie wiedze i zrobić sobie porządne notatki, nie wspominając już o tym, że trzeba nadgonić!</p> <h2 id="przykłady-z-repozytorium-wzięte">Przykłady z repozytorium wzięte</h2> <p>Już sama nazwa <code class="language-plaintext highlighter-rouge">Funkcje tablicowe</code> powoduje konsternacje. W internecie można napotkać na ogrom przykładów zarówno tych lepszych jak i gorszych. Z funkcji jak korzystać każdy pierwszy junior wie, dlatego postanowiłem zagłębić się w temat trochę głębiej i poszukać ich zastosowania w kilku popularnych frameworkach PHP z którymi miałem styczność w pracy programisty:</p> <ul> <li><a href="https://github.com/symfony/symfony">Symfony</a> - platforma, która zasługuje na miano najbardziej dojrzałej biznesowo pod względem kompatybilności i przypadków użycia. Na pewno znajdę w środku jakieś ciekawe ćwieki.</li> <li><a href="https://github.com/laravel/laravel">Laravel</a> - w przeciwieństwie do Symfony tutaj wszystko zmienia się szybko z wersji na wersje, ale ma to też swoje plusy, bo szybko możemy zbudować prototyp. Gdzie jak nie tam ondajdę naprawdę sporo ciekawych zastosowań funkcji tablicowych.</li> <li><a href="https://github.com/rectorphp/rector">Rector</a> - Moje ulubione narzędzie do pracy z starym kodem php. Myślę, że może całkiem nieźle pokazać zastosowania funkcji tablicowych.</li> </ul> <h2 id="przykład-z-array_filter">Przykład z array_filter</h2> <p>Wypłynąłem na otwarty przestwór oceanu kodu php i jak na ironię od razu wpadłem na górę lodową. Pierwszą klasą z brzega była <a href="https://github.com/symfony/symfony/blob/7.2/src/Symfony/Bridge/Doctrine/ArgumentResolver/EntityValueResolver.php">EntityValueResolver</a> implementująca interfejs <a href="https://github.com/symfony/symfony/blob/7.3/src/Symfony/Component/HttpKernel/Controller/ValueResolverInterface.php">ValueResolverInterface</a>. Klasa <a href="https://github.com/symfony/symfony/blob/7.2/src/Symfony/Bridge/Doctrine/ArgumentResolver/EntityValueResolver.php">EntityValueResolver</a> jest odpowiedzialna za automatyczne przekazywanie encji do kontrolera na podstawie identyfikatora podanego w ścieżce URL. Przykładowo mogę zdefiniować taki krótki kod:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">#[Route('/user/{id}', name: 'user_show')]</span>
<span class="k">public</span> <span class="k">function</span> <span class="n">show</span><span class="p">(</span><span class="kt">User</span> <span class="nv">$user</span><span class="p">):</span> <span class="kt">Response</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Response</span><span class="p">(</span><span class="s1">'User: '</span> <span class="mf">.</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="nf">getUsername</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div> <p>w którym klasa <code class="language-plaintext highlighter-rouge">User</code> jest zmapowaną encją bazodanową i zostanie ona automatycznie poddna procesowi hydracji, i zostanie zwrócona z bazy. Wiecej można poczytać o tym <a href="https://symfony.com/doc/current/doctrine.html#doctrine-entity-value-resolver">tutaj</a>. Całkiem fajna funkcjonalność!</p> <p>Jednakże, wracając kolokwialnie rzecz ujmując do “bebechów” i głównego tematu, czyli funkcji tablicowych.</p> <p>Funkcja <a href="https://www.php.net/manual/en/function.array-filter.php">array_filter</a>. Użyta w klasie <a href="https://github.com/symfony/symfony/blob/7.2/src/Symfony/Bridge/Doctrine/ArgumentResolver/EntityValueResolver.php#L178">EntityValueResolver</a></p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">if</span> <span class="p">(</span><span class="nv">$options</span><span class="o">-&gt;</span><span class="n">stripNull</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$criteria</span> <span class="o">=</span> <span class="nb">array_filter</span><span class="p">(</span><span class="nv">$criteria</span><span class="p">,</span> <span class="k">static</span> <span class="k">fn</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kc">null</span> <span class="o">!==</span> <span class="nv">$value</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Przykład z <a href="https://symfony.com">Symfony</a> <a href="https://www.php.net/manual/en/function.array-filter.php">array_filter</a> - pozwala zwrócić nową tablice na podstawie obiektu <a href="https://www.php.net/manual/en/class.closure.php">Closure</a> czyli obiektu <a href="https://www.php.net/manual/en/functions.anonymous.php">funkcji anonimowej</a> zwracjącej wartość <code class="language-plaintext highlighter-rouge">true/false</code> dla każdego elementu jak tutaj w przykładzie. Warto zwrócić uwagę, że została ona użyta tutaj jako funkcja <strong>statyczna</strong>. To jest akurat bardzo ciekawe ponieważ jak czytamy z <a href="https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous-functions.static">dokumentacji</a>:</p> <blockquote> <p>Anonymous functions may be declared statically. This prevents them from having the current class automatically bound to them. Objects may also not be bound to them at runtime.</p> </blockquote> <p>Dzięki czemu blokowana jest możliwość wykorzystania metody <a href="https://www.php.net/manual/en/closure.bindto.php">bindTo</a> z klasy [Closure](<a href="https://www.php.net/manual/en/class.closure.php">Closure</a>. W tym przypadku pojawia się pytanie. Dlaczego powinno się blokować wywołanie metody <a href="https://www.php.net/manual/en/closure.bindto.php">bindTo</a> dla funkcji anonimowych. Odpowiedzi może być kilka:</p> <p><strong>a)</strong> ponieważ chcemy uniknąć niezamierzonego dostępu do <code class="language-plaintext highlighter-rouge">$this</code> w kontekście klasy</p> <p><strong>b)</strong> ponieważ chcemy zwiększyć wydajność i uniknąć potencjalnych wycieków pamięci</p> <p><strong>c)</strong> ponieważ nie chcemy, aby funkcja anonimowa mogła być później przypisana do innego obiektu i zmieniać jego stan dynamicznie</p> <p>Opcja <strong>a)</strong> jest tutaj szczególnie istotna. Deklarowanie funkcji anonimowej jako <strong><a href="https://www.php.net/manual/en/language.oop5.static.php">static</a></strong> uniemożliwia jej powiązanie z instancją klasy, co zapobiega przypadkowemu dostępowi do <code class="language-plaintext highlighter-rouge">$this</code>. Jest to szczególnie przydatne w przypadku czystych funkcji <a href="https://en.wikipedia.org/wiki/Pure_function">pure functions</a>, które nie powinny mieć dostępu do stanu obiektu, w którym są wywoływane. Jest to najwidoczniej ukłon w stronę paradygmatów programowania funkcyjnego. Warto też zauważyć, że taki sposób deklaracji podpowiada, że funkcja anonimowa nie ma wpływu na klasę, w której została zadeklarowana i to prawdopodobnie autor miał na myśli! W skrócie to dobra praktyka, ale nie konieczność.</p> <blockquote> <p>Dodanie <strong>static</strong> sprawia, że intencja jest jasna “ta funkcja jest niezależna od instancji tej klasy”.</p> </blockquote> <h2 id="przykład-z-array_merge">Przykład z array_merge</h2> <p>Funkcja <a href="https://www.php.net/manual/en/function.array-merge.php">array_merge</a> - dodaje elementy drugiej tablicy do końca pierwszej tablicy w poniższym <a href="https://github.com/symfony/symfony/blob/7.2/src/Symfony/Bridge/Doctrine/ArgumentResolver/EntityValueResolver.php#L223">przykładzie</a> z <a href="https://symfony.com">Symfony</a></p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$repository</span> <span class="o">=</span> <span class="nv">$manager</span><span class="o">-&gt;</span><span class="nf">getRepository</span><span class="p">(</span><span class="nv">$options</span><span class="o">-&gt;</span><span class="n">class</span><span class="p">);</span>
<span class="nv">$variables</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="n">attributes</span><span class="o">-&gt;</span><span class="nf">all</span><span class="p">(),</span> <span class="p">[</span>
    <span class="s1">'repository'</span> <span class="o">=&gt;</span> <span class="nv">$repository</span><span class="p">,</span>
    <span class="s1">'request'</span> <span class="o">=&gt;</span> <span class="nv">$request</span><span class="p">,</span>
<span class="p">]);</span>
</code></pre></div></div> <p>Dobra, pora sprawdzić, jak można to napisać inaczej:</p> <ul> <li>Destrukturyzacja - zmieniam trochę strukturę, przez co elementy dodane do tablicy z nadpisaniem istniejących wcześniej wartości i usuwa również potrzebę użycia <a href="https://www.php.net/manual/en/function.array-merge.php">array_merge</a> i zastępuje jej użycie <a href="https://wiki.php.net/rfc/spread_operator_for_array">operatora odpakowującego</a> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$variables</span> <span class="o">=</span> <span class="p">[</span>
    <span class="mf">...</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">attributes</span><span class="o">-&gt;</span><span class="nf">all</span><span class="p">(),</span>
    <span class="s1">'repository'</span> <span class="o">=&gt;</span> <span class="nv">$repository</span><span class="p">,</span>
    <span class="s1">'request'</span> <span class="o">=&gt;</span> <span class="nv">$request</span><span class="p">,</span>
<span class="p">];</span>
</code></pre></div> </div> </li> <li>Bepośrednie przypisanie spowoduje nadpisanie zmiennych <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$variables</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">attributes</span><span class="o">-&gt;</span><span class="nf">all</span><span class="p">();</span>
<span class="nv">$variables</span><span class="p">[</span><span class="s1">'repository'</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$repository</span><span class="p">;</span>
<span class="nv">$variables</span><span class="p">[</span><span class="s1">'request'</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$request</span><span class="p">;</span>
</code></pre></div> </div> </li> <li> <p>Użycie operatora union <code class="language-plaintext highlighter-rouge">+</code> W tym przypadku zmienne nie zostaną nadpisane</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$variables</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="n">attributes</span><span class="o">-&gt;</span><span class="nf">all</span><span class="p">()</span> <span class="o">+</span> <span class="p">[</span>
    <span class="s1">'repository'</span> <span class="o">=&gt;</span> <span class="nv">$repository</span><span class="p">,</span>
    <span class="s1">'request'</span> <span class="o">=&gt;</span> <span class="nv">$request</span><span class="p">,</span>
<span class="p">];</span>

<span class="c1">#or</span>
<span class="nv">$variables</span> <span class="o">+=</span> <span class="p">[</span>
    <span class="s1">'repository'</span> <span class="o">=&gt;</span> <span class="nv">$repository</span><span class="p">,</span>
    <span class="s1">'request'</span> <span class="o">=&gt;</span> <span class="nv">$request</span><span class="p">,</span>
<span class="p">];</span>
</code></pre></div> </div> </li> </ul> <p>Według mnie destrukturyzacja jest znacznie bardziej kusząca, ale należy uwzględnić parę czynników ubocznych. Operator <code class="language-plaintext highlighter-rouge">...</code> podmieni klucze typu <code class="language-plaintext highlighter-rouge">int</code> nawet jak są typu string. W przypadku <code class="language-plaintext highlighter-rouge">+</code> klucze zostaną zachowane. Dodatkowo operator <code class="language-plaintext highlighter-rouge">...</code> jest szybszy niż <code class="language-plaintext highlighter-rouge">array_merge</code> i wspiera interfejs <code class="language-plaintext highlighter-rouge">Traversable</code> a przynajmniej powinien według <a href="https://wiki.php.net/rfc/spread_operator_for_array#advantages_over_array_merge">rfc</a>. Obstawiam więc, że niedługo zobaczymy w kodzie więcej użyć <code class="language-plaintext highlighter-rouge">...</code> zamiast wywołań funkcji <code class="language-plaintext highlighter-rouge">array_merge</code>, ale tylko pod jednym warunkiem. Jeżeli klucze tablic nie będą wartości <code class="language-plaintext highlighter-rouge">int</code>, bo tylko wtedy <code class="language-plaintext highlighter-rouge">array_merge</code> jest szybsze niż <code class="language-plaintext highlighter-rouge">...</code>.</p> <p>Podusmowując:</p> <ul> <li><code class="language-plaintext highlighter-rouge">...</code> resetuje indeksy numeryczne (konwertuje teskty liczbowe na liczby i nadpisuje kolejność), działa szybciej dla nienumerycznych kluczy.</li> <li><code class="language-plaintext highlighter-rouge">+</code> zachowuje klucze, ale nie nadpisuje istniejących</li> <li><code class="language-plaintext highlighter-rouge">array_merge()</code>resetuje indeksy numeryczne podobnie jak <code class="language-plaintext highlighter-rouge">...</code>, ale podobno działa szybciej dla normalnych kluczy numerycznych. Więcej można poczytać o tym <a href="https://www.php.net/manual/en/function.array-merge.php#126687">tutaj</a>.</li> </ul>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[Przegląd najczęsciej wykorzystywanych funkcji w języku PHP do pracy z tablicami. Kiedy i jak ich używać w optymalny sposób.]]></summary></entry><entry><title type="html">Testowanie obłsugi błedów w Godocie przy pomocy GUT</title><link href="https://ziumper.github.io/pl/blog/2025/testing-error-handling-in-gdscript/" rel="alternate" type="text/html" title="Testowanie obłsugi błedów w Godocie przy pomocy GUT"/><published>2025-03-06T00:00:00+00:00</published><updated>2025-03-06T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/testing-error-handling-in-gdscript</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/testing-error-handling-in-gdscript/"><![CDATA[<p>Testowanie to z pewnością niełatwe zadanie, zwłaszcza jeżeli chodzi o pisanie testów w silnikach gier. Jednakże, można się posiłkować już istniejącymi rozwiązaniami. Jednym z nich jest <a href="https://github.com/bitwes/Gut">GUT</a>, czyli Godot Unit Tests.</p> <h2 id="definicja-problemu">Definicja problemu:</h2> <p>Ostatnio natrafiłem w swoim projekcie na następujący problem. Chciałem przetestować obsługę błędów w swojej grze przy ładowaniu zapisanego stanu gry.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Reads the data from file and returns as dictionary
</span><span class="n">func</span> <span class="nf">load_data</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Dictionary</span><span class="p">:</span>
	<span class="n">var</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
	<span class="n">var</span> <span class="n">path</span> <span class="o">=</span> <span class="nf">get_saved_game_path</span><span class="p">()</span>
	<span class="n">var</span> <span class="nb">file</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="p">.</span><span class="nf">open_encrypted_with_pass</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">FileAccess</span><span class="p">.</span><span class="n">READ</span><span class="p">,</span> <span class="n">_password</span><span class="p">)</span>
<span class="bp">...</span>
</code></pre></div></div> <p>Spojrzałem przede wszystkim na dokumentację <code class="language-plaintext highlighter-rouge">FileAccess.get_open_error</code>. Zwraca ona typ <code class="language-plaintext highlighter-rouge">enum</code> Error. Sprawdzenie zwracanego kodu było dobrym tropem, ale najpierw należało napisać test:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">func</span> <span class="nf">test_load_if_game_save_doesnt_exist</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">void</span><span class="p">:</span>
	<span class="n">var</span> <span class="n">save</span> <span class="o">=</span> <span class="n">GameSave</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="sh">"</span><span class="s">TestingGameSave.save</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">12345</span><span class="sh">"</span><span class="p">)</span>
	<span class="n">var</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dictionary</span> <span class="o">=</span> <span class="n">save</span><span class="p">.</span><span class="nf">load_data</span><span class="p">()</span>
	<span class="nf">assert_not_null</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div> <p>To taki dobry początek. Sprawdzam najpierw, czy jest z czym pracować i czy dane nie są przypadkiem nullem. Miałem w głowie kilka pomysłów, jak to powinno wyglądać. Przede wszystkim:</p> <ol> <li> <p>Nie zwracaj błędów. Nie chciałem zwracać wyjątków i obsługiwać ich na zewnątrz funkcji. Chciałem po prostu dodać obsługę błędów tam, gdzie one występują. W GDScript nie można używać try-catch ani rzucać wyjątkami, co również nie jest dobrą praktyką. Nie mam w zwyczaju zrzucać wszystkiego na inne osoby. Wolę rozwiązywać problemy tam, gdzie rzeczywiście występują, ponieważ jest to najbardziej prawdopodobne miejsce, w którym można je rozwiązać.</p> </li> <li> <p>Nie zwracaj wartości null. Jest to częsty problem, który nazywam “propagacją pustki”. Problem polega na tym, że za każdym razem, gdy zwracamy null, umiera w nas cząstka człowieczeństwa. A przy kolejnym wywołaniu funkcji, kiedy chcemy wywołać metodę na obiekcie, musimy najpierw sprawdzić, czy nie jest on nullem, gdyż w przeciwnym wypadku ryzukujujemy NullPointerException i najprawdopodbniej wyłączenie gry w trakcie rozgrywki. Należy więc pozbyć się wartości null! Trochę szerzej ten problem został opisany <a href="https://hackernoon.com/null-the-billion-dollar-mistake-8t5z32d6">tutaj</a>.</p> </li> <li> <p>Nie wrzucaj wszystkiego do jednego worka. Zwracanie błędów lub obiektu mogłoby wywołać lawinę obsługi błędów (patrz punkt 1). Im prościej, tym lepiej – dzięki temu łatwiej będzie mi pracować nad tym w przyszłości.</p> </li> </ol> <h2 id="rozwiązanie">Rozwiązanie:</h2> <p>Poskutkowałem to następującym kodem:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Reads the data from file and returns as dictionary
</span><span class="n">func</span> <span class="nf">load_data</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Dictionary</span><span class="p">:</span>
	<span class="n">var</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
	<span class="n">var</span> <span class="n">path</span> <span class="o">=</span> <span class="nf">get_saved_game_path</span><span class="p">()</span>
	<span class="n">var</span> <span class="nb">file</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="p">.</span><span class="nf">open_encrypted_with_pass</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">FileAccess</span><span class="p">.</span><span class="n">READ</span><span class="p">,</span> <span class="n">_password</span><span class="p">)</span>
	<span class="n">var</span> <span class="n">error</span><span class="p">:</span> <span class="n">Error</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="p">.</span><span class="nf">get_open_error</span><span class="p">()</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">error</span> <span class="o">==</span> <span class="n">OK</span><span class="p">:</span>
		<span class="nf">push_error</span><span class="p">(</span><span class="sh">'</span><span class="s">There was an error while trying to open a file with following error code: </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">var_to_str</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
		<span class="k">return</span> <span class="n">data</span>
</code></pre></div></div> <p>Wygląda to naprawdę dobrze, ale nadal nie jestem usatysfakcjonowany. Chciałem przetestować scenariusz, w którym występuje błąd, a przy okazji nie wypisywać nic na konsolę w momencie wykonania testu, tylko wtedy, gdy problem się rzeczywiście pojawia, oraz obsłużyć zwracany przez Godot kod błędu. Te wszystkie punkty razem stanowią wyzwanie, zwłaszcza dla młodego języka skryptowego, jakim jest GDScript. Oto, co takiego zrobiłem:</p> <ul> <li>użyłem metody <a href="https://gut.readthedocs.io/en/latest/Stubbing.html#to-call-callable">stub z GUT</a>.</li> <li>musiałem użyć <a href="https://gut.readthedocs.io/en/latest/Partial-Doubles.html">partial double</a>ze względu na wsparcie metody stub dla obiektów klasy <code class="language-plaintext highlighter-rouge">double</code></li> <li> <p>Niestety, nie można nadpisywać implementacji słowa kluczowego <code class="language-plaintext highlighter-rouge">push_error</code>, więc napisałem własną metodę <code class="language-plaintext highlighter-rouge">print_error</code> i wywołałem w jej wnętrzu oryginalną metodę, aby ją zastąpić funkcją anonimową, która z kolei ustawiała by flagę sprawdzającą, czy metoda została poprawnie wywołana. Myślę, że w przyszłości do <a href="https://gut.readthedocs.io/en/latest/Stubbing.html#to-call-callable">stub</a> przydałaby się możliwość sprawdzenia czy metdoa została na pewno wywołana. Póki co musiałem się posiłkować zmienną globalną.</p> <p>Przeszukałem dokumentacje GUT i znalazłem sposób, żeby to sprawdzić przy pomocy następującej funkcji o ile klasa sprawdzająca jest podklasą klasy stub.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">assert_called</span><span class="p">(</span><span class="n">save</span><span class="p">,</span><span class="sh">"</span><span class="s">print_error</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div> </div> </li> </ul> <p>Cały kod prezentuje się następująco:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#game_save.gd
#wrapper for testing the errors
</span><span class="n">func</span> <span class="nf">print_error</span><span class="p">(</span><span class="n">msg</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">void</span><span class="p">:</span>
	<span class="nf">push_error</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>

<span class="c1">## Reads the data from file and returns as dictionary
</span><span class="n">func</span> <span class="nf">load_data</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Dictionary</span><span class="p">:</span>
	<span class="n">var</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
	<span class="n">var</span> <span class="n">path</span> <span class="o">=</span> <span class="nf">get_saved_game_path</span><span class="p">()</span>
	<span class="n">var</span> <span class="nb">file</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="p">.</span><span class="nf">open_encrypted_with_pass</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">FileAccess</span><span class="p">.</span><span class="n">READ</span><span class="p">,</span> <span class="n">_password</span><span class="p">)</span>
	<span class="n">var</span> <span class="n">error</span><span class="p">:</span> <span class="n">Error</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="p">.</span><span class="nf">get_open_error</span><span class="p">()</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">error</span> <span class="o">==</span> <span class="n">OK</span><span class="p">:</span>
		<span class="nf">print_error</span><span class="p">(</span><span class="sh">'</span><span class="s">There was an error while trying to open a file with following error code: </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">var_to_str</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
		<span class="k">return</span> <span class="n">data</span>

<span class="c1">#test_game_save.gd
</span><span class="n">extends</span> <span class="n">GutTest</span>

<span class="n">var</span> <span class="n">_error_called</span> <span class="o">=</span> <span class="n">false</span>

<span class="n">func</span> <span class="nf">test_load_if_game_save_doesnt_exist</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">void</span><span class="p">:</span>
	<span class="c1">#arrange
</span>	<span class="n">var</span> <span class="n">save</span> <span class="o">=</span> <span class="nf">partial_double</span><span class="p">(</span><span class="n">GameSave</span><span class="p">).</span><span class="nf">new</span><span class="p">(</span><span class="sh">"</span><span class="s">TestingGameSave.save</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">12345</span><span class="sh">"</span><span class="p">)</span>

	<span class="nf">stub</span><span class="p">(</span><span class="n">save</span><span class="p">,</span><span class="sh">"</span><span class="s">print_error</span><span class="sh">"</span><span class="p">).</span><span class="nf">to_call</span><span class="p">(</span><span class="nf">func</span><span class="p">(</span><span class="n">_msg</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">void</span><span class="p">:</span>
		<span class="n">_error_called</span> <span class="o">=</span> <span class="n">true</span>
	<span class="p">)</span>

	<span class="c1">#act
</span>	<span class="n">var</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dictionary</span> <span class="o">=</span> <span class="n">save</span><span class="p">.</span><span class="nf">load_data</span><span class="p">()</span>

	<span class="c1">#assert
</span>	<span class="nf">assert_true</span><span class="p">(</span><span class="n">_error_called</span><span class="p">)</span> <span class="c1"># this one is custom solution for checks
</span>        <span class="nf">assert_called</span><span class="p">(</span><span class="n">save</span><span class="p">,</span><span class="sh">"</span><span class="s">print_error</span><span class="sh">"</span><span class="p">)</span> <span class="c1"># this one comes from gut
</span>	<span class="nf">assert_not_null</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div> <h2 id="szczegóły-rozwiązania">Szczegóły rozwiązania:</h2> <p>Należy jednak wziąc pod uwagę, to, że wywołanie funkcji anonimowej musiało odbyć się na zmiennej <code class="language-plaintext highlighter-rouge">_error_called</code> obiektu klasy. W GDscript obecny jest następujący problem. Jeżeli chciałbym wywołac zmienną w taki sposób:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">func</span> <span class="nf">test_load_if_game_save_doesnt_exist</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">void</span><span class="p">:</span>
	<span class="c1">#arrange
</span>	<span class="n">var</span> <span class="n">save</span> <span class="o">=</span> <span class="nf">partial_double</span><span class="p">(</span><span class="n">GameSave</span><span class="p">).</span><span class="nf">new</span><span class="p">(</span><span class="sh">"</span><span class="s">TestingGameSave.save</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">12345</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">var</span> <span class="n">error_called</span> <span class="o">=</span> <span class="n">true</span>

	<span class="nf">stub</span><span class="p">(</span><span class="n">save</span><span class="p">,</span><span class="sh">"</span><span class="s">print_error</span><span class="sh">"</span><span class="p">).</span><span class="nf">to_call</span><span class="p">(</span><span class="nf">func</span><span class="p">(</span><span class="n">_msg</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">void</span><span class="p">:</span>
		<span class="n">error_called</span> <span class="o">=</span> <span class="n">true</span>
	<span class="p">)</span>

	<span class="c1">#act
</span>	<span class="n">var</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dictionary</span> <span class="o">=</span> <span class="n">save</span><span class="p">.</span><span class="nf">load_data</span><span class="p">()</span>

	<span class="c1">#assert
</span>
	<span class="nf">assert_true</span><span class="p">(</span><span class="n">error_called</span><span class="p">)</span> <span class="c1"># this one is
</span>	<span class="nf">assert_not_null</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div> <p>Wystąpiłby błąd związany z tym, że wartości z funkcji anonimowych są przekazywane poprzez wartość a nie poprzez referencje, co oznaczałaby, że wartość zmiennej <code class="language-plaintext highlighter-rouge">error_called</code> nie zostałaby zmieniona a asercja nie powiodłaby się.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#it fails
</span><span class="nf">assert_true</span><span class="p">(</span><span class="n">error_called</span><span class="p">)</span>
</code></pre></div></div> <p>Aby zadziałało przekazanie przez referencje należy odnieść się do zmiennej z kontekstu obiektu.</p> <p>Dzięki tym prostym trickom udało się wywołać scenariusz testowy dla walidacji błędów w deterministyczny i powtarzalny spsób. Rozwiązanie te ma jednak następujące minusy z którymi należy się liczyć:</p> <ul> <li> <p>wymaga stworzenia dublera, który połowicznie odzwierciedla logikę klasy GameSave</p> </li> <li> <p>dla każdej testowej klasy należy “przykryć obsługę błędów” dodatkową metodą <code class="language-plaintext highlighter-rouge">print_error</code> oraz dla każdego testu należy przykryć tą metodę dodatkowym wywołaniem metody stub.</p> </li> </ul> <p>Jest to mała cena za możliwość trasnparetnego i przyjemnego sprawdzenia obsługi błędów i walidacji kodu w GDscript. Można to jeszcze na pewno ulepszyć, ale zostawiam to jako temat na następny artykuł.</p> <h3 id="możliwe-ulepszenia">Możliwe ulepszenia</h3> <p>W skrócie można to ulepszyć w następujący sposób:</p> <ul> <li>dodać sprawdzenie zwracanego kodu oraz ich obsługę</li> <li>dodać weryfikacje zwracanego kodu błędu w testach</li> <li>dodać własną warstwę lub serwis do logowania błędów</li> </ul>]]></content><author><name></name></author><category term="tutorials"/><category term="game-dev"/><category term="godot"/><category term="tests"/><summary type="html"><![CDATA[Testowanie obsługi błędów przy pomoc GUT i metody stub w GDscript]]></summary></entry><entry><title type="html">Jak przechowywać duże pliki binarne z użyciem git lfs na Google Drive lub One Drive?</title><link href="https://ziumper.github.io/pl/blog/2023/how-to-store-big-binary-files-with-git-lfs/" rel="alternate" type="text/html" title="Jak przechowywać duże pliki binarne z użyciem git lfs na Google Drive lub One Drive?"/><published>2023-10-23T16:40:16+00:00</published><updated>2023-10-23T16:40:16+00:00</updated><id>https://ziumper.github.io/blog/2023/how-to-store-big-binary-files-with-git-lfs</id><content type="html" xml:base="https://ziumper.github.io/blog/2023/how-to-store-big-binary-files-with-git-lfs/"><![CDATA[<h1 id="adapter-transferu">Adapter transferu</h1> <p>Sugeruję połączenie git lfs z niestandardowym adapterem transferu. Zgodnie z dokumentacją git-lfs:</p> <blockquote> <p>Git LFS obsługuje wiele sposobów przesyłania (wgrywania i pobierania) plików. W podstawowych aplikacjach klienckich używa się żądania HTTP za pośrednictwem adresu URL zwróconego z API LFS dla danego obiektu. Klient obsługuje również rozszerzenia umożliwiające wznowienie pobierania (za pośrednictwem nagłówków Range) i przesyłania.</p> </blockquote> <h1 id="przykłady-użycia">Przykłady użycia</h1> <p>Wykorzystałem ten sposób do przechowywania plików multimedialnych w moim projekcie i do rozwoju oprogramowania w projektach związanych z grami. Jestem pewien, że i Ty możesz to zrobić. W większości przypadków lubię to stosować do:</p> <ul> <li>projektów związanych z tworzeniem gier w silnikach takich jak Unity i Unreal Engine.</li> <li>przechowywania dbdumps</li> <li>przechowywania dużych plików multimedialnych (w razie potrzeby)</li> </ul> <p>Zawsze istnieje sposób, aby to zrobić również dla innych rodzajów projektów.</p> <p>W poniższym przykładzie będę używał gitlab, google drive i innych narzędzi.</p> <h1 id="konfiguracja-gitlab-a">Konfiguracja Gitlab-a</h1> <p>Po pierwsze, musisz wyłączyć domyślną usługę lfs w gitlabie. Jest to bardzo dobrze udokumentowana funkcja w oficjalnej dokumentacji <a href="https://docs.gitlab.com/ee/topics/git/lfs">Gitlab</a>, ale nie ma zbyt dużo informacji na temat tego, jak ją wyłączyć.</p> <p>Jest to trochę skomplikowane i niezbyt przyjazne dla użytkownika, ale oczywiście musisz wybrać swoje repozytorium i wejść w ustawienia.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/settings_gitlab-480.webp 480w,/assets/img/posts/settings_gitlab-800.webp 800w,/assets/img/posts/settings_gitlab-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/settings_gitlab.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/disable_gitlab_lfs_example-480.webp 480w,/assets/img/posts/disable_gitlab_lfs_example-800.webp 800w,/assets/img/posts/disable_gitlab_lfs_example-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/disable_gitlab_lfs_example.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Istnieje również inny sposób za pomocą wiersza poleceń gitlab oraz dla narzędzi CI za pomocą zmiennych środowiskowych, ale nie będę tego omawiał, trzymajmy to proste. Jeśli gitlab lfs jest wyłączony na zdalnym serwerze, możesz zacząć od konfiguracji lokalnej.</p> <h1 id="konfiguracja-lokalnego-repozytorium">Konfiguracja lokalnego repozytorium</h1> <p>Będziesz potrzebował nowego repozytorium lub możesz użyć istniejącego. Sugeruję rozpoczęcie od stanu początkowego, abyś mógł skorzystać z prostego przewodnika konfiguracyjnego poniżej.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div> <p>Dodaj również link do serwera zdalnego. Można to zrobić po konfiguracji lub później. Dla lfs z gitlabem możesz sugerować się zgodnie z prostym samouczkiem <a href="https://docs.gitlab.com/tutorials/learn_git/">link do git</a></p> <h1 id="konfiguracja-lfs">Konfiguracja lfs</h1> <p>Pobierz narzędzie adaptera lfs z <a href="https://github.com/sinbad/lfs-folderstore/releases/tag/v1.0.1">dostępnych wydań</a>.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/OIP-480.webp 480w,/assets/img/posts/OIP-800.webp 800w,/assets/img/posts/OIP-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/OIP.jpg" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Pobierz, rozpakuj, zainstaluj je w dobrze znanej lokalizacji. Na przykład utwórz nowy folder na swoim głównym dysku roboczym, np. tak: <code class="language-plaintext highlighter-rouge">C:\Tools</code>, więc pełna ścieżka do narzędzia będzie wyglądać tak: <code class="language-plaintext highlighter-rouge">C:\Tools\lfs-folderstore.exe</code>.</p> <p>Aby skonfigurować repozytorium z lfs, dodaj plik .gitattributes w swoim repozytorium. Przykłady można znaleźć pod tym <a href="https://github.com/gitattributes/gitattributes">linkiem</a>.</p> <h2 id="unity-gitattributes">Unity .gitattributes</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## in root

*.cs diff=csharp text
*.cginc text
*.shader text

*.mat merge=unityyamlmerge eol=lf
*.anim merge=unityyamlmerge eol=lf
*.unity merge=unityyamlmerge eol=lf
*.prefab merge=unityyamlmerge eol=lf
*.physicsMaterial2D merge=unityyamlmerge eol=lf
*.physicMaterial merge=unityyamlmerge eol=lf
*.asset merge=unityyamlmerge eol=lf -text
*.meta merge=unityyamlmerge eol=lf
*.controller merge=unityyamlmerge eol=lf

## git-lfs ##

#Image
*.jpg filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.gif filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.ai filter=lfs diff=lfs merge=lfs -text
*.tif filter=lfs diff=lfs merge=lfs -text

#Audio
*.mp3 filter=lfs diff=lfs merge=lfs -text
*.wav filter=lfs diff=lfs merge=lfs -text
*.ogg filter=lfs diff=lfs merge=lfs -text
#Wwise
*.bnk filter=lfs diff=lfs merge=lfs -text

#Video
*.mp4 filter=lfs diff=lfs merge=lfs -text
*.mov filter=lfs diff=lfs merge=lfs -text

#3D Object
*.FBX filter=lfs diff=lfs merge=lfs -text
*.fbx filter=lfs diff=lfs merge=lfs -text
*.blend filter=lfs diff=lfs merge=lfs -text
*.obj filter=lfs diff=lfs merge=lfs -text

#ETC
*.a filter=lfs diff=lfs merge=lfs -text
*.exr filter=lfs diff=lfs merge=lfs -text
*.tga filter=lfs diff=lfs merge=lfs -text
*.zip filter=lfs diff=lfs merge=lfs -text
*.dll filter=lfs diff=lfs merge=lfs -text
*.unitypackage filter=lfs diff=lfs merge=lfs -text
*.aif filter=lfs diff=lfs merge=lfs -text
*.ttf filter=lfs diff=lfs merge=lfs -text
*.rns filter=lfs diff=lfs merge=lfs -text
*.reason filter=lfs diff=lfs merge=lfs -text
*.lxo filter=lfs diff=lfs merge=lfs -text

</code></pre></div></div> <h2 id="unreal-engine-gitattributes">Unreal Engine .gitattributes</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Unreal Engine
## Auto detect text files and perform LF normalization ##

* text=auto

# UE file types
*.uasset filter=lfs diff=lfs merge=lfs -text
*.umap filter=lfs diff=lfs merge=lfs -text
*.udk filter=lfs diff=lfs merge=lfs -text
*.upk filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# 2D formats
# Read more in: https://docs.unrealengine.com/4.26/en-US/RenderingAndGraphics/Textures/Importing/

# Recommended use:
*.[tT][gG][aA] filter=lfs diff=lfs merge=lfs -text
*.[pP][nN][gG] filter=lfs diff=lfs merge=lfs -text
*.[bB][mM][pP] filter=lfs diff=lfs merge=lfs -text

# Can also be used:
*.[fF][lL[oO][aA][tT] filter=lfs diff=lfs merge=lfs -text
*.[jJ][pP][eE][gG] filter=lfs diff=lfs merge=lfs -text
*.[jJ][pP][gG] filter=lfs diff=lfs merge=lfs -text
*.[pP][cC][xX] filter=lfs diff=lfs merge=lfs -text
*.[pP][sS][dD] filter=lfs diff=lfs merge=lfs -text
*.[xX][cC][fF] filter=lfs diff=lfs merge=lfs -text
*.[tT][iI][fF] filter=lfs diff=lfs merge=lfs -text
*.[tT][iI][fF][fF] filter=lfs diff=lfs merge=lfs -text

# Other supported formats:
*.[hH][dD][rR] filter=lfs diff=lfs merge=lfs -text
*.[dD][dD][sS] filter=lfs diff=lfs merge=lfs -text
*.[eE][xX][rR] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# 3D formats

# Always recommended to use:
# The UE4 FBX import pipeline uses FBX 2018
*.[fF][bB][xX] filter=lfs diff=lfs merge=lfs -text

# Can also be used:
*.[oO][bB][jJ] filter=lfs diff=lfs merge=lfs -text

# Other supported formats:
*.[aA][bB][cC] filter=lfs diff=lfs merge=lfs -text
*.[sS][rR][tT] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# Audio formats
# Read more in: https://docs.unrealengine.com/4.27/en-US/WorkingWithAudio/Overview/#:~:text=Unreal%20Engine%204%20(UE4)%20supports,16%2Dbit%20format%20PCM%20files.

# Always recommended to use:
*.[wW][aA][vV] filter=lfs diff=lfs merge=lfs -text

# Can also be used:
*.[aA][iI][fF][fF] filter=lfs diff=lfs merge=lfs -text
*.[oO][gG][gG] filter=lfs diff=lfs merge=lfs -text
*.[fF][lL][aA][cC] filter=lfs diff=lfs merge=lfs -text

# Not recommended to use, but supported:
*.[mM][pP]3 filter=lfs diff=lfs merge=lfs -text
*.[wW][mM][aA] filter=lfs diff=lfs merge=lfs -text
*.[aA][cC]3 filter=lfs diff=lfs merge=lfs -text
*.[aA][mM][rR] filter=lfs diff=lfs merge=lfs -text
*.[aA][iI][fF] filter=lfs diff=lfs merge=lfs -text
*.[aA][uU] filter=lfs diff=lfs merge=lfs -text
*.[cC][dD][dD][aA] filter=lfs diff=lfs merge=lfs -text
*.[cC][aA][fF] filter=lfs diff=lfs merge=lfs -text
*.[bB][wW][fF] filter=lfs diff=lfs merge=lfs -text
*.[aA][dD][tT][sS] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# Video formats
# Read more in: https://docs.unrealengine.com/5.0/en-US/media-framework-technical-reference-for-unreal-engine/

# Always recommended to use, supports all platforms:
# For the best compatibility and performance, it is recommended to use H.264 encoded MP4 (.mp4) container files.
*.[mM][pP]4 filter=lfs diff=lfs merge=lfs -text

# Can also be used, only some platforms are supported:
*.3[gG]2 filter=lfs diff=lfs merge=lfs -text
*.3[gG][pP] filter=lfs diff=lfs merge=lfs -text
*.3[gG][pP]2 filter=lfs diff=lfs merge=lfs -text
*.3[gG][pP][pP] filter=lfs diff=lfs merge=lfs -text
*.[mM]4[aA] filter=lfs diff=lfs merge=lfs -text
*.[mM]4[vV] filter=lfs diff=lfs merge=lfs -text
*.[mM][o][vV] filter=lfs diff=lfs merge=lfs -text
*.[aA][sS][fF] filter=lfs diff=lfs merge=lfs -text
*.[aA][vV][iI] filter=lfs diff=lfs merge=lfs -text
*.[wW][mM][vV] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# Fonts
# Read more in: https://docs.unrealengine.com/5.0/en-US/importing-fonts-in-unreal-engine/

*.[tT][tT][fF] filter=lfs diff=lfs merge=lfs -text
*.[oO][tT][fF] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# Documents
*.[cC][sS][vV] filter=lfs diff=lfs merge=lfs -text

</code></pre></div></div> <h1 id="konfiguracja-google-drive">Konfiguracja Google Drive</h1> <p>Jeśli repozytorium jest gotowe, będziesz potrzebować jakiegoś rodzaju przestrzeni dyskowej, aby to działało. Aby w pełni zintegrować to z Google Drive, użyj klienta Google Drive <a href="https://www.google.com/drive/download/">Pobierz</a>. Zainstaluj go, zaloguj się, aby można było utworzyć folder do przechowywania wszystkich dużych danych binarnych.</p> <p>Po zalogowaniu powinieneś zobaczyć swój zamontowany folder w Finderze, jeśli używasz Maca, lub w Exploratorze Windows, jako oddzielony dysk. Otwórz go i utwórz nowy folder o nazwie <code class="language-plaintext highlighter-rouge">binary-lfs</code>. Ta nazwa będzie używana do przechowywania wszystkich danych binarnych dla Twojego projektu w konfiguracji lfs.</p> <h1 id="integracja-konfiguracji-git">Integracja konfiguracji Git</h1> <p>Jeśli wszystko zostało wykonane prawidłowo, teraz nadszedł czas, aby połączyć git-lfs z naszym narzędziem i Google Drive.</p> <p>Użyłem mojego ulubionego otwartoźródłowego oprogramowania <a href="https://git-extensions-documentation.readthedocs.io/">GitExtension</a> jako odniesienia do integracji, ale możesz użyć terminala za pomocą podejścia z konfiguracją git config lub dowolnego edytora tekstu. W przypadku korzystania z edytora tekstu otwórz plik konfiguracyjny w ukrytym folderze .git w głównym folderze Twojego projektu repozytorium.</p> <p>Aby otworzyć konfigurację Twojego repozytorium github, wybierz następującą opcję:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/integration_gitextension-480.webp 480w,/assets/img/posts/integration_gitextension-800.webp 800w,/assets/img/posts/integration_gitextension-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/integration_gitextension.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Otwórz go i dodaj następujące linie.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[lfs "customtransfer.lfs-folder"]
    path = C:\\Tools\\lfs-folderstore.exe
    args = 'I:\\My drive\\binary-lfs'
[lfs]
    standalonetransferagent = lfs-folder
    repositoryformatversion = 0
</code></pre></div></div> <p>Następnie, pamiętaj, aby posortować pliki LFS i skopiować zawartość skonfigurowanego wspólnego folderu, używając następującej komendy</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset <span class="nt">--hard</span> master
</code></pre></div></div> <p>lub jeśli korzystasz z nowego repozytorium, po prostu je wyślij</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push -u origin main
</code></pre></div></div> <h1 id="rozwiązywanie-problemów">Rozwiązywanie problemów</h1> <p>Czasami mogą pojawić się problemy z Twoją siecią lub z git lfs. W przypadku błędów smudge lub innych problemów można wypróbować następujące triki:</p> <ul> <li>spróbuj użyć lepszego połączenia internetowego, słaby pasmo sieciowe nie pomaga</li> <li>zrestartuj komputer</li> <li>użyj <code class="language-plaintext highlighter-rouge">git lfs fetch --all</code> pobiera pliki git lfs dla WSZYSTKICH zdalnych gałęzi</li> <li>przenieś katalog cache Google Drive lub One Drive do nowego folderu i spróbuj ponownie pobrać dane</li> </ul> <h1 id="bibliografia-i-źródła">Bibliografia i źródła</h1> <ul> <li><a href="https://github.com/sinbad/lfs-folderstore">Lfs folderstore repo</a></li> <li><a href="https://www.google.com/drive/download/">Google Drive</a></li> <li><a href="https://docs.gitlab.com/">Gitlab Docs</a></li> </ul>]]></content><author><name></name></author><category term="tutorials"/><category term="git"/><category term="unity"/><category term="unreal-engine"/><summary type="html"><![CDATA[Sprawdzony sposób na darmowy hosting plików przy pomocy adaptera LFS.]]></summary></entry><entry><title type="html">Jak rozwiązywać konfilkty przy pomocy GitExtensions?</title><link href="https://ziumper.github.io/pl/blog/2022/how-to-solve-rebase-merge-conflicts-with-GitExtensions/" rel="alternate" type="text/html" title="Jak rozwiązywać konfilkty przy pomocy GitExtensions?"/><published>2022-08-06T16:40:16+00:00</published><updated>2022-08-06T16:40:16+00:00</updated><id>https://ziumper.github.io/blog/2022/how-to-solve-rebase-merge-conflicts-with-GitExtensions</id><content type="html" xml:base="https://ziumper.github.io/blog/2022/how-to-solve-rebase-merge-conflicts-with-GitExtensions/"><![CDATA[<p>Czy kiedykolwiek zastanawiałeś się, jak łatwo połączyć swoje zmiany bez niszczenia całego projektu? Oto szybki i prosty przewodnik. Zaczynamy! Po pierwsze, powinieneś zainstalować i skonfigurować <a href="https://git-extensions-documentation.readthedocs.io/">GitExtensions</a>. Następnie otwórz swoje repozytorium. W moim przypadku zawiera ono dwie gałęzie: master i develop. Sprawdź obraz poniżej, aby to zobaczyć.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_1-480.webp 480w,/assets/img/posts/gitExtensions_1-800.webp 800w,/assets/img/posts/gitExtensions_1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_2-480.webp 480w,/assets/img/posts/gitExtensions_2-800.webp 800w,/assets/img/posts/gitExtensions_2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Zawiera plik hello.html z tym samym edytowanym wierszem, więc nie wie, który wiersz powinien być użyty, gdy <a href="https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts">conflict</a> wystąpi.</p> <h2 id="jak-zmienić-baze">Jak zmienić baze?</h2> <p>Aby <a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase">przebazować</a> z gałęzi develop na gałąź master, aby zatwierdzenie na gałęzi develop było “nad” zatwierdzeniami z gałęzi master i tak aby zawierał wszystkie zatwierdzenia z gałęzi master także. Jak to zrobić? Przełącz się na gałąź develop. Kliknij prawym przyciskiem myszy na niej. Wybierz opcję przełączenia gałęzi, a następnie wybierz gałąź develop.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_3-480.webp 480w,/assets/img/posts/gitExtensions_3-800.webp 800w,/assets/img/posts/gitExtensions_3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Kiedy jesteś na gałęzi develop, wybierz, dla którego zatwierdzenia chcesz zmienić bazę. W moim przypadku jest to zatwierdzenie z gałęzi master o wiadomości “Hope it will work”.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_4-480.webp 480w,/assets/img/posts/gitExtensions_4-800.webp 800w,/assets/img/posts/gitExtensions_4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_4.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Po kliknięciu “yes”, aby zmienić bazę, powinieneś zobaczyć komunikat o błędzie, ale nie martw się, nie ma w tym nic złego z git. To tylko informacja dla Ciebie, że musisz rozwiązać kilka konfliktów.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_5-480.webp 480w,/assets/img/posts/gitExtensions_5-800.webp 800w,/assets/img/posts/gitExtensions_5-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_5.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Następnie kliknij OK i kontynuuj. Następnie powinieneś zobaczyć podobne okno poniżej:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_6-480.webp 480w,/assets/img/posts/gitExtensions_6-800.webp 800w,/assets/img/posts/gitExtensions_6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_6.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Wybierz rozwiązanie konfliktów, a następnie powinno pojawić się kolejne okno.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_7-480.webp 480w,/assets/img/posts/gitExtensions_7-800.webp 800w,/assets/img/posts/gitExtensions_7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>To okno jest oknem rozwiązywania konfliktów scalania. Możesz rozwiązać konflikty scalania na dwa sposoby. Szybki i łatwy drugi sposób, dla którego używasz narzędzia do porównywania różnic, jak <a href="https://github.com/KDE/kdiff3">kdiff3</a>.</p> <h2 id="szybki-i-łatwy-sposób-rozwiązania-konfliktów-scalania">Szybki i łatwy sposób rozwiązania konfliktów scalania.</h2> <p>Możesz zastosować zmiany dla pliku hello.html, odrzucając swoje zmiany i korzystając z zmian z gałęzi master. Kliknij prawym przyciskiem myszy na pliku hello.html i wybierz (theirs), jak na obrazie poniżej:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_8-480.webp 480w,/assets/img/posts/gitExtensions_8-800.webp 800w,/assets/img/posts/gitExtensions_8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Jeśli chcesz nadpisać zmiany, zawsze możesz użyć opcji (ours). Następnie kliknij kontynuuj przebazowanie w głównym oknie przebazowania.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_9-480.webp 480w,/assets/img/posts/gitExtensions_9-800.webp 800w,/assets/img/posts/gitExtensions_9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>W przypadku większej liczby plików lub konfliktów, będziesz musiał je rozwiązać później. Pamiętaj, że praca z większymi plikami lub zmianami może zająć trochę czasu.</p> <h2 id="praca-z-narzędziem-do-porównywania-różnic">Praca z narzędziem do porównywania różnic</h2> <p>Tutaj zmodyfikowałem trochę historię repozytorium, więc możemy z tym pracować</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_10-480.webp 480w,/assets/img/posts/gitExtensions_10-800.webp 800w,/assets/img/posts/gitExtensions_10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Przebazuj ponownie i rozwijaj na gałąź master.</p> <ol> <li> <p>Przełącz się na gałąź develop</p> </li> <li> <p>Wybierz pierwszy commit z gałęzi master z wiadomością “Some other changes” i kliknij prawym przyciskiem myszy na nim</p> </li> <li> <p>Przebazuj bieżącą gałąź na -&gt; wybrany commit.</p> </li> </ol> <p>Następnie zaczyna się magia. Pomijam kroki do okna konfliktów scalania, które są takie same jak powyżej. Wybierz otwórz je w kdiff3 lub innym narzędziu do scalania/porównywania.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_11-480.webp 480w,/assets/img/posts/gitExtensions_11-800.webp 800w,/assets/img/posts/gitExtensions_11-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Powinieneś zobaczyć okno podobne do poniższego:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_12-480.webp 480w,/assets/img/posts/gitExtensions_12-800.webp 800w,/assets/img/posts/gitExtensions_12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Następnie występują trzy katalogi scalania:</p> <ul> <li> <p>(“A” jest traktowane jako starsza baza obu).</p> </li> <li> <p>B - jest (ich) wersją gałęzi master</p> </li> <li> <p>C - jest (nasze) w tym przypadku wersją gałęzi develop</p> </li> </ul> <p>Poniżej znajduje się okno wyjścia, które zawiera wynik scalania.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_13-480.webp 480w,/assets/img/posts/gitExtensions_13-800.webp 800w,/assets/img/posts/gitExtensions_13-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Możesz wybrać wersję pliku, którą chcesz zostawić i połączyć je. Możesz zobaczyć, że wybrałem jedną linię z C, jedną linię z A i jedną linię z B. Następnie zapisałem plik i kontynuowałem przebazowanie po rozwiązaniu konfliktów. To proste, ale czasami sytuacja może się skomplikować, więc uważaj.</p> <p>Poniżej widoczny jest wynik zmiany bazy:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_14-480.webp 480w,/assets/img/posts/gitExtensions_14-800.webp 800w,/assets/img/posts/gitExtensions_14-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Stworzy to rozszerzenia plików .orig, więc zawsze możesz zobaczyć historię swoich zmian.</p> <p>Lepiej nie commitować tych plików do repozytorium.</p> <p>To wszystko! Mam nadzieję, że artykuł pomoże Ci w rozwiązywaniu konfliktów!</p>]]></content><author><name></name></author><category term="tutorials"/><category term="git"/><summary type="html"><![CDATA[Rozwiązywanie konfliktów. W jaki sposób poradzić sobie z rebase a jak z merge requestami.]]></summary></entry><entry><title type="html">Jak zacząć z GIT-em?</title><link href="https://ziumper.github.io/pl/blog/2022/how-to-start-with-git/" rel="alternate" type="text/html" title="Jak zacząć z GIT-em?"/><published>2022-07-17T16:40:16+00:00</published><updated>2022-07-17T16:40:16+00:00</updated><id>https://ziumper.github.io/blog/2022/how-to-start-with-git</id><content type="html" xml:base="https://ziumper.github.io/blog/2022/how-to-start-with-git/"><![CDATA[<p>Zastanawiałem się, co oznacza GIT. Oto co znalazłem:</p> <blockquote> <p>GIT to słowo będące skrótem od angielskiego słowa “get”, które zostało skrócone z “begetting”. Jest również niejawne odniesienie do nieślubnych potomków, a termin jest mniej więcej synonimem głupca, durnia, kretyna lub idioty. W społeczności open source znaczenie wyboru nazwy różni się.</p> </blockquote> <p>Oznacza to, że GIT jest dla idiotów, którzy nie wiedzą, co robią. Doskonałe narzędzie dla programisty. Zacznijmy od początku.</p> <p>Linus Torvalds zdecydował się na jego rozwój dla jądra Linuxa. Od 2005 roku pomaga programistom śledzić zmiany w kodzie. Dostępny we wszystkich systemach operacyjnych i używany przez użytkowników na całym świecie. Łatwo z nim zacząć, ale trudniej być w nim eksperte. Jest to system kontroli wersji. Możesz go pobrać ze <a href="https://git-scm.com/downloads">tej strony</a> i wypróbować samodzielnie.</p> <h1 id="podstawy">Podstawy</h1> <p>Pobierz i zainstaluj <a href="https://git-scm.com/downloads">gita</a> na swoim systemie operacyjnym. Aby kontynuować, musisz otworzyć terminal. Po instalacji powinieneś być w stanie wykonać kilka poleceń gita. Utwórz nowy folder. Następnie otwórz terminal w nowym folderze. Utwórzmy repozytorium. Aby to osiągnąć, użyj poniższego polecenia.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div> <h1 id="narzędzia">Narzędzia</h1> <p>Istnieje kilka narzędzi GUI (ang. Graphic User Interface), które mogą pomóc Ci w rozpoczęciu pracy z Gitem. Jeśli nie jesteś fanem terminala, polecam <a href="https://gitextensions.github.io/">GitExtensions</a></p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitextension-480.webp 480w,/assets/img/posts/gitextension-800.webp 800w,/assets/img/posts/gitextension-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitextension.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="git extensions editor window" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Alternatywnie możesz użyć <a href="https://www.sourcetreeapp.com/">SourceTree</a> jest on darmową alternatywą dla systemu Mac. Myślę, że jeśli używasz Linuxa, to równie dobrze możesz również korzystać z terminala.</p> <p><img src="https://wac-cdn.atlassian.com/dam/jcr:580c367b-c240-453d-aa18-c7ced44324f9/hero-mac-screenshot.png?cdnVersion=651" alt="SourceTree!"/></p> <h1 id="commit">Commit</h1> <p>Dobrze, jak dotąd! Teraz zróbmy kilka commitów. Stwórz plik HTML o następującej zawartości.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Hello there<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div> <p>Teraz jesteś gotowy, do daleszej pracy z obszarem staging. Co to jest obszar staging - wyjaśnijmy to jako pudełko, do którego wkładasz rzeczy, a następnie używasz go jako migawki, aby zatwierdzić zmiany. Aby to zrobić, powinieneś określić ścieżkę do pliku w formacie pliku lub ścieżkę z jakimś wzorcem, np.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.txt .xml, etc.
</code></pre></div></div> <p>Polecenie dodawania pliku hello.html w terminalu</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add hello.html
</code></pre></div></div> <p>Możesz także dodać wszystkie pliki</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="k">*</span>
</code></pre></div></div> <p>Następnie, wpisując:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git status
</code></pre></div></div> <p>Powinieneś zobaczyć wszystkie pliki, które zostały przez ciebie dodane do obszaru staging.</p> <p>Następnie możesz zatwierdzić hello.html w swoim lokalnym repozytorium.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">-m</span> <span class="s2">"Add hello there file"</span>
</code></pre></div></div> <p>commit - to polecenie, które zapisuje migawkę “pudełka”, które wcześniej dodaliśmy.</p> <h1 id="commits-message-standards">Commits message standards</h1> <p>Chcę wyjaśnić kilka standardów dotyczących wiadomości commitów i jak często powinieneś to robić. Słyszałem, że im częściej to robisz, tym lepiej. Nie ma ograniczenia, później zawsze możesz zmniejszyć liczbę commitów, używając funkcji squash. Zacznijmy od formy wiadomości commita. Jak to powinno się robić:</p> <ul> <li> <p>Użyj zdaniowych trybów w linii tematu, np. “Naprawia uszkodzony link do Javadoc”</p> </li> <li> <p>Rozpocznij zdanie linii tematu wielką literą, np. “Dodaje, Usuwa, Naprawia, Wprowadza, Unikaj itp.”</p> </li> <li> <p>Nie kończ linii tematu kropką</p> </li> <li> <p>Zachowaj linie tematu do 50 znaków lub mniej, jeśli to możliwe</p> </li> <li> <p>Zawijaj linie w treści na 72 znaki lub mniej</p> </li> <li> <p>Wzmień związane z nim numery Jira na końcu komentarza commita, poprzedzone „Issue:” jak powyżej</p> </li> <li> <p>W treści wiadomości commita wyjaśnij, jak działały rzeczy przed tym commitem, co się zmieniło i jak teraz działają rzeczy</p> </li> </ul> <p>Lubie także dodać jakiś rodzaj tagu przed wiadomością commita, oto kilka przykładów:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>– Feature

– Bugfix

– Cleanup

– Hotfix
</code></pre></div></div> <p>Kiedy pracujesz nad zadaniem, dobrze jest dodać pewną liczbę zadań, takich jak #123, które odnoszą się do niektórych. Podsumowując, powinno to wyglądać tak:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>FEATURE] <span class="c">#123 My super not quite long commit message.</span>


Here goes body messages where we describe what is going on.
Keep it short as much as you can, but include all necessary details
inside.

Footer where summary and all other references should be applied <span class="k">for
</span>example:
Those commits resolve issue <span class="c">#123 and #124</span>
</code></pre></div></div> <p>Git branches – tree of changes Commits can be added to branches. The branch is a set of commits that are separated from the main branch just like in a tree with leafs. To create a branch:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch &lt;branch_name&gt;
</code></pre></div></div> <p>Aby zmienić gałąź</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout &lt;branch_name&gt;
</code></pre></div></div> <p>Po zainicjowaniu repozytorium gita zwykle masz jedną istniejącą główną gałąź, z której wszystkie utworzone później gałęzie mogą być pochodne. Używaj ich, aby grupować pewne zmiany w funkcji, nad którą pracujesz.</p> <h1 id="workflow">Workflow</h1> <p>Polecam zapoznanie się z kilkoma pojęciami gita, takimi jak gałąź, rebase, merge i squash. Po tym możesz zacząć myśleć o tym, jak pracować i zarządzać swoją pracą jako programista. Jestem wielkim zwolennikiem normalizacji i standardów przepływów pracy. Znalazłem kilka metodologii, które są popularne obecnie podczas pracy z gitem.</p> <ul> <li>Gitflow</li> <li>Trunk</li> </ul> <p>Wybierz pierwszy, jeśli nie masz w swoim zestawie narzędzi CI/CD. Drugi jest świetny przy pracy z zintegrowanymi narzędziami do przeglądu kodu.</p>]]></content><author><name></name></author><category term="tutorials"/><category term="git"/><summary type="html"><![CDATA[Śmiały artykuł i początek serio o gicie.]]></summary></entry></feed>
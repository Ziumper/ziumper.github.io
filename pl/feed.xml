<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="pl"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ziumper.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ziumper.github.io/" rel="alternate" type="text/html" hreflang="pl"/><updated>2024-02-21T14:21:57+00:00</updated><id>https://ziumper.github.io/feed.xml</id><title type="html">Ziumper</title><entry><title type="html">Jak przechowywać duże pliki binarne z użyciem git lfs na Google Drive lub One Drive?</title><link href="https://ziumper.github.io/blog/2023/how-to-store-big-binary-files-with-git-lfs/" rel="alternate" type="text/html" title="Jak przechowywać duże pliki binarne z użyciem git lfs na Google Drive lub One Drive?"/><published>2023-10-23T16:40:16+00:00</published><updated>2023-10-23T16:40:16+00:00</updated><id>https://ziumper.github.io/blog/2023/how-to-store-big-binary-files-with-git-lfs</id><content type="html" xml:base="https://ziumper.github.io/blog/2023/how-to-store-big-binary-files-with-git-lfs/"><![CDATA[<h1 id="adapter-transferu">Adapter transferu</h1> <p>Sugeruję połączenie git lfs z niestandardowym adapterem transferu. Zgodnie z dokumentacją git-lfs:</p> <blockquote> <p>Git LFS obsługuje wiele sposobów przesyłania (wgrywania i pobierania) plików. W podstawowych aplikacjach klienckich używa się żądania HTTP za pośrednictwem adresu URL zwróconego z API LFS dla danego obiektu. Klient obsługuje również rozszerzenia umożliwiające wznowienie pobierania (za pośrednictwem nagłówków Range) i przesyłania.</p> </blockquote> <h1 id="przykłady-użycia">Przykłady użycia</h1> <p>Wykorzystałem ten sposób do przechowywania plików multimedialnych w moim projekcie i do rozwoju oprogramowania w projektach związanych z grami. Jestem pewien, że i Ty możesz to zrobić. W większości przypadków lubię to stosować do:</p> <ul> <li>projektów związanych z tworzeniem gier w silnikach takich jak Unity i Unreal Engine.</li> <li>przechowywania dbdumps</li> <li>przechowywania dużych plików multimedialnych (w razie potrzeby)</li> </ul> <p>Zawsze istnieje sposób, aby to zrobić również dla innych rodzajów projektów.</p> <p>W poniższym przykładzie będę używał gitlab, google drive i innych narzędzi.</p> <h1 id="konfiguracja-gitlab-a">Konfiguracja Gitlab-a</h1> <p>Po pierwsze, musisz wyłączyć domyślną usługę lfs w gitlabie. Jest to bardzo dobrze udokumentowana funkcja w oficjalnej dokumentacji <a href="https://docs.gitlab.com/ee/topics/git/lfs">Gitlab</a>, ale nie ma zbyt dużo informacji na temat tego, jak ją wyłączyć.</p> <p>Jest to trochę skomplikowane i niezbyt przyjazne dla użytkownika, ale oczywiście musisz wybrać swoje repozytorium i wejść w ustawienia.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/settings_gitlab-480.webp 480w,/assets/img/posts/settings_gitlab-800.webp 800w,/assets/img/posts/settings_gitlab-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/settings_gitlab.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/disable_gitlab_lfs_example-480.webp 480w,/assets/img/posts/disable_gitlab_lfs_example-800.webp 800w,/assets/img/posts/disable_gitlab_lfs_example-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/disable_gitlab_lfs_example.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Istnieje również inny sposób za pomocą wiersza poleceń gitlab oraz dla narzędzi CI za pomocą zmiennych środowiskowych, ale nie będę tego omawiał, trzymajmy to proste. Jeśli gitlab lfs jest wyłączony na zdalnym serwerze, możesz zacząć od konfiguracji lokalnej.</p> <h1 id="konfiguracja-lokalnego-repozytorium">Konfiguracja lokalnego repozytorium</h1> <p>Będziesz potrzebował nowego repozytorium lub możesz użyć istniejącego. Sugeruję rozpoczęcie od stanu początkowego, abyś mógł skorzystać z prostego przewodnika konfiguracyjnego poniżej.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div> <p>Dodaj również link do serwera zdalnego. Można to zrobić po konfiguracji lub później. Dla lfs z gitlabem możesz sugerować się zgodnie z prostym samouczkiem <a href="https://docs.gitlab.com/ee/gitlab-basics/start-using-git.html#add-a-remote">link do git</a></p> <h1 id="konfiguracja-lfs">Konfiguracja lfs</h1> <p>Pobierz narzędzie adaptera lfs z <a href="https://github.com/sinbad/lfs-folderstore/releases/tag/v1.0.1">dostępnych wydań</a>.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/OIP-480.webp 480w,/assets/img/posts/OIP-800.webp 800w,/assets/img/posts/OIP-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/OIP.jpg" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Pobierz, rozpakuj, zainstaluj je w dobrze znanej lokalizacji. Na przykład utwórz nowy folder na swoim głównym dysku roboczym, np. tak: <code class="language-plaintext highlighter-rouge">C:\Tools</code>, więc pełna ścieżka do narzędzia będzie wyglądać tak: <code class="language-plaintext highlighter-rouge">C:\Tools\lfs-folderstore.exe</code>.</p> <p>Aby skonfigurować repozytorium z lfs, dodaj plik .gitattributes w swoim repozytorium. Przykłady można znaleźć pod tym <a href="https://github.com/gitattributes/gitattributes">linkiem</a>.</p> <h2 id="unity-gitattributes">Unity .gitattributes</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## in root 

*.cs diff=csharp text
*.cginc text
*.shader text

*.mat merge=unityyamlmerge eol=lf
*.anim merge=unityyamlmerge eol=lf
*.unity merge=unityyamlmerge eol=lf
*.prefab merge=unityyamlmerge eol=lf
*.physicsMaterial2D merge=unityyamlmerge eol=lf
*.physicMaterial merge=unityyamlmerge eol=lf
*.asset merge=unityyamlmerge eol=lf -text
*.meta merge=unityyamlmerge eol=lf
*.controller merge=unityyamlmerge eol=lf

## git-lfs ##

#Image
*.jpg filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.gif filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.ai filter=lfs diff=lfs merge=lfs -text
*.tif filter=lfs diff=lfs merge=lfs -text

#Audio
*.mp3 filter=lfs diff=lfs merge=lfs -text
*.wav filter=lfs diff=lfs merge=lfs -text
*.ogg filter=lfs diff=lfs merge=lfs -text
#Wwise
*.bnk filter=lfs diff=lfs merge=lfs -text

#Video
*.mp4 filter=lfs diff=lfs merge=lfs -text
*.mov filter=lfs diff=lfs merge=lfs -text

#3D Object
*.FBX filter=lfs diff=lfs merge=lfs -text
*.fbx filter=lfs diff=lfs merge=lfs -text
*.blend filter=lfs diff=lfs merge=lfs -text
*.obj filter=lfs diff=lfs merge=lfs -text

#ETC
*.a filter=lfs diff=lfs merge=lfs -text
*.exr filter=lfs diff=lfs merge=lfs -text
*.tga filter=lfs diff=lfs merge=lfs -text
*.zip filter=lfs diff=lfs merge=lfs -text
*.dll filter=lfs diff=lfs merge=lfs -text
*.unitypackage filter=lfs diff=lfs merge=lfs -text
*.aif filter=lfs diff=lfs merge=lfs -text
*.ttf filter=lfs diff=lfs merge=lfs -text
*.rns filter=lfs diff=lfs merge=lfs -text
*.reason filter=lfs diff=lfs merge=lfs -text
*.lxo filter=lfs diff=lfs merge=lfs -text

</code></pre></div></div> <h2 id="unreal-engine-gitattributes">Unreal Engine .gitattributes</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Unreal Engine 
## Auto detect text files and perform LF normalization ##

* text=auto

# UE file types
*.uasset filter=lfs diff=lfs merge=lfs -text
*.umap filter=lfs diff=lfs merge=lfs -text
*.udk filter=lfs diff=lfs merge=lfs -text
*.upk filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# 2D formats
# Read more in: https://docs.unrealengine.com/4.26/en-US/RenderingAndGraphics/Textures/Importing/

# Recommended use:
*.[tT][gG][aA] filter=lfs diff=lfs merge=lfs -text
*.[pP][nN][gG] filter=lfs diff=lfs merge=lfs -text
*.[bB][mM][pP] filter=lfs diff=lfs merge=lfs -text

# Can also be used:
*.[fF][lL[oO][aA][tT] filter=lfs diff=lfs merge=lfs -text
*.[jJ][pP][eE][gG] filter=lfs diff=lfs merge=lfs -text
*.[jJ][pP][gG] filter=lfs diff=lfs merge=lfs -text
*.[pP][cC][xX] filter=lfs diff=lfs merge=lfs -text
*.[pP][sS][dD] filter=lfs diff=lfs merge=lfs -text
*.[xX][cC][fF] filter=lfs diff=lfs merge=lfs -text
*.[tT][iI][fF] filter=lfs diff=lfs merge=lfs -text
*.[tT][iI][fF][fF] filter=lfs diff=lfs merge=lfs -text

# Other supported formats:
*.[hH][dD][rR] filter=lfs diff=lfs merge=lfs -text
*.[dD][dD][sS] filter=lfs diff=lfs merge=lfs -text
*.[eE][xX][rR] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# 3D formats

# Always recommended to use:
# The UE4 FBX import pipeline uses FBX 2018
*.[fF][bB][xX] filter=lfs diff=lfs merge=lfs -text

# Can also be used:
*.[oO][bB][jJ] filter=lfs diff=lfs merge=lfs -text

# Other supported formats:
*.[aA][bB][cC] filter=lfs diff=lfs merge=lfs -text
*.[sS][rR][tT] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# Audio formats
# Read more in: https://docs.unrealengine.com/4.27/en-US/WorkingWithAudio/Overview/#:~:text=Unreal%20Engine%204%20(UE4)%20supports,16%2Dbit%20format%20PCM%20files.

# Always recommended to use:
*.[wW][aA][vV] filter=lfs diff=lfs merge=lfs -text

# Can also be used:
*.[aA][iI][fF][fF] filter=lfs diff=lfs merge=lfs -text
*.[oO][gG][gG] filter=lfs diff=lfs merge=lfs -text
*.[fF][lL][aA][cC] filter=lfs diff=lfs merge=lfs -text

# Not recommended to use, but supported:
*.[mM][pP]3 filter=lfs diff=lfs merge=lfs -text
*.[wW][mM][aA] filter=lfs diff=lfs merge=lfs -text
*.[aA][cC]3 filter=lfs diff=lfs merge=lfs -text
*.[aA][mM][rR] filter=lfs diff=lfs merge=lfs -text
*.[aA][iI][fF] filter=lfs diff=lfs merge=lfs -text
*.[aA][uU] filter=lfs diff=lfs merge=lfs -text
*.[cC][dD][dD][aA] filter=lfs diff=lfs merge=lfs -text
*.[cC][aA][fF] filter=lfs diff=lfs merge=lfs -text
*.[bB][wW][fF] filter=lfs diff=lfs merge=lfs -text
*.[aA][dD][tT][sS] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# Video formats
# Read more in: https://docs.unrealengine.com/5.0/en-US/media-framework-technical-reference-for-unreal-engine/

# Always recommended to use, supports all platforms:
# For the best compatibility and performance, it is recommended to use H.264 encoded MP4 (.mp4) container files.
*.[mM][pP]4 filter=lfs diff=lfs merge=lfs -text

# Can also be used, only some platforms are supported:
*.3[gG]2 filter=lfs diff=lfs merge=lfs -text
*.3[gG][pP] filter=lfs diff=lfs merge=lfs -text
*.3[gG][pP]2 filter=lfs diff=lfs merge=lfs -text
*.3[gG][pP][pP] filter=lfs diff=lfs merge=lfs -text
*.[mM]4[aA] filter=lfs diff=lfs merge=lfs -text
*.[mM]4[vV] filter=lfs diff=lfs merge=lfs -text
*.[mM][o][vV] filter=lfs diff=lfs merge=lfs -text
*.[aA][sS][fF] filter=lfs diff=lfs merge=lfs -text
*.[aA][vV][iI] filter=lfs diff=lfs merge=lfs -text
*.[wW][mM][vV] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# Fonts
# Read more in: https://docs.unrealengine.com/5.0/en-US/importing-fonts-in-unreal-engine/

*.[tT][tT][fF] filter=lfs diff=lfs merge=lfs -text
*.[oO][tT][fF] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# Documents
*.[cC][sS][vV] filter=lfs diff=lfs merge=lfs -text

</code></pre></div></div> <h1 id="konfiguracja-google-drive">Konfiguracja Google Drive</h1> <p>Jeśli repozytorium jest gotowe, będziesz potrzebować jakiegoś rodzaju przestrzeni dyskowej, aby to działało. Aby w pełni zintegrować to z Google Drive, użyj klienta Google Drive <a href="https://www.google.com/drive/download/">Pobierz</a>. Zainstaluj go, zaloguj się, aby można było utworzyć folder do przechowywania wszystkich dużych danych binarnych.</p> <p>Po zalogowaniu powinieneś zobaczyć swój zamontowany folder w Finderze, jeśli używasz Maca, lub w Exploratorze Windows, jako oddzielony dysk. Otwórz go i utwórz nowy folder o nazwie <code class="language-plaintext highlighter-rouge">binary-lfs</code>. Ta nazwa będzie używana do przechowywania wszystkich danych binarnych dla Twojego projektu w konfiguracji lfs.</p> <h1 id="integracja-konfiguracji-git">Integracja konfiguracji Git</h1> <p>Jeśli wszystko zostało wykonane prawidłowo, teraz nadszedł czas, aby połączyć git-lfs z naszym narzędziem i Google Drive.</p> <p>Użyłem mojego ulubionego otwartoźródłowego oprogramowania <a href="https://git-extensions-documentation.readthedocs.io/">GitExtension</a> jako odniesienia do integracji, ale możesz użyć terminala za pomocą podejścia z konfiguracją git config lub dowolnego edytora tekstu. W przypadku korzystania z edytora tekstu otwórz plik konfiguracyjny w ukrytym folderze .git w głównym folderze Twojego projektu repozytorium.</p> <p>Aby otworzyć konfigurację Twojego repozytorium github, wybierz następującą opcję:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/integration_gitextension-480.webp 480w,/assets/img/posts/integration_gitextension-800.webp 800w,/assets/img/posts/integration_gitextension-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/integration_gitextension.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Otwórz go i dodaj następujące linie.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[lfs "customtransfer.lfs-folder"]
    path = C:\\Tools\\lfs-folderstore.exe
    args = 'I:\\My drive\\binary-lfs'
[lfs]
    standalonetransferagent = lfs-folder
    repositoryformatversion = 0
</code></pre></div></div> <p>Następnie, pamiętaj, aby posortować pliki LFS i skopiować zawartość skonfigurowanego wspólnego folderu, używając następującej komendy</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset <span class="nt">--hard</span> master
</code></pre></div></div> <p>lub jeśli korzystasz z nowego repozytorium, po prostu je wyślij</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push -u origin main
</code></pre></div></div> <h1 id="rozwiązywanie-problemów">Rozwiązywanie problemów</h1> <p>Czasami mogą pojawić się problemy z Twoją siecią lub z git lfs. W przypadku błędów smudge lub innych problemów można wypróbować następujące triki:</p> <ul> <li>spróbuj użyć lepszego połączenia internetowego, słaby pasmo sieciowe nie pomaga</li> <li>zrestartuj komputer</li> <li>użyj <code class="language-plaintext highlighter-rouge">git lfs fetch --all</code> pobiera pliki git lfs dla WSZYSTKICH zdalnych gałęzi</li> <li>przenieś katalog cache Google Drive lub One Drive do nowego folderu i spróbuj ponownie pobrać dane</li> </ul> <h1 id="bibliografia-i-źródła">Bibliografia i źródła</h1> <ul> <li><a href="https://github.com/sinbad/lfs-folderstore">Lfs folderstore repo</a></li> <li><a href="https://www.google.com/drive/download/">Google Drive</a></li> <li><a href="https://docs.gitlab.com/">Gitlab Docs</a></li> </ul>]]></content><author><name></name></author><category term="tutorials"/><category term="git"/><category term="git-lfs"/><category term="git-extensions"/><category term="unity"/><category term="unreal-engine"/><summary type="html"><![CDATA[Adapter transferu Sugeruję połączenie git lfs z niestandardowym adapterem transferu. Zgodnie z dokumentacją git-lfs: Git LFS obsługuje wiele sposobów przesyłania (wgrywania i pobierania) plików. W podstawowych aplikacjach klienckich używa się żądania HTTP za pośrednictwem adresu URL zwróconego z API LFS dla danego obiektu. Klient obsługuje również rozszerzenia umożliwiające wznowienie pobierania (za pośrednictwem nagłówków Range) i przesyłania. Przykłady użycia Wykorzystałem ten sposób do przechowywania plików multimedialnych w moim projekcie i do rozwoju oprogramowania w projektach związanych z grami. Jestem pewien, że i Ty możesz to zrobić. W większości przypadków lubię to stosować do: projektów związanych z tworzeniem gier w silnikach takich jak Unity i Unreal Engine. przechowywania dbdumps przechowywania dużych plików multimedialnych (w razie potrzeby) Zawsze istnieje sposób, aby to zrobić również dla innych rodzajów projektów. W poniższym przykładzie będę używał gitlab, google drive i innych narzędzi. Konfiguracja Gitlab-a Po pierwsze, musisz wyłączyć domyślną usługę lfs w gitlabie. Jest to bardzo dobrze udokumentowana funkcja w oficjalnej dokumentacji Gitlab, ale nie ma zbyt dużo informacji na temat tego, jak ją wyłączyć. Jest to trochę skomplikowane i niezbyt przyjazne dla użytkownika, ale oczywiście musisz wybrać swoje repozytorium i wejść w ustawienia. Istnieje również inny sposób za pomocą wiersza poleceń gitlab oraz dla narzędzi CI za pomocą zmiennych środowiskowych, ale nie będę tego omawiał, trzymajmy to proste. Jeśli gitlab lfs jest wyłączony na zdalnym serwerze, możesz zacząć od konfiguracji lokalnej. Konfiguracja lokalnego repozytorium Będziesz potrzebował nowego repozytorium lub możesz użyć istniejącego. Sugeruję rozpoczęcie od stanu początkowego, abyś mógł skorzystać z prostego przewodnika konfiguracyjnego poniżej. git init Dodaj również link do serwera zdalnego. Można to zrobić po konfiguracji lub później. Dla lfs z gitlabem możesz sugerować się zgodnie z prostym samouczkiem link do git Konfiguracja lfs Pobierz narzędzie adaptera lfs z dostępnych wydań. Pobierz, rozpakuj, zainstaluj je w dobrze znanej lokalizacji. Na przykład utwórz nowy folder na swoim głównym dysku roboczym, np. tak: C:\Tools, więc pełna ścieżka do narzędzia będzie wyglądać tak: C:\Tools\lfs-folderstore.exe. Aby skonfigurować repozytorium z lfs, dodaj plik .gitattributes w swoim repozytorium. Przykłady można znaleźć pod tym linkiem. Unity .gitattributes ## in root *.cs diff=csharp text *.cginc text *.shader text *.mat merge=unityyamlmerge eol=lf *.anim merge=unityyamlmerge eol=lf *.unity merge=unityyamlmerge eol=lf *.prefab merge=unityyamlmerge eol=lf *.physicsMaterial2D merge=unityyamlmerge eol=lf *.physicMaterial merge=unityyamlmerge eol=lf *.asset merge=unityyamlmerge eol=lf -text *.meta merge=unityyamlmerge eol=lf *.controller merge=unityyamlmerge eol=lf ## git-lfs ## #Image *.jpg filter=lfs diff=lfs merge=lfs -text *.jpeg filter=lfs diff=lfs merge=lfs -text *.png filter=lfs diff=lfs merge=lfs -text *.gif filter=lfs diff=lfs merge=lfs -text *.psd filter=lfs diff=lfs merge=lfs -text *.ai filter=lfs diff=lfs merge=lfs -text *.tif filter=lfs diff=lfs merge=lfs -text #Audio *.mp3 filter=lfs diff=lfs merge=lfs -text *.wav filter=lfs diff=lfs merge=lfs -text *.ogg filter=lfs diff=lfs merge=lfs -text #Wwise *.bnk filter=lfs diff=lfs merge=lfs -text #Video *.mp4 filter=lfs diff=lfs merge=lfs -text *.mov filter=lfs diff=lfs merge=lfs -text #3D Object *.FBX filter=lfs diff=lfs merge=lfs -text *.fbx filter=lfs diff=lfs merge=lfs -text *.blend filter=lfs diff=lfs merge=lfs -text *.obj filter=lfs diff=lfs merge=lfs -text #ETC *.a filter=lfs diff=lfs merge=lfs -text *.exr filter=lfs diff=lfs merge=lfs -text *.tga filter=lfs diff=lfs merge=lfs -text *.zip filter=lfs diff=lfs merge=lfs -text *.dll filter=lfs diff=lfs merge=lfs -text *.unitypackage filter=lfs diff=lfs merge=lfs -text *.aif filter=lfs diff=lfs merge=lfs -text *.ttf filter=lfs diff=lfs merge=lfs -text *.rns filter=lfs diff=lfs merge=lfs -text *.reason filter=lfs diff=lfs merge=lfs -text *.lxo filter=lfs diff=lfs merge=lfs -text Unreal Engine .gitattributes ## Unreal Engine ## Auto detect text files and perform LF normalization ## * text=auto # UE file types *.uasset filter=lfs diff=lfs merge=lfs -text *.umap filter=lfs diff=lfs merge=lfs -text *.udk filter=lfs diff=lfs merge=lfs -text *.upk filter=lfs diff=lfs merge=lfs -text -------------------------------------------------- # 2D formats # Read more in: https://docs.unrealengine.com/4.26/en-US/RenderingAndGraphics/Textures/Importing/ # Recommended use: *.[tT][gG][aA] filter=lfs diff=lfs merge=lfs -text *.[pP][nN][gG] filter=lfs diff=lfs merge=lfs -text *.[bB][mM][pP] filter=lfs diff=lfs merge=lfs -text # Can also be used: *.[fF][lL[oO][aA][tT] filter=lfs diff=lfs merge=lfs -text *.[jJ][pP][eE][gG] filter=lfs diff=lfs merge=lfs -text *.[jJ][pP][gG] filter=lfs diff=lfs merge=lfs -text *.[pP][cC][xX] filter=lfs diff=lfs merge=lfs -text *.[pP][sS][dD] filter=lfs diff=lfs merge=lfs -text *.[xX][cC][fF] filter=lfs diff=lfs merge=lfs -text *.[tT][iI][fF] filter=lfs diff=lfs merge=lfs -text *.[tT][iI][fF][fF] filter=lfs diff=lfs merge=lfs -text # Other supported formats: *.[hH][dD][rR] filter=lfs diff=lfs merge=lfs -text *.[dD][dD][sS] filter=lfs diff=lfs merge=lfs -text *.[eE][xX][rR] filter=lfs diff=lfs merge=lfs -text -------------------------------------------------- # 3D formats # Always recommended to use: # The UE4 FBX import pipeline uses FBX 2018 *.[fF][bB][xX] filter=lfs diff=lfs merge=lfs -text # Can also be used: *.[oO][bB][jJ] filter=lfs diff=lfs merge=lfs -text # Other supported formats: *.[aA][bB][cC] filter=lfs diff=lfs merge=lfs -text *.[sS][rR][tT] filter=lfs diff=lfs merge=lfs -text -------------------------------------------------- # Audio formats # Read more in: https://docs.unrealengine.com/4.27/en-US/WorkingWithAudio/Overview/#:~:text=Unreal%20Engine%204%20(UE4)%20supports,16%2Dbit%20format%20PCM%20files. # Always recommended to use: *.[wW][aA][vV] filter=lfs diff=lfs merge=lfs -text # Can also be used: *.[aA][iI][fF][fF] filter=lfs diff=lfs merge=lfs -text *.[oO][gG][gG] filter=lfs diff=lfs merge=lfs -text *.[fF][lL][aA][cC] filter=lfs diff=lfs merge=lfs -text # Not recommended to use, but supported: *.[mM][pP]3 filter=lfs diff=lfs merge=lfs -text *.[wW][mM][aA] filter=lfs diff=lfs merge=lfs -text *.[aA][cC]3 filter=lfs diff=lfs merge=lfs -text *.[aA][mM][rR] filter=lfs diff=lfs merge=lfs -text *.[aA][iI][fF] filter=lfs diff=lfs merge=lfs -text *.[aA][uU] filter=lfs diff=lfs merge=lfs -text *.[cC][dD][dD][aA] filter=lfs diff=lfs merge=lfs -text *.[cC][aA][fF] filter=lfs diff=lfs merge=lfs -text *.[bB][wW][fF] filter=lfs diff=lfs merge=lfs -text *.[aA][dD][tT][sS] filter=lfs diff=lfs merge=lfs -text -------------------------------------------------- # Video formats # Read more in: https://docs.unrealengine.com/5.0/en-US/media-framework-technical-reference-for-unreal-engine/ # Always recommended to use, supports all platforms: # For the best compatibility and performance, it is recommended to use H.264 encoded MP4 (.mp4) container files. *.[mM][pP]4 filter=lfs diff=lfs merge=lfs -text # Can also be used, only some platforms are supported: *.3[gG]2 filter=lfs diff=lfs merge=lfs -text *.3[gG][pP] filter=lfs diff=lfs merge=lfs -text *.3[gG][pP]2 filter=lfs diff=lfs merge=lfs -text *.3[gG][pP][pP] filter=lfs diff=lfs merge=lfs -text *.[mM]4[aA] filter=lfs diff=lfs merge=lfs -text *.[mM]4[vV] filter=lfs diff=lfs merge=lfs -text *.[mM][o][vV] filter=lfs diff=lfs merge=lfs -text *.[aA][sS][fF] filter=lfs diff=lfs merge=lfs -text *.[aA][vV][iI] filter=lfs diff=lfs merge=lfs -text *.[wW][mM][vV] filter=lfs diff=lfs merge=lfs -text -------------------------------------------------- # Fonts # Read more in: https://docs.unrealengine.com/5.0/en-US/importing-fonts-in-unreal-engine/ *.[tT][tT][fF] filter=lfs diff=lfs merge=lfs -text *.[oO][tT][fF] filter=lfs diff=lfs merge=lfs -text -------------------------------------------------- # Documents *.[cC][sS][vV] filter=lfs diff=lfs merge=lfs -text Konfiguracja Google Drive Jeśli repozytorium jest gotowe, będziesz potrzebować jakiegoś rodzaju przestrzeni dyskowej, aby to działało. Aby w pełni zintegrować to z Google Drive, użyj klienta Google Drive Pobierz. Zainstaluj go, zaloguj się, aby można było utworzyć folder do przechowywania wszystkich dużych danych binarnych. Po zalogowaniu powinieneś zobaczyć swój zamontowany folder w Finderze, jeśli używasz Maca, lub w Exploratorze Windows, jako oddzielony dysk. Otwórz go i utwórz nowy folder o nazwie binary-lfs. Ta nazwa będzie używana do przechowywania wszystkich danych binarnych dla Twojego projektu w konfiguracji lfs. Integracja konfiguracji Git Jeśli wszystko zostało wykonane prawidłowo, teraz nadszedł czas, aby połączyć git-lfs z naszym narzędziem i Google Drive. Użyłem mojego ulubionego otwartoźródłowego oprogramowania GitExtension jako odniesienia do integracji, ale możesz użyć terminala za pomocą podejścia z konfiguracją git config lub dowolnego edytora tekstu. W przypadku korzystania z edytora tekstu otwórz plik konfiguracyjny w ukrytym folderze .git w głównym folderze Twojego projektu repozytorium. Aby otworzyć konfigurację Twojego repozytorium github, wybierz następującą opcję: Otwórz go i dodaj następujące linie. [lfs "customtransfer.lfs-folder"] path=C:\\Tools\\lfs-folderstore.exe args='I:\\My drive\\binary-lfs' [lfs] standalonetransferagent=lfs-folder repositoryformatversion=0 Następnie, pamiętaj, aby posortować pliki LFS i skopiować zawartość skonfigurowanego wspólnego folderu, używając następującej komendy git reset --hard master lub jeśli korzystasz z nowego repozytorium, po prostu je wyślij git push -u origin main Rozwiązywanie problemów Czasami mogą pojawić się problemy z Twoją siecią lub z git lfs. W przypadku błędów smudge lub innych problemów można wypróbować następujące triki: spróbuj użyć lepszego połączenia internetowego, słaby pasmo sieciowe nie pomaga zrestartuj komputer użyj git lfs fetch --all pobiera pliki git lfs dla WSZYSTKICH zdalnych gałęzi przenieś katalog cache Google Drive lub One Drive do nowego folderu i spróbuj ponownie pobrać dane Bibliografia i źródła Lfs folderstore repo Google Drive Gitlab Docs]]></summary></entry><entry><title type="html">Jak rozwiązywać konfilkty przy pomocy GitExtensions?</title><link href="https://ziumper.github.io/blog/2022/how-to-solve-rebase-merge-conflicts-with-GitExtensions/" rel="alternate" type="text/html" title="Jak rozwiązywać konfilkty przy pomocy GitExtensions?"/><published>2022-08-06T16:40:16+00:00</published><updated>2022-08-06T16:40:16+00:00</updated><id>https://ziumper.github.io/blog/2022/how-to-solve-rebase-merge-conflicts-with-GitExtensions</id><content type="html" xml:base="https://ziumper.github.io/blog/2022/how-to-solve-rebase-merge-conflicts-with-GitExtensions/"><![CDATA[<p>Czy kiedykolwiek zastanawiałeś się, jak łatwo połączyć swoje zmiany bez niszczenia całego projektu? Oto szybki i prosty przewodnik. Zaczynamy! Po pierwsze, powinieneś zainstalować i skonfigurować <a href="https://git-extensions-documentation.readthedocs.io/">GitExtensions</a>. Następnie otwórz swoje repozytorium. W moim przypadku zawiera ono dwie gałęzie: master i develop. Sprawdź obraz poniżej, aby to zobaczyć.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_1-480.webp 480w,/assets/img/posts/gitExtensions_1-800.webp 800w,/assets/img/posts/gitExtensions_1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_2-480.webp 480w,/assets/img/posts/gitExtensions_2-800.webp 800w,/assets/img/posts/gitExtensions_2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Zawiera plik hello.html z tym samym edytowanym wierszem, więc nie wie, który wiersz powinien być użyty, gdy <a href="https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts">conflict</a> wystąpi.</p> <h2 id="jak-zmienić-baze">Jak zmienić baze?</h2> <p>Aby <a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase">przebazować</a> z gałęzi develop na gałąź master, aby zatwierdzenie na gałęzi develop było “nad” zatwierdzeniami z gałęzi master i tak aby zawierał wszystkie zatwierdzenia z gałęzi master także. Jak to zrobić? Przełącz się na gałąź develop. Kliknij prawym przyciskiem myszy na niej. Wybierz opcję przełączenia gałęzi, a następnie wybierz gałąź develop.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_3-480.webp 480w,/assets/img/posts/gitExtensions_3-800.webp 800w,/assets/img/posts/gitExtensions_3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Kiedy jesteś na gałęzi develop, wybierz, dla którego zatwierdzenia chcesz zmienić bazę. W moim przypadku jest to zatwierdzenie z gałęzi master o wiadomości “Hope it will work”.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_4-480.webp 480w,/assets/img/posts/gitExtensions_4-800.webp 800w,/assets/img/posts/gitExtensions_4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_4.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Po kliknięciu “yes”, aby zmienić bazę, powinieneś zobaczyć komunikat o błędzie, ale nie martw się, nie ma w tym nic złego z git. To tylko informacja dla Ciebie, że musisz rozwiązać kilka konfliktów.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_5-480.webp 480w,/assets/img/posts/gitExtensions_5-800.webp 800w,/assets/img/posts/gitExtensions_5-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_5.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Następnie kliknij OK i kontynuuj. Następnie powinieneś zobaczyć podobne okno poniżej:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_6-480.webp 480w,/assets/img/posts/gitExtensions_6-800.webp 800w,/assets/img/posts/gitExtensions_6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_6.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Wybierz rozwiązanie konfliktów, a następnie powinno pojawić się kolejne okno.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_7-480.webp 480w,/assets/img/posts/gitExtensions_7-800.webp 800w,/assets/img/posts/gitExtensions_7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>To okno jest oknem rozwiązywania konfliktów scalania. Możesz rozwiązać konflikty scalania na dwa sposoby. Szybki i łatwy drugi sposób, dla którego używasz narzędzia do porównywania różnic, jak <a href="https://github.com/KDE/kdiff3">kdiff3</a>.</p> <h2 id="szybki-i-łatwy-sposób-rozwiązania-konfliktów-scalania">Szybki i łatwy sposób rozwiązania konfliktów scalania.</h2> <p>Możesz zastosować zmiany dla pliku hello.html, odrzucając swoje zmiany i korzystając z zmian z gałęzi master. Kliknij prawym przyciskiem myszy na pliku hello.html i wybierz (theirs), jak na obrazie poniżej:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_8-480.webp 480w,/assets/img/posts/gitExtensions_8-800.webp 800w,/assets/img/posts/gitExtensions_8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Jeśli chcesz nadpisać zmiany, zawsze możesz użyć opcji (ours). Następnie kliknij kontynuuj przebazowanie w głównym oknie przebazowania.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_9-480.webp 480w,/assets/img/posts/gitExtensions_9-800.webp 800w,/assets/img/posts/gitExtensions_9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>W przypadku większej liczby plików lub konfliktów, będziesz musiał je rozwiązać później. Pamiętaj, że praca z większymi plikami lub zmianami może zająć trochę czasu.</p> <h2 id="praca-z-narzędziem-do-porównywania-różnic">Praca z narzędziem do porównywania różnic</h2> <p>Tutaj zmodyfikowałem trochę historię repozytorium, więc możemy z tym pracować</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_10-480.webp 480w,/assets/img/posts/gitExtensions_10-800.webp 800w,/assets/img/posts/gitExtensions_10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Przebazuj ponownie i rozwijaj na gałąź master.</p> <ol> <li> <p>Przełącz się na gałąź develop</p> </li> <li> <p>Wybierz pierwszy commit z gałęzi master z wiadomością “Some other changes” i kliknij prawym przyciskiem myszy na nim</p> </li> <li> <p>Przebazuj bieżącą gałąź na -&gt; wybrany commit.</p> </li> </ol> <p>Następnie zaczyna się magia. Pomijam kroki do okna konfliktów scalania, które są takie same jak powyżej. Wybierz otwórz je w kdiff3 lub innym narzędziu do scalania/porównywania.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_11-480.webp 480w,/assets/img/posts/gitExtensions_11-800.webp 800w,/assets/img/posts/gitExtensions_11-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Powinieneś zobaczyć okno podobne do poniższego:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_12-480.webp 480w,/assets/img/posts/gitExtensions_12-800.webp 800w,/assets/img/posts/gitExtensions_12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Następnie występują trzy katalogi scalania:</p> <ul> <li> <p>(“A” jest traktowane jako starsza baza obu).</p> </li> <li> <p>B - jest (ich) wersją gałęzi master</p> </li> <li> <p>C - jest (nasze) w tym przypadku wersją gałęzi develop</p> </li> </ul> <p>Poniżej znajduje się okno wyjścia, które zawiera wynik scalania.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_13-480.webp 480w,/assets/img/posts/gitExtensions_13-800.webp 800w,/assets/img/posts/gitExtensions_13-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Możesz wybrać wersję pliku, którą chcesz zostawić i połączyć je. Możesz zobaczyć, że wybrałem jedną linię z C, jedną linię z A i jedną linię z B. Następnie zapisałem plik i kontynuowałem przebazowanie po rozwiązaniu konfliktów. To proste, ale czasami sytuacja może się skomplikować, więc uważaj.</p> <p>Poniżej widoczny jest wynik zmiany bazy:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_14-480.webp 480w,/assets/img/posts/gitExtensions_14-800.webp 800w,/assets/img/posts/gitExtensions_14-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Stworzy to rozszerzenia plików .orig, więc zawsze możesz zobaczyć historię swoich zmian.</p> <p>Lepiej nie commitować tych plików do repozytorium.</p> <p>To wszystko! Mam nadzieję, że artykuł pomoże Ci w rozwiązywaniu konfliktów!</p>]]></content><author><name></name></author><category term="tutorials"/><category term="git"/><category term="gitExtensions"/><summary type="html"><![CDATA[Czy kiedykolwiek zastanawiałeś się, jak łatwo połączyć swoje zmiany bez niszczenia całego projektu? Oto szybki i prosty przewodnik. Zaczynamy! Po pierwsze, powinieneś zainstalować i skonfigurować GitExtensions. Następnie otwórz swoje repozytorium. W moim przypadku zawiera ono dwie gałęzie: master i develop. Sprawdź obraz poniżej, aby to zobaczyć. Zawiera plik hello.html z tym samym edytowanym wierszem, więc nie wie, który wiersz powinien być użyty, gdy conflict wystąpi. Jak zmienić baze? Aby przebazować z gałęzi develop na gałąź master, aby zatwierdzenie na gałęzi develop było “nad” zatwierdzeniami z gałęzi master i tak aby zawierał wszystkie zatwierdzenia z gałęzi master także. Jak to zrobić? Przełącz się na gałąź develop. Kliknij prawym przyciskiem myszy na niej. Wybierz opcję przełączenia gałęzi, a następnie wybierz gałąź develop. Kiedy jesteś na gałęzi develop, wybierz, dla którego zatwierdzenia chcesz zmienić bazę. W moim przypadku jest to zatwierdzenie z gałęzi master o wiadomości “Hope it will work”. Po kliknięciu “yes”, aby zmienić bazę, powinieneś zobaczyć komunikat o błędzie, ale nie martw się, nie ma w tym nic złego z git. To tylko informacja dla Ciebie, że musisz rozwiązać kilka konfliktów. Następnie kliknij OK i kontynuuj. Następnie powinieneś zobaczyć podobne okno poniżej: Wybierz rozwiązanie konfliktów, a następnie powinno pojawić się kolejne okno. To okno jest oknem rozwiązywania konfliktów scalania. Możesz rozwiązać konflikty scalania na dwa sposoby. Szybki i łatwy drugi sposób, dla którego używasz narzędzia do porównywania różnic, jak kdiff3. Szybki i łatwy sposób rozwiązania konfliktów scalania. Możesz zastosować zmiany dla pliku hello.html, odrzucając swoje zmiany i korzystając z zmian z gałęzi master. Kliknij prawym przyciskiem myszy na pliku hello.html i wybierz (theirs), jak na obrazie poniżej: Jeśli chcesz nadpisać zmiany, zawsze możesz użyć opcji (ours). Następnie kliknij kontynuuj przebazowanie w głównym oknie przebazowania. W przypadku większej liczby plików lub konfliktów, będziesz musiał je rozwiązać później. Pamiętaj, że praca z większymi plikami lub zmianami może zająć trochę czasu. Praca z narzędziem do porównywania różnic Tutaj zmodyfikowałem trochę historię repozytorium, więc możemy z tym pracować Przebazuj ponownie i rozwijaj na gałąź master. Przełącz się na gałąź develop Wybierz pierwszy commit z gałęzi master z wiadomością “Some other changes” i kliknij prawym przyciskiem myszy na nim Przebazuj bieżącą gałąź na -&gt; wybrany commit. Następnie zaczyna się magia. Pomijam kroki do okna konfliktów scalania, które są takie same jak powyżej. Wybierz otwórz je w kdiff3 lub innym narzędziu do scalania/porównywania. Powinieneś zobaczyć okno podobne do poniższego: Następnie występują trzy katalogi scalania: (“A” jest traktowane jako starsza baza obu). B - jest (ich) wersją gałęzi master C - jest (nasze) w tym przypadku wersją gałęzi develop Poniżej znajduje się okno wyjścia, które zawiera wynik scalania. Możesz wybrać wersję pliku, którą chcesz zostawić i połączyć je. Możesz zobaczyć, że wybrałem jedną linię z C, jedną linię z A i jedną linię z B. Następnie zapisałem plik i kontynuowałem przebazowanie po rozwiązaniu konfliktów. To proste, ale czasami sytuacja może się skomplikować, więc uważaj. Poniżej widoczny jest wynik zmiany bazy: Stworzy to rozszerzenia plików .orig, więc zawsze możesz zobaczyć historię swoich zmian. Lepiej nie commitować tych plików do repozytorium. To wszystko! Mam nadzieję, że artykuł pomoże Ci w rozwiązywaniu konfliktów!]]></summary></entry><entry><title type="html">Jak zacząć z GIT-em?</title><link href="https://ziumper.github.io/blog/2022/how-to-start-with-git/" rel="alternate" type="text/html" title="Jak zacząć z GIT-em?"/><published>2022-07-17T16:40:16+00:00</published><updated>2022-07-17T16:40:16+00:00</updated><id>https://ziumper.github.io/blog/2022/how-to-start-with-git</id><content type="html" xml:base="https://ziumper.github.io/blog/2022/how-to-start-with-git/"><![CDATA[<p>Zastanawiałem się, co oznacza GIT. Oto co znalazłem:</p> <blockquote> <p>GIT to słowo będące skrótem od angielskiego słowa “get”, które zostało skrócone z “begetting”. Jest również niejawne odniesienie do nieślubnych potomków, a termin jest mniej więcej synonimem głupca, durnia, kretyna lub idioty. W społeczności open source znaczenie wyboru nazwy różni się.</p> </blockquote> <p>Oznacza to, że GIT jest dla idiotów, którzy nie wiedzą, co robią. Doskonałe narzędzie dla programisty. Zacznijmy od początku.</p> <p>Linus Torvalds zdecydował się na jego rozwój dla jądra Linuxa. Od 2005 roku pomaga programistom śledzić zmiany w kodzie. Dostępny we wszystkich systemach operacyjnych i używany przez użytkowników na całym świecie. Łatwo z nim zacząć, ale trudniej być w nim eksperte. Jest to system kontroli wersji. Możesz go pobrać ze <a href="https://git-scm.com/downloads">tej strony</a> i wypróbować samodzielnie.</p> <h1 id="podstawy">Podstawy</h1> <p>Pobierz i zainstaluj <a href="https://git-scm.com/downloads">gita</a> na swoim systemie operacyjnym. Aby kontynuować, musisz otworzyć terminal. Po instalacji powinieneś być w stanie wykonać kilka poleceń gita. Utwórz nowy folder. Następnie otwórz terminal w nowym folderze. Utwórzmy repozytorium. Aby to osiągnąć, użyj poniższego polecenia.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div> <h1 id="narzędzia">Narzędzia</h1> <p>Istnieje kilka narzędzi GUI (ang. Graphic User Interface), które mogą pomóc Ci w rozpoczęciu pracy z Gitem. Jeśli nie jesteś fanem terminala, polecam <a href="https://gitextensions.github.io/">GitExtensions</a></p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitextension-480.webp 480w,/assets/img/posts/gitextension-800.webp 800w,/assets/img/posts/gitextension-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitextension.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="git extensions editor window" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Alternatywnie możesz użyć <a href="https://www.sourcetreeapp.com/">SourceTree</a> jest on darmową alternatywą dla systemu Mac. Myślę, że jeśli używasz Linuxa, to równie dobrze możesz również korzystać z terminala.</p> <p><img src="https://wac-cdn.atlassian.com/dam/jcr:580c367b-c240-453d-aa18-c7ced44324f9/hero-mac-screenshot.png?cdnVersion=651" alt="SourceTree!"/></p> <h1 id="commit">Commit</h1> <p>Dobrze, jak dotąd! Teraz zróbmy kilka commitów. Stwórz plik HTML o następującej zawartości.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Hello there<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div> <p>Teraz jesteś gotowy, do daleszej pracy z obszarem staging. Co to jest obszar staging - wyjaśnijmy to jako pudełko, do którego wkładasz rzeczy, a następnie używasz go jako migawki, aby zatwierdzić zmiany. Aby to zrobić, powinieneś określić ścieżkę do pliku w formacie pliku lub ścieżkę z jakimś wzorcem, np.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.txt .xml, etc.
</code></pre></div></div> <p>Polecenie dodawania pliku hello.html w terminalu</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add hello.html
</code></pre></div></div> <p>Możesz także dodać wszystkie pliki</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="k">*</span>
</code></pre></div></div> <p>Następnie, wpisując:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git status
</code></pre></div></div> <p>Powinieneś zobaczyć wszystkie pliki, które zostały przez ciebie dodane do obszaru staging.</p> <p>Następnie możesz zatwierdzić hello.html w swoim lokalnym repozytorium.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">-m</span> <span class="s2">"Add hello there file"</span>
</code></pre></div></div> <p>commit - to polecenie, które zapisuje migawkę “pudełka”, które wcześniej dodaliśmy.</p> <h1 id="commits-message-standards">Commits message standards</h1> <p>Chcę wyjaśnić kilka standardów dotyczących wiadomości commitów i jak często powinieneś to robić. Słyszałem, że im częściej to robisz, tym lepiej. Nie ma ograniczenia, później zawsze możesz zmniejszyć liczbę commitów, używając funkcji squash. Zacznijmy od formy wiadomości commita. Jak to powinno się robić:</p> <ul> <li> <p>Użyj zdaniowych trybów w linii tematu, np. “Naprawia uszkodzony link do Javadoc”</p> </li> <li> <p>Rozpocznij zdanie linii tematu wielką literą, np. “Dodaje, Usuwa, Naprawia, Wprowadza, Unikaj itp.”</p> </li> <li> <p>Nie kończ linii tematu kropką</p> </li> <li> <p>Zachowaj linie tematu do 50 znaków lub mniej, jeśli to możliwe</p> </li> <li> <p>Zawijaj linie w treści na 72 znaki lub mniej</p> </li> <li> <p>Wzmień związane z nim numery Jira na końcu komentarza commita, poprzedzone „Issue:” jak powyżej</p> </li> <li> <p>W treści wiadomości commita wyjaśnij, jak działały rzeczy przed tym commitem, co się zmieniło i jak teraz działają rzeczy</p> </li> </ul> <p>Lubie także dodać jakiś rodzaj tagu przed wiadomością commita, oto kilka przykładów:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>– Feature

– Bugfix

– Cleanup

– Hotfix
</code></pre></div></div> <p>Kiedy pracujesz nad zadaniem, dobrze jest dodać pewną liczbę zadań, takich jak #123, które odnoszą się do niektórych. Podsumowując, powinno to wyglądać tak:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>FEATURE] <span class="c">#123 My super not quite long commit message. </span>


Here goes body messages where we describe what is going on.
Keep it short as much as you can, but include all necessary details 
inside.

Footer where summary and all other references should be applied <span class="k">for
</span>example: 
Those commits resolve issue <span class="c">#123 and #124</span>
</code></pre></div></div> <p>Git branches – tree of changes Commits can be added to branches. The branch is a set of commits that are separated from the main branch just like in a tree with leafs. To create a branch:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch &lt;branch_name&gt;
</code></pre></div></div> <p>Aby zmienić gałąź</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout &lt;branch_name&gt; 
</code></pre></div></div> <p>Po zainicjowaniu repozytorium gita zwykle masz jedną istniejącą główną gałąź, z której wszystkie utworzone później gałęzie mogą być pochodne. Używaj ich, aby grupować pewne zmiany w funkcji, nad którą pracujesz.</p> <h1 id="workflow">Workflow</h1> <p>Polecam zapoznanie się z kilkoma pojęciami gita, takimi jak gałąź, rebase, merge i squash. Po tym możesz zacząć myśleć o tym, jak pracować i zarządzać swoją pracą jako programista. Jestem wielkim zwolennikiem normalizacji i standardów przepływów pracy. Znalazłem kilka metodologii, które są popularne obecnie podczas pracy z gitem.</p> <ul> <li>Gitflow</li> <li>Trunk</li> </ul> <p>Wybierz pierwszy, jeśli nie masz w swoim zestawie narzędzi CI/CD. Drugi jest świetny przy pracy z zintegrowanymi narzędziami do przeglądu kodu.</p>]]></content><author><name></name></author><category term="tutorials"/><category term="git"/><category term="gitExtensions"/><summary type="html"><![CDATA[Zastanawiałem się, co oznacza GIT. Oto co znalazłem: GIT to słowo będące skrótem od angielskiego słowa “get”, które zostało skrócone z “begetting”. Jest również niejawne odniesienie do nieślubnych potomków, a termin jest mniej więcej synonimem głupca, durnia, kretyna lub idioty. W społeczności open source znaczenie wyboru nazwy różni się. Oznacza to, że GIT jest dla idiotów, którzy nie wiedzą, co robią. Doskonałe narzędzie dla programisty. Zacznijmy od początku. Linus Torvalds zdecydował się na jego rozwój dla jądra Linuxa. Od 2005 roku pomaga programistom śledzić zmiany w kodzie. Dostępny we wszystkich systemach operacyjnych i używany przez użytkowników na całym świecie. Łatwo z nim zacząć, ale trudniej być w nim eksperte. Jest to system kontroli wersji. Możesz go pobrać ze tej strony i wypróbować samodzielnie. Podstawy Pobierz i zainstaluj gita na swoim systemie operacyjnym. Aby kontynuować, musisz otworzyć terminal. Po instalacji powinieneś być w stanie wykonać kilka poleceń gita. Utwórz nowy folder. Następnie otwórz terminal w nowym folderze. Utwórzmy repozytorium. Aby to osiągnąć, użyj poniższego polecenia. git init Narzędzia Istnieje kilka narzędzi GUI (ang. Graphic User Interface), które mogą pomóc Ci w rozpoczęciu pracy z Gitem. Jeśli nie jesteś fanem terminala, polecam GitExtensions Alternatywnie możesz użyć SourceTree jest on darmową alternatywą dla systemu Mac. Myślę, że jeśli używasz Linuxa, to równie dobrze możesz również korzystać z terminala. Commit Dobrze, jak dotąd! Teraz zróbmy kilka commitów. Stwórz plik HTML o następującej zawartości. &lt;h1&gt;Hello there&lt;/h1&gt; Teraz jesteś gotowy, do daleszej pracy z obszarem staging. Co to jest obszar staging - wyjaśnijmy to jako pudełko, do którego wkładasz rzeczy, a następnie używasz go jako migawki, aby zatwierdzić zmiany. Aby to zrobić, powinieneś określić ścieżkę do pliku w formacie pliku lub ścieżkę z jakimś wzorcem, np. .txt .xml, etc. Polecenie dodawania pliku hello.html w terminalu git add hello.html Możesz także dodać wszystkie pliki git add * Następnie, wpisując: git status Powinieneś zobaczyć wszystkie pliki, które zostały przez ciebie dodane do obszaru staging. Następnie możesz zatwierdzić hello.html w swoim lokalnym repozytorium. git commit -m "Add hello there file" commit - to polecenie, które zapisuje migawkę “pudełka”, które wcześniej dodaliśmy. Commits message standards Chcę wyjaśnić kilka standardów dotyczących wiadomości commitów i jak często powinieneś to robić. Słyszałem, że im częściej to robisz, tym lepiej. Nie ma ograniczenia, później zawsze możesz zmniejszyć liczbę commitów, używając funkcji squash. Zacznijmy od formy wiadomości commita. Jak to powinno się robić: Użyj zdaniowych trybów w linii tematu, np. “Naprawia uszkodzony link do Javadoc” Rozpocznij zdanie linii tematu wielką literą, np. “Dodaje, Usuwa, Naprawia, Wprowadza, Unikaj itp.” Nie kończ linii tematu kropką Zachowaj linie tematu do 50 znaków lub mniej, jeśli to możliwe Zawijaj linie w treści na 72 znaki lub mniej Wzmień związane z nim numery Jira na końcu komentarza commita, poprzedzone „Issue:” jak powyżej W treści wiadomości commita wyjaśnij, jak działały rzeczy przed tym commitem, co się zmieniło i jak teraz działają rzeczy Lubie także dodać jakiś rodzaj tagu przed wiadomością commita, oto kilka przykładów: – Feature – Bugfix – Cleanup – Hotfix Kiedy pracujesz nad zadaniem, dobrze jest dodać pewną liczbę zadań, takich jak #123, które odnoszą się do niektórych. Podsumowując, powinno to wyglądać tak: [FEATURE] #123 My super not quite long commit message. Here goes body messages where we describe what is going on. Keep it short as much as you can, but include all necessary details inside. Footer where summary and all other references should be applied for example: Those commits resolve issue #123 and #124 Git branches – tree of changes Commits can be added to branches. The branch is a set of commits that are separated from the main branch just like in a tree with leafs. To create a branch: git branch &lt;branch_name&gt; Aby zmienić gałąź git checkout &lt;branch_name&gt; Po zainicjowaniu repozytorium gita zwykle masz jedną istniejącą główną gałąź, z której wszystkie utworzone później gałęzie mogą być pochodne. Używaj ich, aby grupować pewne zmiany w funkcji, nad którą pracujesz. Workflow Polecam zapoznanie się z kilkoma pojęciami gita, takimi jak gałąź, rebase, merge i squash. Po tym możesz zacząć myśleć o tym, jak pracować i zarządzać swoją pracą jako programista. Jestem wielkim zwolennikiem normalizacji i standardów przepływów pracy. Znalazłem kilka metodologii, które są popularne obecnie podczas pracy z gitem. Gitflow Trunk Wybierz pierwszy, jeśli nie masz w swoim zestawie narzędzi CI/CD. Drugi jest świetny przy pracy z zintegrowanymi narzędziami do przeglądu kodu.]]></summary></entry></feed>
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://ziumper.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ziumper.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-10T16:07:49+00:00</updated><id>https://ziumper.github.io/feed.xml</id><title type="html">Ziumper</title><entry><title type="html">New n8n Tool!</title><link href="https://ziumper.github.io/blog/2025/n8n-automation-tool/" rel="alternate" type="text/html" title="New n8n Tool!"/><published>2025-10-09T00:00:00+00:00</published><updated>2025-10-09T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/n8n-automation-tool</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/n8n-automation-tool/"><![CDATA[<h2 id="what-is-n8n">What is n8n?</h2> <p>n8n is a process automation tool, with a particular focus on AI-related automations.</p> <p>Its key features include:</p> <ul> <li>has a community (open source) version. <a href="https://github.com/n8n-io/n8n">Repository link</a></li> <li>written in TypeScript</li> <li>strongly resembles blueprint programming from Unreal Engine</li> <li>offers many ready-made nodes and integrations</li> <li>very easy to use (drag and drop)</li> <li>allows you to combine processes into sub-processes</li> <li>if you know <a href="https://www.bpmn.org/">BPMN</a>, you’ll quickly understand how it works</li> <li>enables you to write code in the built-in editor using JavaScript and Python</li> </ul> <h2 id="working-with-n8n">Working with n8n</h2> <p>One of the most important things I realized while working with n8n was how crucial it is to ensure the correct structure of input and output data. It provides options for collecting, aggregating, and filtering data. Data processing is inherently iterative.</p> <p>Writing code is quite convenient – there are suggestions and autocompletion. I had to adjust a bit and use JavaScript blocks to ensure proper hydration and data structure.</p> <h2 id="what-can-you-use-it-for">What can you use it for?</h2> <p>I think it’s great for:</p> <ul> <li>orchestration and automation of processes</li> <li>automating repetitive tasks</li> <li>quick integration of popular tools</li> <li>data synchronization</li> </ul> <h2 id="example-use-case">Example use case</h2> <p>With n8n, I automated the process of fetching new entries from an RSS feed and saving them to Google Sheets. Thanks to the ready-made integrations, it was enough to connect a few nodes, set up a schedule, and everything works automatically.</p> <h2 id="drawbacks-and-limitations">Drawbacks and limitations</h2> <p>During my tests, I noticed that:</p> <ul> <li>some integrations require additional configuration or API keys,</li> <li>the web interface can sometimes be less responsive with large workflows,</li> <li>the documentation is extensive, but not always detailed for less popular nodes.</li> </ul> <h2 id="summary">Summary</h2> <p>n8n is a great tool for people who want to quickly implement automations without writing a lot of code. I especially recommend it to those who value flexibility and the ability to expand their own workflows.</p>]]></content><author><name></name></author><category term="n8n"/><summary type="html"><![CDATA[Recently, I had the opportunity to play with the hosted version of n8n and wanted to share my impressions.]]></summary></entry><entry><title type="html">Alternative IDE for PHP? Apache NetBeans, but not only!</title><link href="https://ziumper.github.io/blog/2025/alternative-ide-for-php/" rel="alternate" type="text/html" title="Alternative IDE for PHP? Apache NetBeans, but not only!"/><published>2025-10-08T00:00:00+00:00</published><updated>2025-10-08T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/alternative-ide-for-php</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/alternative-ide-for-php/"><![CDATA[<p>This post will be a bit longer because I want to present the pains and the journey this IDE has gone through from old software to its newer version. I also want to focus on the drawbacks and, in a sense, show what working in Apache NetBeans looks like today. When did I come across it? Why did I start using it only recently, and why does it seem that this IDE is coming back into favor? I will also try to present how to configure the IDE and my first impressions.</p> <h2 id="why-not-phpstorm">Why not PHPStorm?</h2> <p>It’s not that PHPStorm is bad. It’s very good! You could even say it’s too good. What I like in software is the feeling that I have control over what I’m doing. On a daily basis, developer tools can be a bit overwhelming. I include the following elements:</p> <ul> <li>high resource consumption</li> <li>the number of plugins and configuration options</li> <li>multitude of functionalities</li> </ul> <p>Before I even started a project, I had already disabled unnecessary plugins five times and restarted my laptop.</p> <p>In NetBeans, I just opened the project and started coding. It also offers most of the features I need, without significantly affecting my work efficiency.</p> <h2 id="the-long-road-of-apache-netbeans">The long road of Apache NetBeans</h2> <p>I remember back in college there was a program for Java – NetBeans. It was one of the first free and open-source editors that allowed comfortable work with Java projects. Over time, NetBeans came under the wing of the Apache Foundation, which gave it a second life. Today, NetBeans is not just Java – it supports PHP, JavaScript, HTML, C/C++, and many other technologies.</p> <p>For years, NetBeans was somewhat forgotten, especially in the PHP community, where PHPStorm, Visual Studio Code, or Sublime Text dominated. However, the latest versions of NetBeans have brought many improvements that make it worth giving it a try.</p> <h2 id="configuring-apache-netbeans">Configuring Apache NetBeans</h2> <p>Configuring NetBeans is relatively simple, although it requires a few steps:</p> <ol> <li><strong>Installation</strong> – NetBeans can be downloaded directly from the Apache website. The installer is available for all popular operating systems.</li> <li><strong>Plugins</strong> – After installation, it’s worth browsing the available plugins. NetBeans natively supports PHP, but you can add support for other languages.</li> <li><strong>PHP Configuration</strong> – In the settings, you need to specify the path to the PHP interpreter and configure tools such as Composer, PHPUnit, or PHP_CodeSniffer.</li> <li><strong>GIT Integration</strong> – NetBeans has built-in GIT support, allowing convenient work with repositories directly from the IDE.</li> <li><strong>Personalization</strong> – The ability to customize themes, keyboard shortcuts, and window layouts.</li> </ol> <h2 id="advantages-of-apache-netbeans">Advantages of Apache NetBeans</h2> <ul> <li><strong>Lightweight</strong> – NetBeans is noticeably less resource-intensive than PHPStorm. It runs smoothly even on older computers.</li> <li><strong>Open Source</strong> – Completely free, with no license restrictions.</li> <li><strong>Support for many languages</strong> – Besides PHP, it works great with Java, JavaScript, HTML, C/C++.</li> <li><strong>Built-in tools</strong> – Debugger, profiler, GIT integration, support for frameworks (e.g., Symfony, Laravel).</li> <li><strong>Stability</strong> – Rarely crashes, and updates are regular.</li> <li><strong>Simple configuration</strong> – You can start working quickly without installing dozens of extensions.</li> </ul> <h2 id="disadvantages-of-apache-netbeans">Disadvantages of Apache NetBeans</h2> <ul> <li><strong>Autocomplete</strong> – Works well but requires using PHPDoc. In PHPStorm, suggestions are more advanced and do not require such detailed documentation.</li> <li><strong>Fewer plugins</strong> – The NetBeans community is smaller than, for example, VSCode, so the number of available extensions is limited.</li> <li><strong>Appearance</strong> – The user interface is somewhat outdated compared to the competition.</li> <li><strong>No native Docker integration</strong> – You have to configure the environment manually, which can be inconvenient when working with containers.</li> <li><strong>Static code analysis</strong> – Works, but is not as extensive as in PHPStorm.</li> <li><strong>Fewer educational materials</strong> – It’s harder to find up-to-date tutorials and community support.</li> </ul> <h2 id="example-use-cases">Example use cases</h2> <p>NetBeans works great in small and medium PHP projects where you don’t need advanced refactoring tools or cloud integration. It’s ideal for people who value simplicity and stability while still wanting access to basic IDE features.</p> <h2 id="comparison-of-netbeans-with-other-ides">Comparison of NetBeans with other IDEs</h2> <table> <thead> <tr> <th>Feature / IDE</th> <th>NetBeans</th> <th>PHPStorm</th> <th>Visual Studio Code</th> <th>Sublime Text</th> </tr> </thead> <tbody> <tr> <td>Price</td> <td>Free (OSS)</td> <td>Paid</td> <td>Free</td> <td>Paid</td> </tr> <tr> <td>Performance</td> <td>Lightweight</td> <td>Resource-heavy</td> <td>Lightweight</td> <td>Very lightweight</td> </tr> <tr> <td>PHP support</td> <td>Very good</td> <td>Excellent</td> <td>Good (plugins)</td> <td>Good (plugins)</td> </tr> <tr> <td>Debugger</td> <td>Yes</td> <td>Yes</td> <td>Yes (plugins)</td> <td>No</td> </tr> <tr> <td>Refactoring</td> <td>Basic</td> <td>Advanced</td> <td>Basic</td> <td>Limited</td> </tr> <tr> <td>GIT integration</td> <td>Yes</td> <td>Yes</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>Docker</td> <td>Manual</td> <td>Built-in</td> <td>Plugins</td> <td>None</td> </tr> <tr> <td>Plugins</td> <td>Few</td> <td>Moderate</td> <td>Very many</td> <td>Many</td> </tr> <tr> <td>Customization</td> <td>Moderate</td> <td>Very high</td> <td>Very high</td> <td>High</td> </tr> <tr> <td>Community support</td> <td>Moderate</td> <td>Very high</td> <td>Very high</td> <td>High</td> </tr> <tr> <td>Updates</td> <td>Regular</td> <td>Regular</td> <td>Very frequent</td> <td>Less frequent</td> </tr> </tbody> </table> <h2 id="faq--frequently-asked-questions">FAQ – Frequently Asked Questions</h2> <p><strong>Is NetBeans suitable for large projects?</strong></p> <p>It is, although in very large projects it may be less efficient than PHPStorm. However, for most use cases, it is sufficient.</p> <p><strong>Does NetBeans support PHP frameworks?</strong></p> <p>Yes, it supports popular frameworks like Symfony, Laravel, Zend. However, this sometimes requires manual configuration.</p> <p><strong>How is the support for unit testing?</strong></p> <p>NetBeans allows integration with PHPUnit, and you can run tests directly from the IDE.</p> <p><strong>Can you use NetBeans on Linux/Mac/Windows?</strong></p> <p>Yes, NetBeans is cross-platform.</p> <p><strong>Does NetBeans support modern PHP standards?</strong></p> <p>Yes, it supports PHP 8.x, typing, and static code analysis tools.</p> <p><strong>How is the support for JavaScript and frontend?</strong></p> <p>NetBeans supports JavaScript, HTML, CSS, and frontend frameworks, although not as well as VSCode.</p> <h2 id="tips-and-tricks">Tips and tricks</h2> <ul> <li>It’s worth using the “Live Templates” feature for quickly inserting repetitive code snippets.</li> <li>You can configure your own keyboard shortcuts, which significantly speeds up work.</li> <li>NetBeans allows quick switching between files and classes (Ctrl+O, Ctrl+Shift+O).</li> <li>It’s worth regularly updating the IDE and plugins – this improves stability and security.</li> <li>If you work with Docker, you will probably need to configure the environment manually.</li> </ul> <h2 id="my-experience-and-recommendations">My experience and recommendations</h2> <p>After several months of working with NetBeans, I can say that it is a tool that lets you focus on code. It doesn’t distract with an excess of options, yet provides everything needed for daily work. If you’re looking for an alternative to heavy, paid IDEs – it’s worth trying NetBeans. I especially recommend it to those who value simplicity, stability, and open source.</p> <p>Do you have questions or your own experience with NetBeans? Share in the comments!</p>]]></content><author><name></name></author><category term="php"/><category term="ide"/><category term="netbeans"/><summary type="html"><![CDATA[Why not PHPStorm? Why not VIM or Visual Studio Code? For some time, I have been looking for a tool that is not overloaded with features, yet useful and powerful enough to make everyday work easier.]]></summary></entry><entry><title type="html">Comma at the end of function arguments in PHP (trailing comma)</title><link href="https://ziumper.github.io/blog/2025/trailing-comma-line/" rel="alternate" type="text/html" title="Comma at the end of function arguments in PHP (trailing comma)"/><published>2025-10-07T00:00:00+00:00</published><updated>2025-10-07T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/trailing-comma-line</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/trailing-comma-line/"><![CDATA[<p>Have you ever added a new argument to a function or constructor in PHP and forgotten to add a comma at the end of the previous line? It’s a common mistake that can lead to unnecessary fixes and frustration.</p> <p>Fortunately, since PHP 7.3 you can use the so-called trailing comma, i.e., a comma after the last argument in function calls, function declarations, and arrays. Thanks to this, when you add a new argument, you don’t have to remember to manually add a comma at the end of the previous line.</p> <h3 id="-example-without-trailing-comma">🛑 Example without trailing comma</h3> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">int</span> <span class="nv">$age</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>If you want to add another argument, you have to go back to the previous line and add a comma:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">int</span> <span class="nv">$age</span><span class="p">,</span> <span class="c1">// you have to add a comma</span>
        <span class="kt">string</span> <span class="nv">$email</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="-example-with-trailing-comma">✅ Example with trailing comma</h3> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">int</span> <span class="nv">$age</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now you can simply add another argument without worrying about commas:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">int</span> <span class="nv">$age</span><span class="p">,</span>
        <span class="kt">string</span> <span class="nv">$email</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="-since-when">📅 Since when?</h3> <p>Trailing comma in function and method argument lists is available since PHP 7.3. Previously, it was only available in arrays.</p> <h3 id="-summary">📝 Summary</h3> <p>Using the trailing comma:</p> <ul> <li>makes adding and removing arguments easier,</li> <li>reduces the risk of syntax errors,</li> <li>improves code readability in the long run.</li> </ul> <p>It’s worth using this feature, especially in larger projects!</p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[How the trailing comma in PHP makes a programmer's life easier when working with function and constructor arguments. ,]]></summary></entry><entry><title type="html">Using array_map() in a Programmer’s Daily Life. PHP Review #7</title><link href="https://ziumper.github.io/blog/2025/array-map-in-php/" rel="alternate" type="text/html" title="Using array_map() in a Programmer’s Daily Life. PHP Review #7"/><published>2025-09-30T00:00:00+00:00</published><updated>2025-09-30T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/array-map-in-php</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/array-map-in-php/"><![CDATA[<p>This article won’t be very long, but it will definitely be useful enough to serve as a good reference for future decisions. Is it worth using <code class="language-plaintext highlighter-rouge">array_map</code>? Definitely yes, if you need to perform some mutation operations on individual elements. For example, it can be:</p> <ul> <li>building subarrays from various values</li> </ul> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">php</span> <span class="o">&gt;</span> <span class="nb">var_dump</span><span class="p">(</span><span class="nb">array_map</span><span class="p">(</span><span class="k">static</span> <span class="k">fn</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'numeric_string'</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">],</span> <span class="p">[</span><span class="s1">'zero'</span><span class="p">,</span><span class="s1">'one'</span><span class="p">,</span><span class="s1">'two'</span><span class="p">,</span><span class="s1">'three'</span><span class="p">]));</span>
<span class="k">array</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=&gt;</span>
  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">"numeric_string"</span><span class="p">]</span><span class="o">=&gt;</span>
    <span class="nf">string</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="s2">"zero"</span>
  <span class="p">}</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=&gt;</span>
  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">"numeric_string"</span><span class="p">]</span><span class="o">=&gt;</span>
    <span class="nf">string</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="s2">"one"</span>
  <span class="p">}</span>
  <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=&gt;</span>
  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">"numeric_string"</span><span class="p">]</span><span class="o">=&gt;</span>
    <span class="nf">string</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="s2">"two"</span>
  <span class="p">}</span>
  <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=&gt;</span>
  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">"numeric_string"</span><span class="p">]</span><span class="o">=&gt;</span>
    <span class="nf">string</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="s2">"three"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>extracting values from another array and converting them to something else</li> </ul> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ids</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">static</span> <span class="k">fn</span> <span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="nv">$id</span><span class="p">],</span> <span class="nb">array_values</span><span class="p">(</span><span class="nv">$ids</span><span class="p">));</span>
</code></pre></div></div> <ul> <li>returning a new list of values with changed values, without modifying the old list</li> </ul> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$newArray</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">static</span> <span class="k">fn</span> <span class="p">(</span><span class="nv">$item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">'"'</span><span class="p">,</span><span class="s1">'""'</span><span class="p">,</span><span class="nv">$item</span><span class="p">),</span> <span class="nv">$oldArray</span><span class="p">);</span>
</code></pre></div></div> <p>You can multiply the examples, but the most useful ones can be found here: <a href="https://www.php.net/manual/en/function.array-map.php">link to PHP documentation</a></p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[This time I decided to take a look at the most common uses of array_map in my daily code.]]></summary></entry><entry><title type="html">Finally well written tests with composer loading structure</title><link href="https://ziumper.github.io/blog/2025/Composer-with-phpunit-setup/" rel="alternate" type="text/html" title="Finally well written tests with composer loading structure"/><published>2025-09-29T00:00:00+00:00</published><updated>2025-09-29T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Composer-with-phpunit-setup</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Composer-with-phpunit-setup/"><![CDATA[<p>I stumbled, crawled on ground while having not proper setup in my old project that I should work on. and then I figured how I should structure my loading properties</p> <p>here is what I had in my project</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"autoload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>but this way all may classes seems to be loaded inside composer autload map. I knew there must be better way to solve that. Here is what I figured out</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"autoload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src/"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"autoload-dev"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Durring that time I got some really serious issues, I couldn’t declare Traits in my tests folder and it was quite hard feeling to copy paste all that code, then I moved forward with next version.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"autoload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src/"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"exclude-from-classmap"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"tests/"</span><span class="p">]</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"autoload-dev"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\Tests\\Unit\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/unit"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\Tests\\Integration\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/integration"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>So how this works is:</p> <ul> <li>all declarations are stored inside src folder even those used for tests. Base test cases traits, data providers too.</li> <li>integration and tests are using src references and are giving me some nice working cases.</li> <li>exclude from classmap is a guard which stands in front of my testing code and doesn’t allow it to get into production loading flow.</li> </ul> <p>I think this way I can start building something… that makes sense!</p>]]></content><author><name></name></author><category term="php"/><category term="composer"/><category term="phpunit"/><summary type="html"><![CDATA[This post explains how to organize composer project with phpunit dependecies to not load your test cases into classmap and explaing learnings I figured out durring my workflow]]></summary></entry><entry><title type="html">How integrate GitHub Copilot to generate commit messages automatically?</title><link href="https://ziumper.github.io/blog/2025/Add-github-copilot-auto-commit-message-generation/" rel="alternate" type="text/html" title="How integrate GitHub Copilot to generate commit messages automatically?"/><published>2025-09-24T00:00:00+00:00</published><updated>2025-09-24T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Add-github-copilot-auto-commit-message-generation</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Add-github-copilot-auto-commit-message-generation/"><![CDATA[<p>The most important part of working in a team is communication. And one of the most important ways to communicate with your team is through commit messages. A good commit message should be clear, concise, and informative. It should describe what changes were made and why they were made. However, writing good commit messages can be time-consuming and tedious. That’s where GitHub Copilot comes in. GitHub Copilot is an AI-powered code completion tool that can help you write code faster and more efficiently. But did you know that GitHub Copilot can also help you write better commit messages? In this post, we’ll show you how to use GitHub Copilot to generate commit messages automatically.</p> <h2 id="step-1-add-github-copilot-template-to-your-repository">Step 1: Add GitHub Copilot template to your repository</h2> <p>To get started, you need to add a GitHub Copilot template to your repository. This template will provide GitHub Copilot with the necessary context to generate commit messages. You can create a new file in your repository called <code class="language-plaintext highlighter-rouge">.github/git-commit-instructions.md</code> and add the following content:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Git Commit Instructions

When making a commit, please follow these guidelines to ensure clarity and consistency in our commit history.
Provide description in the commit message.
* Describe the changes made in the commit and intended impact on the codebase in new lines.
* Make sure to include:
    * What was changed (e.g., added feature, fixed bug, updated documentation).
    * Why the change was necessary (e.g., to improve performance, fix an issue, enhance user experience).
    * Any relevant details that help understand the context of the change.
* Elaborate on the reasoning behind the changes and any relevant context that may help reviewers understand the
commit better.
</code></pre></div></div> <p>This template provides guidelines for writing good commit messages and will help GitHub Copilot generate better commit messages.</p> <h2 id="step-2-use-github-copilot-to-generate-commit-messages">Step 2: Use GitHub Copilot to generate commit messages</h2> <p>Once you have added the template to your repository, you can start using GitHub Copilot to generate commit messages. When you are ready to make a commit, you can use one of the following IDE editors that support GitHub Copilot:</p> <ul> <li>Visual Studio Code</li> <li>JetBrains IDEs (e.g., IntelliJ IDEA, PyCharm, WebStorm)</li> <li>Neovim</li> </ul> <p>When you click the commit message editor button, GitHub Copilot will suggest a commit message based on the changes you have made and the guidelines provided in the template. GitHub Copilot will automatically suggest a commit message based on the changes you have made and the guidelines provided in the template.</p> <h2 id="conclusion">Conclusion</h2> <p>Using GitHub Copilot to generate commit messages automatically can help you write better commit messages and improve your productivity. By adding a GitHub Copilot template to your repository and using one of the supported IDE editors that support GitHub Copilot, you can easily generate clear and informative commit messages. Give it a try and see how it can improve your workflow! I’m already using it and I love it! 😊</p>]]></content><author><name></name></author><category term="git"/><category term="github"/><category term="productivity"/><category term="copilot"/><summary type="html"><![CDATA[This post explains how to use GitHub Copilot to generate commit messages automatically, improving productivity and ensuring clear commit history.]]></summary></entry><entry><title type="html">🤓 Why do PHP developers love the empty line at the end of the file? PHP Review #6</title><link href="https://ziumper.github.io/blog/2025/New-line-at-the-end-of-php-file/" rel="alternate" type="text/html" title="🤓 Why do PHP developers love the empty line at the end of the file? PHP Review #6"/><published>2025-09-23T00:00:00+00:00</published><updated>2025-09-23T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/New-line-at-the-end-of-php-file</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/New-line-at-the-end-of-php-file/"><![CDATA[<h1 id="why-do-we-add-an-empty-line-at-the-end-of-php-and-twig-files-">Why do we add an empty line at the end of PHP and Twig files? 🤔</h1> <p>Have you ever wondered why developers stubbornly add an empty line at the end of files? Is it some secret tradition? Or maybe a way to fight boredom? The answer is more technical, but there’s a bit of history and… a touch of absurdity! 😄</p> <h2 id="technical-reasons-️">Technical reasons 🛠️</h2> <h3 id="1-posix-standard-">1. <strong>POSIX Standard</strong> 🧑‍💻</h3> <p>Imagine POSIX as a strict teacher in the school of programmers. It says: “Every text file must end with a new line (<code class="language-plaintext highlighter-rouge">\n</code>). End of discussion!” Why? Because tools like <code class="language-plaintext highlighter-rouge">cat</code>, <code class="language-plaintext highlighter-rouge">diff</code>, or <code class="language-plaintext highlighter-rouge">git</code> love order. If a file doesn’t end with a new line, they might get upset and show weird results, e.g., merging the last line of one file with the first of another. It’s like two sentences in a book blending into one – chaos! 📚</p> <p>POSIX (Portable Operating System Interface) was created to unify the behavior of operating systems. Thanks to this, programs can work predictably on different computers. And the empty line at the end of a file is a small gesture towards order and compatibility. ✨</p> <h3 id="2-avoiding-errors-in-php-">2. <strong>Avoiding errors in PHP</strong> 🐘</h3> <p>In PHP, if anything appears after the closing <code class="language-plaintext highlighter-rouge">?&gt;</code> tag – even an innocent space or new line – the server might get angry and send HTTP headers at the wrong moment. The result? The page looks weird, and you spend half a day looking for the bug. The empty line is like a programmer’s lucky charm! 🍀</p> <h3 id="3-better-readability-">3. <strong>Better readability</strong> 👀</h3> <p>An empty line at the end of a file is like a period at the end of a sentence. Thanks to it, the code looks neat, and changes in version control systems are clearer. Git likes it when everything is in its place! 😎</p> <h3 id="4-psr-2-and-psr-12-standards-">4. <strong>PSR-2 and PSR-12 Standards</strong> 📏</h3> <p>And what does PHP-FIG, the programmers’ council of elders, say? They invented the PSR-2 standard, and then its younger, more demanding brother PSR-12. Both clearly state: there must be a new line at the end of the file! This way, your code complies with the guidelines, and your linter doesn’t have a panic attack. It’s a bit like following health and safety rules in code – nobody wants to get a ticket from the reviewer! 🚨</p> <h2 id="historical-reasons-">Historical reasons 🏺</h2> <p>In the past, text editors were moody. The lack of an empty line could cause errors during compilation or code interpretation. So developers learned to add this magic line to avoid surprises. It’s a bit like wearing socks with sandals – not always needed and considered a fashion crime, but sometimes it saves the day! 🧦</p> <h2 id="twig-️">Twig 🕸️</h2> <p>In Twig files, the empty line helps avoid unwanted characters in the generated HTML. Thanks to this, your page doesn’t look like a patchwork of random spaces and enters. And version control systems? They’re grateful too! 🙏</p> <h2 id="summary-">Summary 🎉</h2> <p>Adding an empty line at the end of PHP and Twig files is not just a technical necessity, but also a part of programming culture. It protects against errors, keeps things tidy, and makes tools happy. So next time you add an empty line, you can feel like a code hero! 🦸‍♂️</p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[This post explains why developers add an empty line at the end of PHP and Twig files, presenting technical, historical, and humorous reasons for this practice. You'll learn how it affects compatibility, code readability, and helps avoid errors.]]></summary></entry><entry><title type="html">🧹 How to Remove Recipes from the `extra` Section in composer.json</title><link href="https://ziumper.github.io/blog/2025/Composer-recipes-fix/" rel="alternate" type="text/html" title="🧹 How to Remove Recipes from the `extra` Section in composer.json"/><published>2025-09-22T00:00:00+00:00</published><updated>2025-09-22T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Composer-recipes-fix</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Composer-recipes-fix/"><![CDATA[<p>When working with PHP projects, especially those using Symfony, you might encounter the <code class="language-plaintext highlighter-rouge">extra</code> section in your <code class="language-plaintext highlighter-rouge">composer.json</code>file. This section often contains recipes that help configure your project. However, over time, you may want to remove or clean up these recipes.</p> <h2 id="what-is-the-extra-section-in-composerjson">What is the <code class="language-plaintext highlighter-rouge">extra</code> Section in composer.json?</h2> <p>The <code class="language-plaintext highlighter-rouge">extra</code> section is a special place in your <code class="language-plaintext highlighter-rouge">composer.json</code> file for custom configuration.<br/> It is used by Composer plugins, frameworks (like Symfony), and scripts to store additional settings.</p> <h3 id="example">Example</h3> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"extra"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"symfony"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"allow-contrib"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"recipes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"symfony/console"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"ref"</span><span class="p">:</span><span class="w"> </span><span class="s2">"abcdef"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="for-what-i-used-the-extra-section">For what I used the <code class="language-plaintext highlighter-rouge">extra</code> section?</h2> <p>Well I used it to store Symfony Flex recipes. Symfony Flex is a Composer plugin that helps manage Symfony applications by automating the installation and configuration of packages. When you install a package that has a recipe, Symfony Flex adds configuration files and settings to your project automatically. You may prefer to remove some of these recipes if they are no longer needed or if you want to customize your setup. In my case it was docker setup that I didn’t need.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"extra"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"symfony"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"allow-contrib"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"docker"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="symfony-flex">Symfony flex</h2> <p>The Flex recipes make a few assumptions about your project’s directory structure. Some of these assumptions can be customized by adding a key under the extra section of your composer.json file. For example, to tell Flex to copy any PHP classes into src/App instead of src:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"..."</span><span class="p">:</span><span class="w"> </span><span class="s2">"..."</span><span class="p">,</span><span class="w">

  </span><span class="nl">"extra"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"src-dir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src/App"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="troubleshooting">Troubleshooting</h2> <p>If you encounter issues after removing recipes, try the following steps:</p> <ul> <li>Run <code class="language-plaintext highlighter-rouge">composer install</code> to refresh your dependencies.</li> <li>Check for missing configuration files or environment variables.</li> <li>Review Symfony documentation for any manual steps required after recipe removal.</li> </ul> <h2 id="additional-resources">Additional Resources</h2> <ul> <li><a href="https://symfony.com/doc/current/setup/flex.html">Symfony Recipes Documentation</a></li> <li><a href="https://getcomposer.org/doc/04-schema.md#extra">Composer Extra Section</a></li> </ul>]]></content><author><name></name></author><category term="php"/><category term="composer"/><category term="symfony"/><category term="symfony-flex"/><summary type="html"><![CDATA[A quick guide to understanding and cleaning up the `extra` section in composer.json, especially Symfony recipes.]]></summary></entry><entry><title type="html">🧐 Floats and the Mystery of -0.0 PHP Review #5</title><link href="https://ziumper.github.io/blog/2025/Floats-and-mystery-of-zero/" rel="alternate" type="text/html" title="🧐 Floats and the Mystery of -0.0 PHP Review #5"/><published>2025-09-18T00:00:00+00:00</published><updated>2025-09-18T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Floats-and-mystery-of-zero</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Floats-and-mystery-of-zero/"><![CDATA[<p>Yes, really. <code class="language-plaintext highlighter-rouge">-0.0</code> and <code class="language-plaintext highlighter-rouge">0.0</code> are two different byte representations according to the <a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754 standard</a> – but in practice… PHP treats them as the same.</p> <p>I had this code:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getPercentage</span><span class="p">():</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="c1">// epsilon to avoid division by zero</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">8</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nb">round</span><span class="p">((</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">totalCartPrice</span> <span class="o">/</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div> <p>And I started wondering:</p> <ul> <li>Can I just compare <code class="language-plaintext highlighter-rouge">$this-&gt;limitPrice == 0.0</code>?</li> <li>What if <code class="language-plaintext highlighter-rouge">limitPrice</code> = <code class="language-plaintext highlighter-rouge">-0.0</code>? 🤯</li> </ul> <hr/> <h2 id="-analysis">🔬 Analysis</h2> <h3 id="1️⃣-ieee-754-and--00">1️⃣ IEEE 754 and -0.0</h3> <p>In the floating point standard, there is <strong>positive zero (0.0)</strong> and <strong>negative zero (-0.0)</strong>.<br/> At the byte level, they are two different values:</p> <ul> <li><code class="language-plaintext highlighter-rouge">0.0</code> → <code class="language-plaintext highlighter-rouge">0x0000000000000000</code></li> <li><code class="language-plaintext highlighter-rouge">-0.0</code> → <code class="language-plaintext highlighter-rouge">0x8000000000000000</code></li> </ul> <p>So yes, binary-wise, they are not the same.</p> <hr/> <h3 id="2️⃣-how-php-handles-it">2️⃣ How PHP Handles It</h3> <p>Compare this:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="mf">0.0</span> <span class="o">==</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">);</span>   <span class="c1">// true</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="mf">0.0</span> <span class="o">===</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">);</span>  <span class="c1">// true</span>
</code></pre></div></div> <p>✅ PHP treats these two values as equal both with loose (<code class="language-plaintext highlighter-rouge">==</code>) and strict (<code class="language-plaintext highlighter-rouge">===</code>) comparison.</p> <p>But watch this:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="mf">0.0</span><span class="p">);</span>  <span class="c1">// float(INF)</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">);</span> <span class="c1">// float(-INF)</span>
</code></pre></div></div> <p>➡️ The difference shows up when dividing – the sign of zero affects the result (<code class="language-plaintext highlighter-rouge">+∞</code> vs <code class="language-plaintext highlighter-rouge">-∞</code>).</p> <hr/> <h3 id="3️⃣-does-it-matter-in-my-case">3️⃣ Does It Matter in My Case?</h3> <p>In my code, <code class="language-plaintext highlighter-rouge">limitPrice</code> has <strong>at most 4 decimal places</strong>, comes from the database or simple operations.<br/> I don’t have strange negative zeros coming from complex math.<br/> So I can safely write:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span> <span class="o">==</span> <span class="mf">0.0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>And everything works just fine.<br/> Epsilon (<code class="language-plaintext highlighter-rouge">1e-8</code>) is not needed here, because I don’t have rounding errors at the 17th decimal place.</p> <hr/> <h2 id="-bonus-how-to-detect--00-for-the-nerds">🛠 Bonus: How to Detect -0.0 (For the Nerds)</h2> <p>If for some reason you <strong>must know</strong> whether it’s -0.0, here’s the trick:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">isNegativeZero</span><span class="p">(</span><span class="kt">float</span> <span class="nv">$x</span><span class="p">):</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$x</span> <span class="o">===</span> <span class="mf">0.0</span> <span class="o">&amp;&amp;</span> <span class="mi">1</span> <span class="o">/</span> <span class="nv">$x</span> <span class="o">===</span> <span class="o">-</span><span class="no">INF</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nf">isNegativeZero</span><span class="p">(</span><span class="mf">0.0</span><span class="p">));</span>  <span class="c1">// false</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nf">isNegativeZero</span><span class="p">(</span><span class="o">-</span><span class="mf">0.0</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div> <p>Yes, you actually divide by zero to detect it. 🧪</p> <hr/> <h2 id="-conclusion">✅ Conclusion</h2> <ul> <li>Yes, -0.0 and 0.0 are different bytes.</li> <li>PHP treats them as equal (<code class="language-plaintext highlighter-rouge">==</code>, <code class="language-plaintext highlighter-rouge">===</code>).</li> <li>You can safely write <code class="language-plaintext highlighter-rouge">== 0.0</code> in comparisons.</li> <li>Only division by 0.0 vs -0.0 returns different infinities (INF vs -INF) – so when dividing, you may want to use <code class="language-plaintext highlighter-rouge">abs()</code>.</li> </ul> <hr/> <h2 id="-summary">🎉 Summary</h2> <p>I managed to simplify my code and <strong>instead of epsilons</strong> I just have:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getPercentage</span><span class="p">():</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span> <span class="o">?</span> <span class="nb">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nb">round</span><span class="p">((</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">totalCartPrice</span> <span class="o">/</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">))</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Cleaner, simpler, and still safe.<br/> And the fact that -0.0 exists – well, that’s a great trivial fact to impress your fellow developers over coffee. ☕️😎</p> <p>PS: If you need an epsilon, it’s better to use this constant:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kc">PHP_FLOAT_EPSILON</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[Did you know that PHP has negative zero? This post is a journey through the world of negative zeros, division by infinity, and why in your code you can still safely write `== 0.0`.]]></summary></entry><entry><title type="html">PhpUnit willReturnMap - PHP Review #4</title><link href="https://ziumper.github.io/blog/2025/PHPUnit-will-return-map-trap/" rel="alternate" type="text/html" title="PhpUnit willReturnMap - PHP Review #4"/><published>2025-09-17T00:00:00+00:00</published><updated>2025-09-17T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/PHPUnit-will-return-map-trap</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/PHPUnit-will-return-map-trap/"><![CDATA[<p><strong>Description:</strong><br/> A story about how a single little <code class="language-plaintext highlighter-rouge">null</code> cost me 30 minutes of debugging tests,<br/> and then I found the truth in the documentation… which is completely silent about it. 🙃</p> <hr/> <h2 id="-the-problem">🧐 The Problem</h2> <p>Let’s assume we have a method like this:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyService</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">doStuff</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$key</span><span class="p">,</span> <span class="kt">?string</span> <span class="nv">$flag</span> <span class="o">=</span> <span class="kc">null</span><span class="p">):</span> <span class="kt">string</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">"Result: "</span> <span class="mf">.</span> <span class="nv">$key</span> <span class="mf">.</span> <span class="p">(</span><span class="nv">$flag</span> <span class="o">?</span> <span class="s2">" (</span><span class="nv">$flag</span><span class="s2">)"</span> <span class="o">:</span> <span class="s2">""</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>And you want to test a class that uses <code class="language-plaintext highlighter-rouge">MyService</code> – of course, with a mock.<br/> You use <strong><code class="language-plaintext highlighter-rouge">willReturnMap</code></strong>, because it’s elegant and works for multiple sets of arguments.</p> <p>Sounds simple?<br/> Let’s look at the test:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$mock</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">createMock</span><span class="p">(</span><span class="nc">MyService</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>

<span class="nv">$mock</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(</span><span class="s1">'doStuff'</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="nf">willReturnMap</span><span class="p">([</span>
        <span class="p">[</span><span class="s1">'foo'</span><span class="p">,</span> <span class="s1">'Result: foo (bar)'</span><span class="p">],</span>
        <span class="p">[</span><span class="s1">'baz'</span><span class="p">,</span> <span class="s1">'Result: baz'</span><span class="p">],</span>
    <span class="p">]);</span>
</code></pre></div></div> <p>Looks good, right?<br/> <strong>NOPE.</strong> 😅</p> <hr/> <h2 id="-what-happens">💥 What happens?</h2> <p>If you don’t pass exactly as many arguments as the method takes, PHPUnit will say:</p> <blockquote> <p>“I have no idea what you mean” 🤷‍♂️<br/> and return <code class="language-plaintext highlighter-rouge">null</code>.</p> </blockquote> <p>So when your production code calls:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$service</span><span class="o">-&gt;</span><span class="nf">doStuff</span><span class="p">(</span><span class="s1">'baz'</span><span class="p">);</span>
</code></pre></div></div> <p>the mock will say:</p> <blockquote> <p>“Sorry, I don’t know that map.”</p> </blockquote> <p>And your test explodes. 💣</p> <hr/> <h2 id="-why-does-this-happen">🤯 Why does this happen?</h2> <p>Because <code class="language-plaintext highlighter-rouge">willReturnMap</code> matches arguments <strong>by position</strong>, exactly 1:1.<br/> A default <code class="language-plaintext highlighter-rouge">null</code> argument isn’t magically “guessed”.<br/> You need to explicitly put it in the array.</p> <hr/> <h2 id="-the-correct-solution">✅ The Correct Solution</h2> <p>You need to <strong>match the exact number of arguments</strong>, even if they’re default:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$mock</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(</span><span class="s1">'doStuff'</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="nf">willReturnMap</span><span class="p">([</span>
        <span class="p">[</span><span class="s1">'foo'</span><span class="p">,</span> <span class="s1">'bar'</span><span class="p">,</span> <span class="s1">'Result: foo (bar)'</span><span class="p">],</span>
        <span class="p">[</span><span class="s1">'baz'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="s1">'Result: baz'</span><span class="p">],</span> <span class="c1">// &lt;--- null is required!</span>
    <span class="p">]);</span>
</code></pre></div></div> <p>Yeah, I know – seems obvious, but sometimes you hope for a bit of magic. 🪄<br/> Sadly – PHPUnit offers no magic here.</p> <hr/> <h2 id="-the-moral-of-the-story">📝 The Moral of the Story</h2> <ul> <li><code class="language-plaintext highlighter-rouge">willReturnMap</code> is great, but it’s <strong>very literal</strong>.</li> <li>If the method takes 2 arguments – your map must have 2 arguments.</li> <li>Even if the second argument defaults to <code class="language-plaintext highlighter-rouge">null</code>.</li> <li>PHPUnit isn’t a fortune teller – it won’t guess you meant the default. 😅</li> </ul> <hr/> <h2 id="-takeaways">🎉 Takeaways</h2> <p>After this discovery, my tests stopped exploding.<br/> Knowing that <strong>you have to explicitly provide every argument in the map</strong> saved me hours of debugging.<br/> Now I know – with mocks, it’s better to provide one argument too many than one too few.</p> <blockquote> <p>🧠 <strong>Key Point:</strong> <code class="language-plaintext highlighter-rouge">willReturnMap</code> ≠ flexible matching.<br/> It’s a <strong>strict argument map</strong> – provide everything or don’t complain when your tests burn. 🔥</p> </blockquote> <hr/> <p>✍️ <strong>PS:</strong> If anyone finds a mention of this case in the PHPUnit docs – let me know.<br/> I couldn’t find it, and I searched half the internet. 🙈</p> <p><a href="https://docs.phpunit.de/en/12.3/test-doubles.html#willreturnmap">Link to documentation</a></p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[🐛 "PhpUnit, willReturnMap and default arguments – how to fall into a subtle trap 🪤"]]></summary></entry></feed>
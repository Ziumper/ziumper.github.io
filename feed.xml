<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://ziumper.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ziumper.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-06T19:46:30+00:00</updated><id>https://ziumper.github.io/feed.xml</id><title type="html">Ziumper</title><entry><title type="html">Testing Error Handling in Godot Using GUT</title><link href="https://ziumper.github.io/blog/2025/testing-error-handling-in-gdscript/" rel="alternate" type="text/html" title="Testing Error Handling in Godot Using GUT"/><published>2025-03-06T00:00:00+00:00</published><updated>2025-03-06T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/testing-error-handling-in-gdscript</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/testing-error-handling-in-gdscript/"><![CDATA[<p>Testing is certainly not an easy task, especially when it comes to writing tests in game engines. However, we can take advantage of existing solutions. One such solution is <a href="https://github.com/bitwes/Gut">GUT</a>, which stands for Godot Unit Tests.</p> <h2 id="problem-definition">Problem Definition</h2> <p>Recently, I encountered the following issue in my project. I wanted to test error handling in my game when loading a saved game state.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Reads the data from file and returns as a dictionary
</span><span class="n">func</span> <span class="nf">load_data</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Dictionary</span><span class="p">:</span>
    <span class="n">var</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">var</span> <span class="n">path</span> <span class="o">=</span> <span class="nf">get_saved_game_path</span><span class="p">()</span>
    <span class="n">var</span> <span class="nb">file</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="p">.</span><span class="nf">open_encrypted_with_pass</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">FileAccess</span><span class="p">.</span><span class="n">READ</span><span class="p">,</span> <span class="n">_password</span><span class="p">)</span>
<span class="bp">...</span>
</code></pre></div></div> <p>I first looked into the documentation for <code class="language-plaintext highlighter-rouge">FileAccess.get_open_error</code>. This method returns an <code class="language-plaintext highlighter-rouge">enum</code> type <code class="language-plaintext highlighter-rouge">Error</code>. Checking the returned code was a good lead, but first, I needed to write a test:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">func</span> <span class="nf">test_load_if_game_save_doesnt_exist</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">void</span><span class="p">:</span>
    <span class="n">var</span> <span class="n">save</span> <span class="o">=</span> <span class="n">GameSave</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="sh">"</span><span class="s">TestingGameSave.save</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">12345</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">var</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dictionary</span> <span class="o">=</span> <span class="n">save</span><span class="p">.</span><span class="nf">load_data</span><span class="p">()</span>
    <span class="nf">assert_not_null</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div> <p>This is a good starting point. I first check if there’s something to work with and whether the data is not null.<br/> I had a few ideas on how it should look. Mainly:</p> <ol> <li> <p><strong>Don’t return errors</strong><br/> I didn’t want to throw exceptions and handle them outside the function. Instead, I aimed to handle errors where they occur.<br/> In GDScript, you cannot use <code class="language-plaintext highlighter-rouge">try-catch</code> or throw exceptions, which is also not a good practice. I don’t like shifting responsibility onto others. I prefer solving problems where they actually occur, as that is the most likely place to resolve them effectively.</p> </li> <li> <p><strong>Avoid returning null values</strong><br/> This is a common issue that I call “null propagation.” The problem is that every time we return null, a small part of our humanity dies. And with every subsequent function call, we must first check whether the object is null before calling a method on it—otherwise, we risk a <code class="language-plaintext highlighter-rouge">NullPointerException</code>, which may crash the game mid-session.<br/> So, we must eliminate null values! This issue is discussed in more detail <a href="https://hackernoon.com/null-the-billion-dollar-mistake-8t5z32d6">here</a>.</p> </li> <li> <p><strong>Don’t lump everything together</strong><br/> Returning errors or objects could trigger an avalanche of error handling (see point 1). The simpler, the better—this makes it easier to work with in the future.</p> </li> </ol> <h2 id="solution">Solution</h2> <p>I implemented the following code:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Reads the data from file and returns as a dictionary
</span><span class="n">func</span> <span class="nf">load_data</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Dictionary</span><span class="p">:</span>
    <span class="n">var</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">var</span> <span class="n">path</span> <span class="o">=</span> <span class="nf">get_saved_game_path</span><span class="p">()</span>
    <span class="n">var</span> <span class="nb">file</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="p">.</span><span class="nf">open_encrypted_with_pass</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">FileAccess</span><span class="p">.</span><span class="n">READ</span><span class="p">,</span> <span class="n">_password</span><span class="p">)</span>
    <span class="n">var</span> <span class="n">error</span><span class="p">:</span> <span class="n">Error</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="p">.</span><span class="nf">get_open_error</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">error</span> <span class="o">==</span> <span class="n">OK</span><span class="p">:</span>
        <span class="nf">push_error</span><span class="p">(</span><span class="sh">'</span><span class="s">There was an error while trying to open a file with the following error code: </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">var_to_str</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">data</span>
</code></pre></div></div> <p>This looks pretty good, but I was still not satisfied.<br/> I wanted to test a scenario where an error occurs while ensuring that nothing gets printed to the console during the test execution—only when the problem actually arises. Additionally, I needed to handle the error code returned by Godot.<br/> All these factors combined posed a challenge, especially for a relatively young scripting language like GDScript.<br/> Here’s what I did:</p> <ul> <li>I used the <a href="https://gut.readthedocs.io/en/latest/Stubbing.html#to-call-callable">stub method from GUT</a>.</li> <li>Unfortunately, it’s not possible to override the built-in <code class="language-plaintext highlighter-rouge">push_error</code> function. So, I wrote my own <code class="language-plaintext highlighter-rouge">print_error</code> method and called the original function inside it. Then, I replaced it with an anonymous function that set a flag to check whether the method was called correctly.</li> <li>Ideally, GUT’s <a href="https://gut.readthedocs.io/en/latest/Stubbing.html#to-call-callable">stub</a> would allow checking whether a method was actually invoked. For now, I had to rely on a global variable.</li> <li>Additionally, I had to use a <a href="https://gut.readthedocs.io/en/latest/Partial-Doubles.html">partial double</a> because stubbing methods on <code class="language-plaintext highlighter-rouge">double</code> class objects requires it.</li> </ul> <p>Here’s the complete code:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#game_save.gd
#wrapper for testing errors
</span><span class="n">func</span> <span class="nf">print_error</span><span class="p">(</span><span class="n">msg</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">void</span><span class="p">:</span>
    <span class="nf">push_error</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>

<span class="c1">## Reads the data from file and returns as a dictionary
</span><span class="n">func</span> <span class="nf">load_data</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Dictionary</span><span class="p">:</span>
    <span class="n">var</span> <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">var</span> <span class="n">path</span> <span class="o">=</span> <span class="nf">get_saved_game_path</span><span class="p">()</span>
    <span class="n">var</span> <span class="nb">file</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="p">.</span><span class="nf">open_encrypted_with_pass</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">FileAccess</span><span class="p">.</span><span class="n">READ</span><span class="p">,</span> <span class="n">_password</span><span class="p">)</span>
    <span class="n">var</span> <span class="n">error</span><span class="p">:</span> <span class="n">Error</span> <span class="o">=</span> <span class="n">FileAccess</span><span class="p">.</span><span class="nf">get_open_error</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">error</span> <span class="o">==</span> <span class="n">OK</span><span class="p">:</span>
        <span class="nf">print_error</span><span class="p">(</span><span class="sh">'</span><span class="s">There was an error while trying to open a file with the following error code: </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">var_to_str</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">data</span>

<span class="c1">#test_game_save.gd
</span><span class="n">extends</span> <span class="n">GutTest</span>

<span class="n">var</span> <span class="n">_error_called</span> <span class="o">=</span> <span class="n">false</span>

<span class="n">func</span> <span class="nf">test_load_if_game_save_doesnt_exist</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">void</span><span class="p">:</span>
    <span class="c1">#arrange
</span>    <span class="n">var</span> <span class="n">save</span> <span class="o">=</span> <span class="nf">partial_double</span><span class="p">(</span><span class="n">GameSave</span><span class="p">).</span><span class="nf">new</span><span class="p">(</span><span class="sh">"</span><span class="s">TestingGameSave.save</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">12345</span><span class="sh">"</span><span class="p">)</span>

    <span class="nf">stub</span><span class="p">(</span><span class="n">save</span><span class="p">,</span><span class="sh">"</span><span class="s">print_error</span><span class="sh">"</span><span class="p">).</span><span class="nf">to_call</span><span class="p">(</span><span class="nf">func</span><span class="p">(</span><span class="n">_msg</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">void</span><span class="p">:</span>
        <span class="n">_error_called</span> <span class="o">=</span> <span class="n">true</span>
    <span class="p">)</span>

    <span class="c1">#act
</span>    <span class="n">var</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dictionary</span> <span class="o">=</span> <span class="n">save</span><span class="p">.</span><span class="nf">load_data</span><span class="p">()</span>

    <span class="c1">#assert
</span>    <span class="nf">assert_true</span><span class="p">(</span><span class="n">_error_called</span><span class="p">)</span>
    <span class="nf">assert_not_null</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div> <h2 id="solution-details">Solution Details</h2> <p>One important thing to note is that the anonymous function must update <code class="language-plaintext highlighter-rouge">_error_called</code> inside the test class instance.</p> <p>There is a specific issue in GDScript:<br/> If I wanted to modify a variable like this:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">func</span> <span class="nf">test_load_if_game_save_doesnt_exist</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">void</span><span class="p">:</span>
    <span class="c1">#arrange
</span>    <span class="n">var</span> <span class="n">save</span> <span class="o">=</span> <span class="nf">partial_double</span><span class="p">(</span><span class="n">GameSave</span><span class="p">).</span><span class="nf">new</span><span class="p">(</span><span class="sh">"</span><span class="s">TestingGameSave.save</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">12345</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">var</span> <span class="n">error_called</span> <span class="o">=</span> <span class="n">true</span>

    <span class="nf">stub</span><span class="p">(</span><span class="n">save</span><span class="p">,</span><span class="sh">"</span><span class="s">print_error</span><span class="sh">"</span><span class="p">).</span><span class="nf">to_call</span><span class="p">(</span><span class="nf">func</span><span class="p">(</span><span class="n">_msg</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">void</span><span class="p">:</span>
        <span class="n">error_called</span> <span class="o">=</span> <span class="n">true</span>
    <span class="p">)</span>

    <span class="c1">#act
</span>    <span class="n">var</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dictionary</span> <span class="o">=</span> <span class="n">save</span><span class="p">.</span><span class="nf">load_data</span><span class="p">()</span>

    <span class="c1">#assert
</span>    <span class="nf">assert_true</span><span class="p">(</span><span class="n">error_called</span><span class="p">)</span>
    <span class="nf">assert_not_null</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div> <p>The test would fail because anonymous functions in GDScript capture variables <strong>by value</strong>, not by reference.<br/> To make it work, you need to reference the class instance’s variable instead.</p> <p>Thanks to these simple tricks, I was able to test error handling in a deterministic and repeatable way.</p> <p>However, this approach has some drawbacks:</p> <ul> <li>It requires creating a partial double that partially mimics the logic of the <code class="language-plaintext highlighter-rouge">GameSave</code> class.</li> <li>Each test class must override error handling with an additional <code class="language-plaintext highlighter-rouge">print_error</code> method.</li> <li>Every test needs to stub this method with an additional stub call.</li> </ul> <p>This is a small price to pay for transparent and convenient error handling validation in GDScript.<br/> There’s definitely room for improvement, but I’ll leave that for the next article.</p>]]></content><author><name></name></author><category term="godot"/><category term="gut"/><category term="tests"/><category term="game-dev"/><category term="software-development"/><summary type="html"><![CDATA[Testing error handling vis stub method in GUT tool.]]></summary></entry><entry><title type="html">How to store big binary files with git lfs on Google Drive or One Drive?</title><link href="https://ziumper.github.io/blog/2023/how-to-store-big-binary-files-with-git-lfs/" rel="alternate" type="text/html" title="How to store big binary files with git lfs on Google Drive or One Drive?"/><published>2023-10-23T16:40:16+00:00</published><updated>2023-10-23T16:40:16+00:00</updated><id>https://ziumper.github.io/blog/2023/how-to-store-big-binary-files-with-git-lfs</id><content type="html" xml:base="https://ziumper.github.io/blog/2023/how-to-store-big-binary-files-with-git-lfs/"><![CDATA[<h1 id="transfer-adapter">Transfer adapter</h1> <p>I suggest connecting git lfs with custom transfer adapter. According to git-lfs documentation:</p> <blockquote> <p>Git LFS supports multiple ways to transfer (upload and download) files. In the core client, the basic way to do this is via a one-off HTTP request via the URL returned from the LFS API for a given object. The core client also supports extensions to allow resuming of downloads (via Range headers) and uploads (via the tus.io protocol).</p> </blockquote> <h1 id="usage-examples">Usage examples</h1> <p>I used this approach to storage media files in my software development project and game dev project. I bet you can do it too. In the most cases I like to use it for:</p> <ul> <li>game dev projects in game engines like Unity and Unreal Engine.</li> <li>dbdumps storage</li> <li>big media files storage (in case you need a one)</li> </ul> <p>There are always a way to do it for another kind of projects.</p> <p>In example bellow I will be using gitlab, google drive and other tools.</p> <h1 id="gitlab-setup">Gitlab setup</h1> <p>Firstly you need to disable default lfs service of gitlab. It’s very vell documented feature in official documentation <a href="https://docs.gitlab.com/ee/topics/git/lfs">Gitlab</a> but there is not much information how to disable it.</p> <p>It’s a litle tricky and not really user friendly but obviously you need to select your repository and dive into settings.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/settings_gitlab-480.webp 480w,/assets/img/posts/settings_gitlab-800.webp 800w,/assets/img/posts/settings_gitlab-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/settings_gitlab.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/disable_gitlab_lfs_example-480.webp 480w,/assets/img/posts/disable_gitlab_lfs_example-800.webp 800w,/assets/img/posts/disable_gitlab_lfs_example-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/disable_gitlab_lfs_example.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Although!</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/yoda-there-is-480.webp 480w,/assets/img/posts/yoda-there-is-800.webp 800w,/assets/img/posts/yoda-there-is-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/yoda-there-is.gif" class="img-fluid rounded z-depth-1" width="30%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>There is another way also via gitlab cli, and to CI tools too via environment variables but I will not cover this, let’s keep it simple.</p> <p>If giltab lfs is disabled on remote you can start with local setup.</p> <h1 id="local-repository-setup">Local repository setup</h1> <p>You will need a new repository or use existing one. I suggest starting with fresh state so you can go with easier setup guide bellow.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div> <p>Add also remote server link. That can be done after setup or later. For gitlab you can follow simple tutorial <a href="https://docs.gitlab.com/ee/gitlab-basics/start-using-git.html#add-a-remote">link to git</a></p> <h1 id="lfs-setup">Lfs setup</h1> <p>Download a lfs adapter tool from <a href="https://github.com/sinbad/lfs-folderstore/releases/tag/v1.0.1">available releases</a>.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/OIP-480.webp 480w,/assets/img/posts/OIP-800.webp 800w,/assets/img/posts/OIP-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/OIP.jpg" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Download, unzip, install it to some good known location. For example make a new folder in you main work disk like this <code class="language-plaintext highlighter-rouge">C:\Tools</code> so full path to the tool will be like this <code class="language-plaintext highlighter-rouge">C:\Tools\lfs-folderstore.exe</code>.</p> <p>To set up repo with lfs please add .gitattributes file in your repository. For examples check this <a href="https://github.com/gitattributes/gitattributes">link</a>.</p> <h2 id="unity-gitattributes">Unity .gitattributes</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## in root

*.cs diff=csharp text
*.cginc text
*.shader text

*.mat merge=unityyamlmerge eol=lf
*.anim merge=unityyamlmerge eol=lf
*.unity merge=unityyamlmerge eol=lf
*.prefab merge=unityyamlmerge eol=lf
*.physicsMaterial2D merge=unityyamlmerge eol=lf
*.physicMaterial merge=unityyamlmerge eol=lf
*.asset merge=unityyamlmerge eol=lf -text
*.meta merge=unityyamlmerge eol=lf
*.controller merge=unityyamlmerge eol=lf

## git-lfs ##

#Image
*.jpg filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.gif filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.ai filter=lfs diff=lfs merge=lfs -text
*.tif filter=lfs diff=lfs merge=lfs -text

#Audio
*.mp3 filter=lfs diff=lfs merge=lfs -text
*.wav filter=lfs diff=lfs merge=lfs -text
*.ogg filter=lfs diff=lfs merge=lfs -text
#Wwise
*.bnk filter=lfs diff=lfs merge=lfs -text

#Video
*.mp4 filter=lfs diff=lfs merge=lfs -text
*.mov filter=lfs diff=lfs merge=lfs -text

#3D Object
*.FBX filter=lfs diff=lfs merge=lfs -text
*.fbx filter=lfs diff=lfs merge=lfs -text
*.blend filter=lfs diff=lfs merge=lfs -text
*.obj filter=lfs diff=lfs merge=lfs -text

#ETC
*.a filter=lfs diff=lfs merge=lfs -text
*.exr filter=lfs diff=lfs merge=lfs -text
*.tga filter=lfs diff=lfs merge=lfs -text
*.zip filter=lfs diff=lfs merge=lfs -text
*.dll filter=lfs diff=lfs merge=lfs -text
*.unitypackage filter=lfs diff=lfs merge=lfs -text
*.aif filter=lfs diff=lfs merge=lfs -text
*.ttf filter=lfs diff=lfs merge=lfs -text
*.rns filter=lfs diff=lfs merge=lfs -text
*.reason filter=lfs diff=lfs merge=lfs -text
*.lxo filter=lfs diff=lfs merge=lfs -text

</code></pre></div></div> <h2 id="unreal-engine-gitattributes">Unreal Engine .gitattributes</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Unreal Engine
## Auto detect text files and perform LF normalization ##

* text=auto

# UE file types
*.uasset filter=lfs diff=lfs merge=lfs -text
*.umap filter=lfs diff=lfs merge=lfs -text
*.udk filter=lfs diff=lfs merge=lfs -text
*.upk filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# 2D formats
# Read more in: https://docs.unrealengine.com/4.26/en-US/RenderingAndGraphics/Textures/Importing/

# Recommended use:
*.[tT][gG][aA] filter=lfs diff=lfs merge=lfs -text
*.[pP][nN][gG] filter=lfs diff=lfs merge=lfs -text
*.[bB][mM][pP] filter=lfs diff=lfs merge=lfs -text

# Can also be used:
*.[fF][lL[oO][aA][tT] filter=lfs diff=lfs merge=lfs -text
*.[jJ][pP][eE][gG] filter=lfs diff=lfs merge=lfs -text
*.[jJ][pP][gG] filter=lfs diff=lfs merge=lfs -text
*.[pP][cC][xX] filter=lfs diff=lfs merge=lfs -text
*.[pP][sS][dD] filter=lfs diff=lfs merge=lfs -text
*.[xX][cC][fF] filter=lfs diff=lfs merge=lfs -text
*.[tT][iI][fF] filter=lfs diff=lfs merge=lfs -text
*.[tT][iI][fF][fF] filter=lfs diff=lfs merge=lfs -text

# Other supported formats:
*.[hH][dD][rR] filter=lfs diff=lfs merge=lfs -text
*.[dD][dD][sS] filter=lfs diff=lfs merge=lfs -text
*.[eE][xX][rR] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# 3D formats

# Always recommended to use:
# The UE4 FBX import pipeline uses FBX 2018
*.[fF][bB][xX] filter=lfs diff=lfs merge=lfs -text

# Can also be used:
*.[oO][bB][jJ] filter=lfs diff=lfs merge=lfs -text

# Other supported formats:
*.[aA][bB][cC] filter=lfs diff=lfs merge=lfs -text
*.[sS][rR][tT] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# Audio formats
# Read more in: https://docs.unrealengine.com/4.27/en-US/WorkingWithAudio/Overview/#:~:text=Unreal%20Engine%204%20(UE4)%20supports,16%2Dbit%20format%20PCM%20files.

# Always recommended to use:
*.[wW][aA][vV] filter=lfs diff=lfs merge=lfs -text

# Can also be used:
*.[aA][iI][fF][fF] filter=lfs diff=lfs merge=lfs -text
*.[oO][gG][gG] filter=lfs diff=lfs merge=lfs -text
*.[fF][lL][aA][cC] filter=lfs diff=lfs merge=lfs -text

# Not recommended to use, but supported:
*.[mM][pP]3 filter=lfs diff=lfs merge=lfs -text
*.[wW][mM][aA] filter=lfs diff=lfs merge=lfs -text
*.[aA][cC]3 filter=lfs diff=lfs merge=lfs -text
*.[aA][mM][rR] filter=lfs diff=lfs merge=lfs -text
*.[aA][iI][fF] filter=lfs diff=lfs merge=lfs -text
*.[aA][uU] filter=lfs diff=lfs merge=lfs -text
*.[cC][dD][dD][aA] filter=lfs diff=lfs merge=lfs -text
*.[cC][aA][fF] filter=lfs diff=lfs merge=lfs -text
*.[bB][wW][fF] filter=lfs diff=lfs merge=lfs -text
*.[aA][dD][tT][sS] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# Video formats
# Read more in: https://docs.unrealengine.com/5.0/en-US/media-framework-technical-reference-for-unreal-engine/

# Always recommended to use, supports all platforms:
# For the best compatibility and performance, it is recommended to use H.264 encoded MP4 (.mp4) container files.
*.[mM][pP]4 filter=lfs diff=lfs merge=lfs -text

# Can also be used, only some platforms are supported:
*.3[gG]2 filter=lfs diff=lfs merge=lfs -text
*.3[gG][pP] filter=lfs diff=lfs merge=lfs -text
*.3[gG][pP]2 filter=lfs diff=lfs merge=lfs -text
*.3[gG][pP][pP] filter=lfs diff=lfs merge=lfs -text
*.[mM]4[aA] filter=lfs diff=lfs merge=lfs -text
*.[mM]4[vV] filter=lfs diff=lfs merge=lfs -text
*.[mM][o][vV] filter=lfs diff=lfs merge=lfs -text
*.[aA][sS][fF] filter=lfs diff=lfs merge=lfs -text
*.[aA][vV][iI] filter=lfs diff=lfs merge=lfs -text
*.[wW][mM][vV] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# Fonts
# Read more in: https://docs.unrealengine.com/5.0/en-US/importing-fonts-in-unreal-engine/

*.[tT][tT][fF] filter=lfs diff=lfs merge=lfs -text
*.[oO][tT][fF] filter=lfs diff=lfs merge=lfs -text

--------------------------------------------------

# Documents
*.[cC][sS][vV] filter=lfs diff=lfs merge=lfs -text

</code></pre></div></div> <h1 id="goolge-drive-setup">Goolge Drive Setup</h1> <p>If repo is ready, you will need some kind of disk space to make it works. So to fully integrate it use Google Drive Client <a href="https://www.google.com/drive/download/">Download</a>. Install it and login so you can create a folder to store all big binary data.</p> <p>After loging you should be able to see your mounted folder in Finder in case using Mac or Windows Explorer as seperated disk. Open it and create a new folder there with name <code class="language-plaintext highlighter-rouge">binary-lfs</code>. That name will be used to store all binary data for you project in lfs setup.</p> <h1 id="git-config-integration">Git config integration</h1> <p>If you have done right everything now it’s a time to connect git-lfs with our tool and google drive.</p> <p>I used my favorite open-source <a href="https://git-extensions-documentation.readthedocs.io/">GitExtension</a> software as reference for integration, but you can use terminal by using git config approach or any kind of text editor. In case using text editor open up config file inside hidden .git folder inside root folder of your project repository.</p> <p>To open up the configuration of your github repository choose following option:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/integration_gitextension-480.webp 480w,/assets/img/posts/integration_gitextension-800.webp 800w,/assets/img/posts/integration_gitextension-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/integration_gitextension.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Open it up and append following lines, similar as inside <a href="#cloning-a-repo">Cloning a repo</a></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[lfs "customtransfer.lfs-folder"]
    path = C:\\Tools\\lfs-folderstore.exe
    args = 'I:\\My drive\\binary-lfs'
[lfs]
    standalonetransferagent = lfs-folder
    repositoryformatversion = 0
</code></pre></div></div> <p>Afterwards you should be good to go, afterwards remember to sort out the LFS files in your checkout and copy the content from the now-configured shared folder, by using following command</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset <span class="nt">--hard</span> master
</code></pre></div></div> <p>or if you are using fresh repository simply push it</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push -u origin main
</code></pre></div></div> <h1 id="troubleshooting">Troubleshooting</h1> <p>Sometimes there could be some problems with your network or issues with git lfs In case of smudge errors or problems you can use following hacks:</p> <ul> <li>try using better internet connection low network bandwidth is not helping</li> <li>restart computer</li> <li>use <code class="language-plaintext highlighter-rouge">git lfs fetch --all</code> fetch git lfs files for ALL remote branches</li> <li>move your google drive or one drive directory cache to new folder and try to download the data again</li> </ul> <h1 id="bibliography-and-sources">Bibliography and sources</h1> <ul> <li><a href="https://github.com/sinbad/lfs-folderstore">Lfs folderstore repo</a></li> <li><a href="https://www.google.com/drive/download/">Google Drive</a></li> <li><a href="https://docs.gitlab.com/">Gitlab Docs</a></li> </ul>]]></content><author><name></name></author><category term="tutorials"/><category term="git"/><category term="git-lfs"/><category term="git-extensions"/><category term="unity"/><category term="unreal-engine"/><summary type="html"><![CDATA[Transfer adapter]]></summary></entry><entry><title type="html">How to solve rebase and merge conflicts with GitExtensions?</title><link href="https://ziumper.github.io/blog/2022/how-to-solve-rebase-merge-conflicts-with-GitExtensions/" rel="alternate" type="text/html" title="How to solve rebase and merge conflicts with GitExtensions?"/><published>2022-08-06T16:40:16+00:00</published><updated>2022-08-06T16:40:16+00:00</updated><id>https://ziumper.github.io/blog/2022/how-to-solve-rebase-merge-conflicts-with-GitExtensions</id><content type="html" xml:base="https://ziumper.github.io/blog/2022/how-to-solve-rebase-merge-conflicts-with-GitExtensions/"><![CDATA[<p>Have you ever wondered how to merge your changes easily without destroying the entire project? So here is a quick and easy guide to follow. Let’s start! First, you should install and configure <a href="https://git-extensions-documentation.readthedocs.io/">GitExtensions</a>. After that open up your repository. In my case, it contains two branches: master and develop. Check the image below to see it.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_1-480.webp 480w,/assets/img/posts/gitExtensions_1-800.webp 800w,/assets/img/posts/gitExtensions_1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_2-480.webp 480w,/assets/img/posts/gitExtensions_2-800.webp 800w,/assets/img/posts/gitExtensions_2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>It contains on hello.html file with the same line edited so it does not know which line it should take when <a href="https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts">conflict</a> happens.</p> <h2 id="how-to-rebase">How to rebase?</h2> <p>Do <a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase">rebase</a> from develop branch to master, so our commit on develop will be “above” commits from master and it “should” contain all commits from the master branch too. How do I do it? Checkout on develop branch. Click the right mouse button on it. Choose checkout branch and then develop.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_3-480.webp 480w,/assets/img/posts/gitExtensions_3-800.webp 800w,/assets/img/posts/gitExtensions_3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>When you are on develop branch choose which commit would like to rebase. In my case, it is a master branch commit with the message “Hope it will work”.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_4-480.webp 480w,/assets/img/posts/gitExtensions_4-800.webp 800w,/assets/img/posts/gitExtensions_4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_4.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>After clicking, yes to rebase it, you should see an error pop up, do not worry it is nothing wrong with git. It is just information for you that you need to resolve some conflicts.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_5-480.webp 480w,/assets/img/posts/gitExtensions_5-800.webp 800w,/assets/img/posts/gitExtensions_5-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_5.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Click, ok, and procceed. Next, you should see a similar window below:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_6-480.webp 480w,/assets/img/posts/gitExtensions_6-800.webp 800w,/assets/img/posts/gitExtensions_6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_6.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Choose solve conflicts and then the next window should pop up.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_7-480.webp 480w,/assets/img/posts/gitExtensions_7-800.webp 800w,/assets/img/posts/gitExtensions_7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>It is a resolve merge conflicts window. You can solve your merge conflicts in two ways. The fast and easy second way for which you use a diff tool like <a href="https://github.com/KDE/kdiff3">kdiff3</a>.</p> <h2 id="fasteasy-way-to-resolve-merge-conflicts">Fast/easy way to resolve merge conflicts.</h2> <p>You can apply the changes for the hello.html file by dropping your changes and using the changes of the master. Click the right mouse button on the hello.html file and choose (theirs) just like on the image below.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_8-480.webp 480w,/assets/img/posts/gitExtensions_8-800.webp 800w,/assets/img/posts/gitExtensions_8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>If you would like to overwrite the change you can always use choose (ours) option. Afterward Click continue rebase on the main rebase window</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_9-480.webp 480w,/assets/img/posts/gitExtensions_9-800.webp 800w,/assets/img/posts/gitExtensions_9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>In case of more files or conflicts, you would have to resolve them later. Keep in mind that working with bigger files or changes could take some time.</p> <h2 id="diff-tool-way">Diff tool way</h2> <p>Here I modified a little history of the repository so we can work with something.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_10-480.webp 480w,/assets/img/posts/gitExtensions_10-800.webp 800w,/assets/img/posts/gitExtensions_10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Let’s rebase again and develop to a master branch.</p> <ol> <li> <p>Checkout to develop</p> </li> <li> <p>Choose the first master commit with the message “Some other changes”, and click the right mouse button on it</p> </li> <li> <p>Rebase current branch on -&gt; selected commit.</p> </li> </ol> <p>Then the magic begins. I omit the steps to merge conflicts window, which is the same as above. Chose to open it up in kdiff3 or another merging/diff tool.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_11-480.webp 480w,/assets/img/posts/gitExtensions_11-800.webp 800w,/assets/img/posts/gitExtensions_11-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>You should see a window similar to below:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_12-480.webp 480w,/assets/img/posts/gitExtensions_12-800.webp 800w,/assets/img/posts/gitExtensions_12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Three directory-merge</p> <ul> <li> <p>(“A” is treated as the older base of both).</p> </li> <li> <p>B – is a (theirs) master branch version</p> </li> <li> <p>C – is a (ours) in that case, develop branch version</p> </li> </ul> <p>Below is the Output window that will contain the merging result.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_13-480.webp 480w,/assets/img/posts/gitExtensions_13-800.webp 800w,/assets/img/posts/gitExtensions_13-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>You can choose whatever version of the file you would like and combine them in the output you can see I have chosen one line from C, one line from A, and one line from B. Then I saved the file and continue to rebase after solving the conflicts. Simply as that, but sometimes it can be tricky so pay attention. Result of rebasing:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitExtensions_14-480.webp 480w,/assets/img/posts/gitExtensions_14-800.webp 800w,/assets/img/posts/gitExtensions_14-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitExtensions_14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>It will create .orig file extensions so you can always see the history of your changes. It is better to not commit those files to your repository.</p> <p>That’s it! I hope the article will help you with resolving the conflicts!</p>]]></content><author><name></name></author><category term="tutorials"/><category term="git"/><category term="gitExtensions"/><summary type="html"><![CDATA[Have you ever wondered how to merge your changes easily without destroying the entire project? So here is a quick and easy guide to follow. Let’s start! First, you should install and configure GitExtensions. After that open up your repository. In my case, it contains two branches: master and develop. Check the image below to see it.]]></summary></entry><entry><title type="html">How to start with GIT?</title><link href="https://ziumper.github.io/blog/2022/how-to-start-with-git/" rel="alternate" type="text/html" title="How to start with GIT?"/><published>2022-07-17T16:40:16+00:00</published><updated>2022-07-17T16:40:16+00:00</updated><id>https://ziumper.github.io/blog/2022/how-to-start-with-git</id><content type="html" xml:base="https://ziumper.github.io/blog/2022/how-to-start-with-git/"><![CDATA[<p>I was wondering what GIT means. Here is what I have found:</p> <blockquote> <p>GIT as a word is an alternation of the word get, which was shortened from begetting. The implicit reference is to illegitimate offspring, and the term is roughly synonymous with a twit, dolt, moron, or idiot. Within the open source community, the significance of the name choice varies.</p> </blockquote> <p>It means GIT is for idiots that do not know what they are doing. The perfect tool for a software developer. Let us start from the beginning.</p> <p>Linus Torvalds decided to develop it for the Linux kernel. From 2005 that helped developers track changes in the code. Available in all operating systems and used by users around the globe. Easy to start but hard to master version control system. You can download it from <a href="https://git-scm.com/downloads">this site</a> and try it by yourself.</p> <h1 id="basics">Basics</h1> <p>Download and install <a href="https://git-scm.com/downloads">git</a> on your OS (Operating system). I am starting with the basics. To follow, you need to get familiar with terminal. After installation you should be able to execute some git commands. Create a new folder. Then open up a terminal within new folder. Let’s make a repository. To achieve it use a command bellow.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div> <h1 id="tools">Tools</h1> <p>There a few GUI (Graphical User Interface) Tools, which can help you geting into GIT.<br/> If you are not a fan of terminal I bet you can use <a href="https://gitextensions.github.io/">GitExtensions</a></p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gitextension-480.webp 480w,/assets/img/posts/gitextension-800.webp 800w,/assets/img/posts/gitextension-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gitextension.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" alt="git extensions editor window" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>As an alternative you can use <a href="https://www.sourcetreeapp.com/">SourceTree</a> it is a valid free to use alternative for Mac. I think if you are using Linux you can go with terminal as well.</p> <p><img src="https://wac-cdn.atlassian.com/dam/jcr:580c367b-c240-453d-aa18-c7ced44324f9/hero-mac-screenshot.png?cdnVersion=651" alt="SourceTree!"/></p> <h1 id="commit">Commit</h1> <p>Okay, so far good! Now let’s commit some files to it. I made an HTML file with the following content.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Hello there<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div> <p>and save it as hello.html. Now you are ready to add it to staging area. What is a staging area – let’s explain it as a box where you put stuff and then you use it as a snapshot to commit the changes. To do it you should specify the path to the file with the file format, or path with some pattern like</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.txt .xml, etc.
</code></pre></div></div> <p>Command for adding the hello.html in terminal</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add hello.html
</code></pre></div></div> <p>You can also add all files</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="k">*</span>
</code></pre></div></div> <p>Then by typing:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git status
</code></pre></div></div> <p>You should be able to see all files, which have been added by you to staging area.</p> <p>Afterwards, you can commit the hello.html to your local repository.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">-m</span> <span class="s2">"Add hello there file"</span>
</code></pre></div></div> <p>commit – is a command that saves a snapshot of the “box” that we staged.</p> <h1 id="commits-message-standards">Commits message standards</h1> <p>I want to explain a few standards on how to deal with commit messages and how often you should be doing it. I heard that the more often you are doing it, the better. There is no limit, afterwards, you can always reduce the number of commits, by using the squash functionality. Let’s start with the form of the commit message. How it should be:</p> <ul> <li> <p>Use imperative statements in the subject line, e.g. “Fix broken Javadoc link”</p> </li> <li> <p>Begin the subject line sentence with a capitalized verb, e.g. “Add, Prune, Fix, Introduce, Avoid, etc”</p> </li> <li> <p>Do not end the subject line with a period</p> </li> <li> <p>Keep the subject line to 50 characters or less if possible</p> </li> <li> <p>Wrap lines in the body at 72 characters or less</p> </li> <li> <p>Mention associated Jira issue(s) at the end of the commit comment, prefixed with “Issue: ” as above</p> </li> <li> <p>In the body of the commit message, explain how things worked before this commit, what has changed, and how things work now</p> </li> <li> <p>I also like to add some kind of tag of type before the commit message, here are some examples:</p> </li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>– Feature

– Bugfix

– Cleanup

– Hotfix
</code></pre></div></div> <p>When you are working on a task it is good to add some number of tasks like #123 that reference some. In summary, it should look like that:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>FEATURE] <span class="c">#123 My super not quite long commit message.</span>


Here goes body messages where we describe what is going on.
Keep it short as much as you can, but include all necessary details
inside.

Footer where summary and all other references should be applied <span class="k">for
</span>example:
Those commits resolve issue <span class="c">#123 and #124</span>
</code></pre></div></div> <p>Git branches – tree of changes Commits can be added to branches. The branch is a set of commits that are separated from the main branch just like in a tree with leafs. To create a branch:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch &lt;branch_name&gt;
</code></pre></div></div> <p>To switch branch</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout &lt;branch_name&gt;
</code></pre></div></div> <p>After initializing the git repository you usually have one existing main branch from which all created afterwards branches can be derived. Use them to group some changes on the feature you are working on.</p> <h1 id="workflow">Workflow</h1> <p>I recommend getting familiar with a few concepts of GIT like a branch, rebase, merge and squash. After that, you can start thinking about how to work and manage your work as a software developer. I am a big fan of normalization and standards of workflows. I found a few methodologies that are popular nowadays while working with GIT.</p> <ul> <li>Gitflow</li> <li>Trunk</li> </ul> <p>Choose first if you do not have any CI/CD tools in your toolset. The second one is great while working with a good technology stack and integrated code review tools.</p>]]></content><author><name></name></author><category term="tutorials"/><category term="git"/><category term="gitExtensions"/><summary type="html"><![CDATA[I was wondering what GIT means. Here is what I have found:]]></summary></entry></feed>
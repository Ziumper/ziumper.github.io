<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://ziumper.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ziumper.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-08T18:38:39+00:00</updated><id>https://ziumper.github.io/feed.xml</id><title type="html">Ziumper</title><entry><title type="html">Comma at the end of function arguments in PHP (trailing comma)</title><link href="https://ziumper.github.io/blog/2025/trailing-comma-line/" rel="alternate" type="text/html" title="Comma at the end of function arguments in PHP (trailing comma)"/><published>2025-10-07T00:00:00+00:00</published><updated>2025-10-07T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/trailing-comma-line</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/trailing-comma-line/"><![CDATA[<p>Have you ever added a new argument to a function or constructor in PHP and forgotten to add a comma at the end of the previous line? It‚Äôs a common mistake that can lead to unnecessary fixes and frustration.</p> <p>Fortunately, since PHP 7.3 you can use the so-called trailing comma, i.e., a comma after the last argument in function calls, function declarations, and arrays. Thanks to this, when you add a new argument, you don‚Äôt have to remember to manually add a comma at the end of the previous line.</p> <h3 id="-example-without-trailing-comma">üõë Example without trailing comma</h3> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">int</span> <span class="nv">$age</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>If you want to add another argument, you have to go back to the previous line and add a comma:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">int</span> <span class="nv">$age</span><span class="p">,</span> <span class="c1">// you have to add a comma</span>
        <span class="kt">string</span> <span class="nv">$email</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="-example-with-trailing-comma">‚úÖ Example with trailing comma</h3> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">int</span> <span class="nv">$age</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Now you can simply add another argument without worrying about commas:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="kt">string</span> <span class="nv">$name</span><span class="p">,</span>
        <span class="kt">int</span> <span class="nv">$age</span><span class="p">,</span>
        <span class="kt">string</span> <span class="nv">$email</span><span class="p">,</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="-since-when">üìÖ Since when?</h3> <p>Trailing comma in function and method argument lists is available since PHP 7.3. Previously, it was only available in arrays.</p> <h3 id="-summary">üìù Summary</h3> <p>Using the trailing comma:</p> <ul> <li>makes adding and removing arguments easier,</li> <li>reduces the risk of syntax errors,</li> <li>improves code readability in the long run.</li> </ul> <p>It‚Äôs worth using this feature, especially in larger projects!</p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[How the trailing comma in PHP makes a programmer's life easier when working with function and constructor arguments. ,]]></summary></entry><entry><title type="html">Using array_map() in a Programmer‚Äôs Daily Life. PHP Review #7</title><link href="https://ziumper.github.io/blog/2025/array-map-in-php/" rel="alternate" type="text/html" title="Using array_map() in a Programmer‚Äôs Daily Life. PHP Review #7"/><published>2025-09-30T00:00:00+00:00</published><updated>2025-09-30T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/array-map-in-php</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/array-map-in-php/"><![CDATA[<p>This article won‚Äôt be very long, but it will definitely be useful enough to serve as a good reference for future decisions. Is it worth using <code class="language-plaintext highlighter-rouge">array_map</code>? Definitely yes, if you need to perform some mutation operations on individual elements. For example, it can be:</p> <ul> <li>building subarrays from various values</li> </ul> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">php</span> <span class="o">&gt;</span> <span class="nb">var_dump</span><span class="p">(</span><span class="nb">array_map</span><span class="p">(</span><span class="k">static</span> <span class="k">fn</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'numeric_string'</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">],</span> <span class="p">[</span><span class="s1">'zero'</span><span class="p">,</span><span class="s1">'one'</span><span class="p">,</span><span class="s1">'two'</span><span class="p">,</span><span class="s1">'three'</span><span class="p">]));</span>
<span class="k">array</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=&gt;</span>
  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">"numeric_string"</span><span class="p">]</span><span class="o">=&gt;</span>
    <span class="nf">string</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="s2">"zero"</span>
  <span class="p">}</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=&gt;</span>
  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">"numeric_string"</span><span class="p">]</span><span class="o">=&gt;</span>
    <span class="nf">string</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="s2">"one"</span>
  <span class="p">}</span>
  <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=&gt;</span>
  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">"numeric_string"</span><span class="p">]</span><span class="o">=&gt;</span>
    <span class="nf">string</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="s2">"two"</span>
  <span class="p">}</span>
  <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=&gt;</span>
  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="s2">"numeric_string"</span><span class="p">]</span><span class="o">=&gt;</span>
    <span class="nf">string</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="s2">"three"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>extracting values from another array and converting them to something else</li> </ul> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ids</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">static</span> <span class="k">fn</span> <span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="nv">$id</span><span class="p">],</span> <span class="nb">array_values</span><span class="p">(</span><span class="nv">$ids</span><span class="p">));</span>
</code></pre></div></div> <ul> <li>returning a new list of values with changed values, without modifying the old list</li> </ul> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$newArray</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">static</span> <span class="k">fn</span> <span class="p">(</span><span class="nv">$item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">'"'</span><span class="p">,</span><span class="s1">'""'</span><span class="p">,</span><span class="nv">$item</span><span class="p">),</span> <span class="nv">$oldArray</span><span class="p">);</span>
</code></pre></div></div> <p>You can multiply the examples, but the most useful ones can be found here: <a href="https://www.php.net/manual/en/function.array-map.php">link to PHP documentation</a></p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[This time I decided to take a look at the most common uses of array_map in my daily code.]]></summary></entry><entry><title type="html">Finally well written tests with composer loading structure</title><link href="https://ziumper.github.io/blog/2025/Composer-with-phpunit-setup/" rel="alternate" type="text/html" title="Finally well written tests with composer loading structure"/><published>2025-09-29T00:00:00+00:00</published><updated>2025-09-29T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Composer-with-phpunit-setup</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Composer-with-phpunit-setup/"><![CDATA[<p>I stumbled, crawled on ground while having not proper setup in my old project that I should work on. and then I figured how I should structure my loading properties</p> <p>here is what I had in my project</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"autoload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>but this way all may classes seems to be loaded inside composer autload map. I knew there must be better way to solve that. Here is what I figured out</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"autoload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src/"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"autoload-dev"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Durring that time I got some really serious issues, I couldn‚Äôt declare Traits in my tests folder and it was quite hard feeling to copy paste all that code, then I moved forward with next version.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"autoload"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src/"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"exclude-from-classmap"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"tests/"</span><span class="p">]</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"autoload-dev"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"psr-4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\Tests\\Unit\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/unit"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Ziumper\\App\\Tests\\Integration\\"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tests/integration"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>So how this works is:</p> <ul> <li>all declarations are stored inside src folder even those used for tests. Base test cases traits, data providers too.</li> <li>integration and tests are using src references and are giving me some nice working cases.</li> <li>exclude from classmap is a guard which stands in front of my testing code and doesn‚Äôt allow it to get into production loading flow.</li> </ul> <p>I think this way I can start building something‚Ä¶ that makes sense!</p>]]></content><author><name></name></author><category term="php"/><category term="composer"/><category term="phpunit"/><summary type="html"><![CDATA[This post explains how to organize composer project with phpunit dependecies to not load your test cases into classmap and explaing learnings I figured out durring my workflow]]></summary></entry><entry><title type="html">How integrate GitHub Copilot to generate commit messages automatically?</title><link href="https://ziumper.github.io/blog/2025/Add-github-copilot-auto-commit-message-generation/" rel="alternate" type="text/html" title="How integrate GitHub Copilot to generate commit messages automatically?"/><published>2025-09-24T00:00:00+00:00</published><updated>2025-09-24T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Add-github-copilot-auto-commit-message-generation</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Add-github-copilot-auto-commit-message-generation/"><![CDATA[<p>The most important part of working in a team is communication. And one of the most important ways to communicate with your team is through commit messages. A good commit message should be clear, concise, and informative. It should describe what changes were made and why they were made. However, writing good commit messages can be time-consuming and tedious. That‚Äôs where GitHub Copilot comes in. GitHub Copilot is an AI-powered code completion tool that can help you write code faster and more efficiently. But did you know that GitHub Copilot can also help you write better commit messages? In this post, we‚Äôll show you how to use GitHub Copilot to generate commit messages automatically.</p> <h2 id="step-1-add-github-copilot-template-to-your-repository">Step 1: Add GitHub Copilot template to your repository</h2> <p>To get started, you need to add a GitHub Copilot template to your repository. This template will provide GitHub Copilot with the necessary context to generate commit messages. You can create a new file in your repository called <code class="language-plaintext highlighter-rouge">.github/git-commit-instructions.md</code> and add the following content:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Git Commit Instructions

When making a commit, please follow these guidelines to ensure clarity and consistency in our commit history.
Provide description in the commit message.
* Describe the changes made in the commit and intended impact on the codebase in new lines.
* Make sure to include:
    * What was changed (e.g., added feature, fixed bug, updated documentation).
    * Why the change was necessary (e.g., to improve performance, fix an issue, enhance user experience).
    * Any relevant details that help understand the context of the change.
* Elaborate on the reasoning behind the changes and any relevant context that may help reviewers understand the
commit better.
</code></pre></div></div> <p>This template provides guidelines for writing good commit messages and will help GitHub Copilot generate better commit messages.</p> <h2 id="step-2-use-github-copilot-to-generate-commit-messages">Step 2: Use GitHub Copilot to generate commit messages</h2> <p>Once you have added the template to your repository, you can start using GitHub Copilot to generate commit messages. When you are ready to make a commit, you can use one of the following IDE editors that support GitHub Copilot:</p> <ul> <li>Visual Studio Code</li> <li>JetBrains IDEs (e.g., IntelliJ IDEA, PyCharm, WebStorm)</li> <li>Neovim</li> </ul> <p>When you click the commit message editor button, GitHub Copilot will suggest a commit message based on the changes you have made and the guidelines provided in the template. GitHub Copilot will automatically suggest a commit message based on the changes you have made and the guidelines provided in the template.</p> <h2 id="conclusion">Conclusion</h2> <p>Using GitHub Copilot to generate commit messages automatically can help you write better commit messages and improve your productivity. By adding a GitHub Copilot template to your repository and using one of the supported IDE editors that support GitHub Copilot, you can easily generate clear and informative commit messages. Give it a try and see how it can improve your workflow! I‚Äôm already using it and I love it! üòä</p>]]></content><author><name></name></author><category term="git"/><category term="github"/><category term="productivity"/><category term="copilot"/><summary type="html"><![CDATA[This post explains how to use GitHub Copilot to generate commit messages automatically, improving productivity and ensuring clear commit history.]]></summary></entry><entry><title type="html">ü§ì Why do PHP developers love the empty line at the end of the file? PHP Review #6</title><link href="https://ziumper.github.io/blog/2025/New-line-at-the-end-of-php-file/" rel="alternate" type="text/html" title="ü§ì Why do PHP developers love the empty line at the end of the file? PHP Review #6"/><published>2025-09-23T00:00:00+00:00</published><updated>2025-09-23T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/New-line-at-the-end-of-php-file</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/New-line-at-the-end-of-php-file/"><![CDATA[<h1 id="why-do-we-add-an-empty-line-at-the-end-of-php-and-twig-files-">Why do we add an empty line at the end of PHP and Twig files? ü§î</h1> <p>Have you ever wondered why developers stubbornly add an empty line at the end of files? Is it some secret tradition? Or maybe a way to fight boredom? The answer is more technical, but there‚Äôs a bit of history and‚Ä¶ a touch of absurdity! üòÑ</p> <h2 id="technical-reasons-Ô∏è">Technical reasons üõ†Ô∏è</h2> <h3 id="1-posix-standard-">1. <strong>POSIX Standard</strong> üßë‚Äçüíª</h3> <p>Imagine POSIX as a strict teacher in the school of programmers. It says: ‚ÄúEvery text file must end with a new line (<code class="language-plaintext highlighter-rouge">\n</code>). End of discussion!‚Äù Why? Because tools like <code class="language-plaintext highlighter-rouge">cat</code>, <code class="language-plaintext highlighter-rouge">diff</code>, or <code class="language-plaintext highlighter-rouge">git</code> love order. If a file doesn‚Äôt end with a new line, they might get upset and show weird results, e.g., merging the last line of one file with the first of another. It‚Äôs like two sentences in a book blending into one ‚Äì chaos! üìö</p> <p>POSIX (Portable Operating System Interface) was created to unify the behavior of operating systems. Thanks to this, programs can work predictably on different computers. And the empty line at the end of a file is a small gesture towards order and compatibility. ‚ú®</p> <h3 id="2-avoiding-errors-in-php-">2. <strong>Avoiding errors in PHP</strong> üêò</h3> <p>In PHP, if anything appears after the closing <code class="language-plaintext highlighter-rouge">?&gt;</code> tag ‚Äì even an innocent space or new line ‚Äì the server might get angry and send HTTP headers at the wrong moment. The result? The page looks weird, and you spend half a day looking for the bug. The empty line is like a programmer‚Äôs lucky charm! üçÄ</p> <h3 id="3-better-readability-">3. <strong>Better readability</strong> üëÄ</h3> <p>An empty line at the end of a file is like a period at the end of a sentence. Thanks to it, the code looks neat, and changes in version control systems are clearer. Git likes it when everything is in its place! üòé</p> <h3 id="4-psr-2-and-psr-12-standards-">4. <strong>PSR-2 and PSR-12 Standards</strong> üìè</h3> <p>And what does PHP-FIG, the programmers‚Äô council of elders, say? They invented the PSR-2 standard, and then its younger, more demanding brother PSR-12. Both clearly state: there must be a new line at the end of the file! This way, your code complies with the guidelines, and your linter doesn‚Äôt have a panic attack. It‚Äôs a bit like following health and safety rules in code ‚Äì nobody wants to get a ticket from the reviewer! üö®</p> <h2 id="historical-reasons-">Historical reasons üè∫</h2> <p>In the past, text editors were moody. The lack of an empty line could cause errors during compilation or code interpretation. So developers learned to add this magic line to avoid surprises. It‚Äôs a bit like wearing socks with sandals ‚Äì not always needed and considered a fashion crime, but sometimes it saves the day! üß¶</p> <h2 id="twig-Ô∏è">Twig üï∏Ô∏è</h2> <p>In Twig files, the empty line helps avoid unwanted characters in the generated HTML. Thanks to this, your page doesn‚Äôt look like a patchwork of random spaces and enters. And version control systems? They‚Äôre grateful too! üôè</p> <h2 id="summary-">Summary üéâ</h2> <p>Adding an empty line at the end of PHP and Twig files is not just a technical necessity, but also a part of programming culture. It protects against errors, keeps things tidy, and makes tools happy. So next time you add an empty line, you can feel like a code hero! ü¶∏‚Äç‚ôÇÔ∏è</p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[This post explains why developers add an empty line at the end of PHP and Twig files, presenting technical, historical, and humorous reasons for this practice. You'll learn how it affects compatibility, code readability, and helps avoid errors.]]></summary></entry><entry><title type="html">üßπ How to Remove Recipes from the `extra` Section in composer.json</title><link href="https://ziumper.github.io/blog/2025/Composer-recipes-fix/" rel="alternate" type="text/html" title="üßπ How to Remove Recipes from the `extra` Section in composer.json"/><published>2025-09-22T00:00:00+00:00</published><updated>2025-09-22T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Composer-recipes-fix</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Composer-recipes-fix/"><![CDATA[<p>When working with PHP projects, especially those using Symfony, you might encounter the <code class="language-plaintext highlighter-rouge">extra</code> section in your <code class="language-plaintext highlighter-rouge">composer.json</code>file. This section often contains recipes that help configure your project. However, over time, you may want to remove or clean up these recipes.</p> <h2 id="what-is-the-extra-section-in-composerjson">What is the <code class="language-plaintext highlighter-rouge">extra</code> Section in composer.json?</h2> <p>The <code class="language-plaintext highlighter-rouge">extra</code> section is a special place in your <code class="language-plaintext highlighter-rouge">composer.json</code> file for custom configuration.<br/> It is used by Composer plugins, frameworks (like Symfony), and scripts to store additional settings.</p> <h3 id="example">Example</h3> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"extra"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"symfony"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"allow-contrib"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"recipes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"symfony/console"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"ref"</span><span class="p">:</span><span class="w"> </span><span class="s2">"abcdef"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="for-what-i-used-the-extra-section">For what I used the <code class="language-plaintext highlighter-rouge">extra</code> section?</h2> <p>Well I used it to store Symfony Flex recipes. Symfony Flex is a Composer plugin that helps manage Symfony applications by automating the installation and configuration of packages. When you install a package that has a recipe, Symfony Flex adds configuration files and settings to your project automatically. You may prefer to remove some of these recipes if they are no longer needed or if you want to customize your setup. In my case it was docker setup that I didn‚Äôt need.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"extra"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"symfony"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"allow-contrib"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"docker"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="symfony-flex">Symfony flex</h2> <p>The Flex recipes make a few assumptions about your project‚Äôs directory structure. Some of these assumptions can be customized by adding a key under the extra section of your composer.json file. For example, to tell Flex to copy any PHP classes into src/App instead of src:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"..."</span><span class="p">:</span><span class="w"> </span><span class="s2">"..."</span><span class="p">,</span><span class="w">

  </span><span class="nl">"extra"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"src-dir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"src/App"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="troubleshooting">Troubleshooting</h2> <p>If you encounter issues after removing recipes, try the following steps:</p> <ul> <li>Run <code class="language-plaintext highlighter-rouge">composer install</code> to refresh your dependencies.</li> <li>Check for missing configuration files or environment variables.</li> <li>Review Symfony documentation for any manual steps required after recipe removal.</li> </ul> <h2 id="additional-resources">Additional Resources</h2> <ul> <li><a href="https://symfony.com/doc/current/setup/flex.html">Symfony Recipes Documentation</a></li> <li><a href="https://getcomposer.org/doc/04-schema.md#extra">Composer Extra Section</a></li> </ul>]]></content><author><name></name></author><category term="php"/><category term="composer"/><category term="symfony"/><category term="symfony-flex"/><summary type="html"><![CDATA[A quick guide to understanding and cleaning up the `extra` section in composer.json, especially Symfony recipes.]]></summary></entry><entry><title type="html">üßê Floats and the Mystery of -0.0 PHP Review #5</title><link href="https://ziumper.github.io/blog/2025/Floats-and-mystery-of-zero/" rel="alternate" type="text/html" title="üßê Floats and the Mystery of -0.0 PHP Review #5"/><published>2025-09-18T00:00:00+00:00</published><updated>2025-09-18T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/Floats-and-mystery-of-zero</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/Floats-and-mystery-of-zero/"><![CDATA[<p>Yes, really. <code class="language-plaintext highlighter-rouge">-0.0</code> and <code class="language-plaintext highlighter-rouge">0.0</code> are two different byte representations according to the <a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754 standard</a> ‚Äì but in practice‚Ä¶ PHP treats them as the same.</p> <p>I had this code:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getPercentage</span><span class="p">():</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="c1">// epsilon to avoid division by zero</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">8</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nb">round</span><span class="p">((</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">totalCartPrice</span> <span class="o">/</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div> <p>And I started wondering:</p> <ul> <li>Can I just compare <code class="language-plaintext highlighter-rouge">$this-&gt;limitPrice == 0.0</code>?</li> <li>What if <code class="language-plaintext highlighter-rouge">limitPrice</code> = <code class="language-plaintext highlighter-rouge">-0.0</code>? ü§Ø</li> </ul> <hr/> <h2 id="-analysis">üî¨ Analysis</h2> <h3 id="1Ô∏è‚É£-ieee-754-and--00">1Ô∏è‚É£ IEEE 754 and -0.0</h3> <p>In the floating point standard, there is <strong>positive zero (0.0)</strong> and <strong>negative zero (-0.0)</strong>.<br/> At the byte level, they are two different values:</p> <ul> <li><code class="language-plaintext highlighter-rouge">0.0</code> ‚Üí <code class="language-plaintext highlighter-rouge">0x0000000000000000</code></li> <li><code class="language-plaintext highlighter-rouge">-0.0</code> ‚Üí <code class="language-plaintext highlighter-rouge">0x8000000000000000</code></li> </ul> <p>So yes, binary-wise, they are not the same.</p> <hr/> <h3 id="2Ô∏è‚É£-how-php-handles-it">2Ô∏è‚É£ How PHP Handles It</h3> <p>Compare this:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="mf">0.0</span> <span class="o">==</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">);</span>   <span class="c1">// true</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="mf">0.0</span> <span class="o">===</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">);</span>  <span class="c1">// true</span>
</code></pre></div></div> <p>‚úÖ PHP treats these two values as equal both with loose (<code class="language-plaintext highlighter-rouge">==</code>) and strict (<code class="language-plaintext highlighter-rouge">===</code>) comparison.</p> <p>But watch this:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="mf">0.0</span><span class="p">);</span>  <span class="c1">// float(INF)</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">);</span> <span class="c1">// float(-INF)</span>
</code></pre></div></div> <p>‚û°Ô∏è The difference shows up when dividing ‚Äì the sign of zero affects the result (<code class="language-plaintext highlighter-rouge">+‚àû</code> vs <code class="language-plaintext highlighter-rouge">-‚àû</code>).</p> <hr/> <h3 id="3Ô∏è‚É£-does-it-matter-in-my-case">3Ô∏è‚É£ Does It Matter in My Case?</h3> <p>In my code, <code class="language-plaintext highlighter-rouge">limitPrice</code> has <strong>at most 4 decimal places</strong>, comes from the database or simple operations.<br/> I don‚Äôt have strange negative zeros coming from complex math.<br/> So I can safely write:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span> <span class="o">==</span> <span class="mf">0.0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>And everything works just fine.<br/> Epsilon (<code class="language-plaintext highlighter-rouge">1e-8</code>) is not needed here, because I don‚Äôt have rounding errors at the 17th decimal place.</p> <hr/> <h2 id="-bonus-how-to-detect--00-for-the-nerds">üõ† Bonus: How to Detect -0.0 (For the Nerds)</h2> <p>If for some reason you <strong>must know</strong> whether it‚Äôs -0.0, here‚Äôs the trick:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">isNegativeZero</span><span class="p">(</span><span class="kt">float</span> <span class="nv">$x</span><span class="p">):</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$x</span> <span class="o">===</span> <span class="mf">0.0</span> <span class="o">&amp;&amp;</span> <span class="mi">1</span> <span class="o">/</span> <span class="nv">$x</span> <span class="o">===</span> <span class="o">-</span><span class="no">INF</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nf">isNegativeZero</span><span class="p">(</span><span class="mf">0.0</span><span class="p">));</span>  <span class="c1">// false</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nf">isNegativeZero</span><span class="p">(</span><span class="o">-</span><span class="mf">0.0</span><span class="p">));</span> <span class="c1">// true</span>
</code></pre></div></div> <p>Yes, you actually divide by zero to detect it. üß™</p> <hr/> <h2 id="-conclusion">‚úÖ Conclusion</h2> <ul> <li>Yes, -0.0 and 0.0 are different bytes.</li> <li>PHP treats them as equal (<code class="language-plaintext highlighter-rouge">==</code>, <code class="language-plaintext highlighter-rouge">===</code>).</li> <li>You can safely write <code class="language-plaintext highlighter-rouge">== 0.0</code> in comparisons.</li> <li>Only division by 0.0 vs -0.0 returns different infinities (INF vs -INF) ‚Äì so when dividing, you may want to use <code class="language-plaintext highlighter-rouge">abs()</code>.</li> </ul> <hr/> <h2 id="-summary">üéâ Summary</h2> <p>I managed to simplify my code and <strong>instead of epsilons</strong> I just have:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getPercentage</span><span class="p">():</span> <span class="kt">int</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span> <span class="o">?</span> <span class="nb">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="nb">round</span><span class="p">((</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">totalCartPrice</span> <span class="o">/</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">limitPrice</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">))</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Cleaner, simpler, and still safe.<br/> And the fact that -0.0 exists ‚Äì well, that‚Äôs a great trivial fact to impress your fellow developers over coffee. ‚òïÔ∏èüòé</p> <p>PS: If you need an epsilon, it‚Äôs better to use this constant:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kc">PHP_FLOAT_EPSILON</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[Did you know that PHP has negative zero? This post is a journey through the world of negative zeros, division by infinity, and why in your code you can still safely write `== 0.0`.]]></summary></entry><entry><title type="html">PhpUnit willReturnMap - PHP Review #4</title><link href="https://ziumper.github.io/blog/2025/PHPUnit-will-return-map-trap/" rel="alternate" type="text/html" title="PhpUnit willReturnMap - PHP Review #4"/><published>2025-09-17T00:00:00+00:00</published><updated>2025-09-17T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/PHPUnit-will-return-map-trap</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/PHPUnit-will-return-map-trap/"><![CDATA[<p><strong>Description:</strong><br/> A story about how a single little <code class="language-plaintext highlighter-rouge">null</code> cost me 30 minutes of debugging tests,<br/> and then I found the truth in the documentation‚Ä¶ which is completely silent about it. üôÉ</p> <hr/> <h2 id="-the-problem">üßê The Problem</h2> <p>Let‚Äôs assume we have a method like this:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyService</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">doStuff</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$key</span><span class="p">,</span> <span class="kt">?string</span> <span class="nv">$flag</span> <span class="o">=</span> <span class="kc">null</span><span class="p">):</span> <span class="kt">string</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s2">"Result: "</span> <span class="mf">.</span> <span class="nv">$key</span> <span class="mf">.</span> <span class="p">(</span><span class="nv">$flag</span> <span class="o">?</span> <span class="s2">" (</span><span class="nv">$flag</span><span class="s2">)"</span> <span class="o">:</span> <span class="s2">""</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>And you want to test a class that uses <code class="language-plaintext highlighter-rouge">MyService</code> ‚Äì of course, with a mock.<br/> You use <strong><code class="language-plaintext highlighter-rouge">willReturnMap</code></strong>, because it‚Äôs elegant and works for multiple sets of arguments.</p> <p>Sounds simple?<br/> Let‚Äôs look at the test:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$mock</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">createMock</span><span class="p">(</span><span class="nc">MyService</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>

<span class="nv">$mock</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(</span><span class="s1">'doStuff'</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="nf">willReturnMap</span><span class="p">([</span>
        <span class="p">[</span><span class="s1">'foo'</span><span class="p">,</span> <span class="s1">'Result: foo (bar)'</span><span class="p">],</span>
        <span class="p">[</span><span class="s1">'baz'</span><span class="p">,</span> <span class="s1">'Result: baz'</span><span class="p">],</span>
    <span class="p">]);</span>
</code></pre></div></div> <p>Looks good, right?<br/> <strong>NOPE.</strong> üòÖ</p> <hr/> <h2 id="-what-happens">üí• What happens?</h2> <p>If you don‚Äôt pass exactly as many arguments as the method takes, PHPUnit will say:</p> <blockquote> <p>‚ÄúI have no idea what you mean‚Äù ü§∑‚Äç‚ôÇÔ∏è<br/> and return <code class="language-plaintext highlighter-rouge">null</code>.</p> </blockquote> <p>So when your production code calls:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$service</span><span class="o">-&gt;</span><span class="nf">doStuff</span><span class="p">(</span><span class="s1">'baz'</span><span class="p">);</span>
</code></pre></div></div> <p>the mock will say:</p> <blockquote> <p>‚ÄúSorry, I don‚Äôt know that map.‚Äù</p> </blockquote> <p>And your test explodes. üí£</p> <hr/> <h2 id="-why-does-this-happen">ü§Ø Why does this happen?</h2> <p>Because <code class="language-plaintext highlighter-rouge">willReturnMap</code> matches arguments <strong>by position</strong>, exactly 1:1.<br/> A default <code class="language-plaintext highlighter-rouge">null</code> argument isn‚Äôt magically ‚Äúguessed‚Äù.<br/> You need to explicitly put it in the array.</p> <hr/> <h2 id="-the-correct-solution">‚úÖ The Correct Solution</h2> <p>You need to <strong>match the exact number of arguments</strong>, even if they‚Äôre default:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$mock</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(</span><span class="s1">'doStuff'</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="nf">willReturnMap</span><span class="p">([</span>
        <span class="p">[</span><span class="s1">'foo'</span><span class="p">,</span> <span class="s1">'bar'</span><span class="p">,</span> <span class="s1">'Result: foo (bar)'</span><span class="p">],</span>
        <span class="p">[</span><span class="s1">'baz'</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="s1">'Result: baz'</span><span class="p">],</span> <span class="c1">// &lt;--- null is required!</span>
    <span class="p">]);</span>
</code></pre></div></div> <p>Yeah, I know ‚Äì seems obvious, but sometimes you hope for a bit of magic. ü™Ñ<br/> Sadly ‚Äì PHPUnit offers no magic here.</p> <hr/> <h2 id="-the-moral-of-the-story">üìù The Moral of the Story</h2> <ul> <li><code class="language-plaintext highlighter-rouge">willReturnMap</code> is great, but it‚Äôs <strong>very literal</strong>.</li> <li>If the method takes 2 arguments ‚Äì your map must have 2 arguments.</li> <li>Even if the second argument defaults to <code class="language-plaintext highlighter-rouge">null</code>.</li> <li>PHPUnit isn‚Äôt a fortune teller ‚Äì it won‚Äôt guess you meant the default. üòÖ</li> </ul> <hr/> <h2 id="-takeaways">üéâ Takeaways</h2> <p>After this discovery, my tests stopped exploding.<br/> Knowing that <strong>you have to explicitly provide every argument in the map</strong> saved me hours of debugging.<br/> Now I know ‚Äì with mocks, it‚Äôs better to provide one argument too many than one too few.</p> <blockquote> <p>üß† <strong>Key Point:</strong> <code class="language-plaintext highlighter-rouge">willReturnMap</code> ‚â† flexible matching.<br/> It‚Äôs a <strong>strict argument map</strong> ‚Äì provide everything or don‚Äôt complain when your tests burn. üî•</p> </blockquote> <hr/> <p>‚úçÔ∏è <strong>PS:</strong> If anyone finds a mention of this case in the PHPUnit docs ‚Äì let me know.<br/> I couldn‚Äôt find it, and I searched half the internet. üôà</p> <p><a href="https://docs.phpunit.de/en/12.3/test-doubles.html#willreturnmap">Link to documentation</a></p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[üêõ "PhpUnit, willReturnMap and default arguments ‚Äì how to fall into a subtle trap ü™§"]]></summary></entry><entry><title type="html">BackedEnum - PHP Review #3</title><link href="https://ziumper.github.io/blog/2025/PHP-Backed-enums/" rel="alternate" type="text/html" title="BackedEnum - PHP Review #3"/><published>2025-09-16T00:00:00+00:00</published><updated>2025-09-16T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/PHP-Backed-enums</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/PHP-Backed-enums/"><![CDATA[<p>The story of a developer who decided to say goodbye to endless <code class="language-plaintext highlighter-rouge">const</code> declarations and mapping arrays.<br/> Along the way, you‚Äôll learn what <code class="language-plaintext highlighter-rouge">BackedEnums</code> are, their pros and cons, and why sometimes it‚Äôs better to use <code class="language-plaintext highlighter-rouge">enum-name</code> than to duplicate string values.</p> <h2 id="-what-are-backedenums-anyway">ü§î What are BackedEnums anyway?</h2> <p>Since PHP <strong>8.1</strong>, we‚Äôve finally got something we‚Äôve been waiting for years ‚Äì <strong>enums</strong>!<br/> And to top it off, there‚Äôs an even fancier version ‚Äì <strong>BackedEnums</strong>.<br/> These are enums that, besides having a name, can also have a value (<code class="language-plaintext highlighter-rouge">string</code> or <code class="language-plaintext highlighter-rouge">int</code>).<br/> Sounds like a class <code class="language-plaintext highlighter-rouge">const</code>, but it‚Äôs way better. üí™</p> <h3 id="example-in-action">Example in action</h3> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">enum</span> <span class="nc">Status</span><span class="o">:</span> <span class="n">string</span> <span class="p">{</span>
    <span class="k">case</span> <span class="k">NEW</span> <span class="o">=</span> <span class="s1">'new'</span><span class="p">;</span>
    <span class="k">case</span> <span class="no">IN_PROGRESS</span> <span class="o">=</span> <span class="s1">'in_progress'</span><span class="p">;</span>
    <span class="k">case</span> <span class="no">DONE</span> <span class="o">=</span> <span class="s1">'done'</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Usage</span>
<span class="nv">$orderStatus</span> <span class="o">=</span> <span class="nc">Status</span><span class="o">::</span><span class="k">NEW</span><span class="p">;</span>
<span class="k">echo</span> <span class="nv">$orderStatus</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span> <span class="c1">// "new"</span>
<span class="k">echo</span> <span class="nv">$orderStatus</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>  <span class="c1">// "NEW"</span>
</code></pre></div></div> <hr/> <h2 id="-why-would-i-need-this">üßê Why would I need this?</h2> <h3 id="advantages">Advantages:</h3> <ul> <li>‚úÖ <strong>Readability</strong> ‚Äì no more magic strings and guessing what the author meant.</li> <li>‚úÖ <strong>Type safety</strong> ‚Äì you can‚Äôt accidentally pass <code class="language-plaintext highlighter-rouge">"N3W"</code> instead of <code class="language-plaintext highlighter-rouge">"NEW"</code> to a function.</li> <li>‚úÖ <strong>Easy refactoring</strong> ‚Äì change the value in one place and you‚Äôre done.</li> <li>‚úÖ <strong>Helper methods</strong> ‚Äì you can add logic to enums (e.g., <code class="language-plaintext highlighter-rouge">isFinished()</code>).</li> </ul> <h3 id="disadvantages">Disadvantages:</h3> <ul> <li>‚ùå <strong>PHP 8.1+ only</strong> ‚Äì if you‚Äôre stuck on 7.4, you can only cry in the corner.</li> <li>‚ùå <strong>A bit of magic</strong> ‚Äì in large projects, you need to think carefully about whether to use <code class="language-plaintext highlighter-rouge">value</code> or <code class="language-plaintext highlighter-rouge">name</code>.</li> <li>‚ùå <strong>Overkill for simple cases</strong> ‚Äì if you only have 2 values, a <code class="language-plaintext highlighter-rouge">const</code> might be enough.</li> </ul> <hr/> <h2 id="-why-can-string-backedenums-be-tricky">üòÖ Why can string BackedEnums be tricky?</h2> <p>Well, here‚Äôs the thing.<br/> If the <strong>enum value = its name</strong>, you‚Äôre kind of shooting yourself in the foot, because then in your code you have:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Status</span><span class="o">::</span><span class="k">NEW</span><span class="o">-&gt;</span><span class="n">value</span> <span class="c1">// "NEW"</span>
<span class="nc">Status</span><span class="o">::</span><span class="k">NEW</span><span class="o">-&gt;</span><span class="n">name</span>  <span class="c1">// "NEW"</span>
</code></pre></div></div> <p>And if you can just use <code class="language-plaintext highlighter-rouge">-&gt;name</code>, what‚Äôs the point of having <code class="language-plaintext highlighter-rouge">value</code>?<br/> Instead, it‚Äôs better to stick with a regular <code class="language-plaintext highlighter-rouge">enum</code> (without a value) and keep things simple.</p> <h2 id="-what-was-before-enums">‚è≥ What was before enums?</h2> <p>Ah, the good old days‚Ä¶<br/> We wrote gems like this:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Status</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">NEW</span> <span class="o">=</span> <span class="s1">'new'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">IN_PROGRESS</span> <span class="o">=</span> <span class="s1">'in_progress'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">DONE</span> <span class="o">=</span> <span class="s1">'done'</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$status</span> <span class="o">=</span> <span class="nc">Status</span><span class="o">::</span><span class="k">NEW</span><span class="p">;</span>
</code></pre></div></div> <p>Or even better ‚Äì <strong>mapping arrays</strong>, which you had to maintain in three different places.<br/> (Yeah, we all know that hurt.)</p> <hr/> <h2 id="-before--after--how-i-got-rid-of-mappers">üîÑ Before &amp; After ‚Äì how I got rid of mappers</h2> <p><strong>Before (mappers):</strong></p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OrderStatus</span> <span class="p">{</span>
   <span class="k">public</span> <span class="k">const</span> <span class="no">NEW</span> <span class="o">=</span> <span class="s1">'new'</span><span class="p">;</span>
   <span class="k">public</span> <span class="k">const</span> <span class="no">IN_PROGRESS</span> <span class="o">=</span> <span class="s1">'in_progress'</span><span class="p">;</span>
   <span class="k">public</span> <span class="k">const</span> <span class="no">DONE</span> <span class="o">=</span> <span class="s1">'done'</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">array</span> <span class="nv">$labels</span> <span class="o">=</span> <span class="p">[</span>
        <span class="k">self</span><span class="o">::</span><span class="k">NEW</span> <span class="o">=</span> <span class="s2">"I'm doing things now!"</span><span class="p">,</span>
        <span class="k">self</span><span class="o">::</span><span class="no">IN_PROGRESS</span> <span class="o">=</span> <span class="s2">"I'm working on it!"</span><span class="p">,</span>
        <span class="k">self</span><span class="o">::</span><span class="no">DONE</span> <span class="o">=</span> <span class="s2">"I finished"</span><span class="p">,</span>
    <span class="p">];</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nc">OrderStatus</span><span class="o">::</span><span class="nv">$labels</span><span class="p">[</span><span class="nc">OrderStatus</span><span class="o">::</span><span class="no">IN_PROGRESS</span><span class="p">];</span> <span class="c1">// "I'm working on it!"</span>
</code></pre></div></div> <p><strong>After (enums):</strong></p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">enum</span> <span class="nc">OrderStatus</span><span class="o">:</span> <span class="n">string</span> <span class="p">{</span>
     <span class="k">case</span> <span class="k">NEW</span> <span class="o">=</span> <span class="s1">'new'</span><span class="p">;</span>
     <span class="k">case</span> <span class="no">IN_PROGRESS</span> <span class="o">=</span> <span class="s1">'in_progress'</span><span class="p">;</span>
     <span class="k">case</span> <span class="no">DONE</span> <span class="o">=</span> <span class="s1">'done'</span><span class="p">;</span>

     <span class="k">public</span> <span class="k">function</span> <span class="n">label</span><span class="p">():</span> <span class="kt">string</span> <span class="p">{</span>
         <span class="k">return</span> <span class="k">match</span><span class="p">(</span><span class="nv">$this</span><span class="p">)</span> <span class="p">{</span>
             <span class="k">self</span><span class="o">::</span><span class="k">NEW</span> <span class="o">=</span> <span class="s2">"I'm doing things now!"</span><span class="p">,,</span>
             <span class="k">self</span><span class="o">::</span><span class="no">IN_PROGRESS</span> <span class="o">=</span> <span class="s2">"I'm working on it!"</span><span class="p">,</span>
             <span class="k">self</span><span class="o">::</span><span class="no">DONE</span> <span class="o">=</span> <span class="s2">"I finished"</span><span class="p">,</span>
         <span class="p">};</span>
     <span class="p">}</span>
 <span class="p">}</span>

 <span class="k">echo</span> <span class="nc">OrderStatus</span><span class="o">::</span><span class="no">IN_PROGRESS</span><span class="o">-&gt;</span><span class="nf">label</span><span class="p">();</span> <span class="c1">// "I'm working on it!"</span>
</code></pre></div></div> <p>The result? Mappers are gone, the code is more readable, and my IDE gives me hints on the fly. üòé<br/> The example is kind of more abstract but it does show what or how enums may be used to refactor your old code.</p> <hr/> <h2 id="-my-little-revolution">üéâ My little revolution</h2> <p>Thanks to enums, I managed to get rid of all those value mappers!<br/> Now my code is clearer, the IDE suggests values, and I sleep peacefully. üõå</p> <p>Mappers? <strong>No, thanks.</strong><br/> Enums have taken over and do a better job.<br/> And honestly ‚Äì it was worth it. üòé</p> <hr/> <h2 id="-summary">üìå Summary</h2> <ul> <li>PHP 8.1 gave us <strong>enums</strong> and <strong>BackedEnums</strong>.</li> <li>Use BackedEnums when you need to <em>map</em> names to values (<code class="language-plaintext highlighter-rouge">int</code>, <code class="language-plaintext highlighter-rouge">string</code>).</li> <li>If <code class="language-plaintext highlighter-rouge">value == name</code> ‚Äì consider a regular <code class="language-plaintext highlighter-rouge">enum</code>.</li> <li>Enums = fewer bugs, fewer mappers, more peace of mind.</li> </ul> <p><strong>Moral:</strong> Enums are like new <code class="language-plaintext highlighter-rouge">consts</code>, just prettier and smarter.<br/> You can now send your mappers into retirement. üèñÔ∏è</p> <hr/> <p>‚úçÔ∏è <strong>PS:</strong> Yes, I smiled while writing this post. Because I‚Äôm really happy that we finally have proper enums in PHP. ‚ù§Ô∏è</p>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[üèÜ BackedEnums in PHP ‚Äì how I stopped worrying about mappers and learned to love enums ‚ù§Ô∏è]]></summary></entry><entry><title type="html">Array Functions: Initializing an Array Using [‚Ä¶] or array()? - PHP Review #2</title><link href="https://ziumper.github.io/blog/2025/PHP-array-or-brackets/" rel="alternate" type="text/html" title="Array Functions: Initializing an Array Using [‚Ä¶] or array()? - PHP Review #2"/><published>2025-03-24T00:00:00+00:00</published><updated>2025-03-24T00:00:00+00:00</updated><id>https://ziumper.github.io/blog/2025/PHP-array-or-brackets</id><content type="html" xml:base="https://ziumper.github.io/blog/2025/PHP-array-or-brackets/"><![CDATA[<p>This is another installment in the PHP review series. This time, I decided to take a closer look at the array declaration function and what really lies behind it. From what I remember, using <code class="language-plaintext highlighter-rouge">array()</code> was considered outdated by my colleagues at work and should no longer be used. To verify this, I decided to pull the repository of a PHP code refactoring and updating framework‚ÄîRector. After all, what tool is better at handling arrays than one designed for refactoring and adhering to best coding practices?</p> <h2 id="a-deep-dive-into-the-shallow-end">A Deep Dive into the Shallow End</h2> <p>To my surprise, I didn‚Äôt find many examples. In fact, the only example where <code class="language-plaintext highlighter-rouge">array()</code> was actually used‚Äîor rather its documentation, recommending against its use‚Äîwas in Rector‚Äôs framework under the golden rule for <a href="https://github.com/rectorphp/rector/blob/59ca5ad3cdd75183ef65f6929693903f2f2a1717/rules/Php54/Rector/Array_/LongArrayToShortArrayRector.php#L30">LongArrayToShortArray</a>:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">getRuleDefinition</span><span class="p">()</span> <span class="p">:</span> <span class="kt">RuleDefinition</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">RuleDefinition</span><span class="p">(</span><span class="s1">'Long array to short array'</span><span class="p">,</span> <span class="p">[</span><span class="k">new</span> <span class="nc">CodeSample</span><span class="p">(</span><span class="sh">&lt;&lt;&lt;'CODE_SAMPLE'
class SomeClass
{
    public function run()
    {
        return array();
    }
}
CODE_SAMPLE</span>
<span class="p">,</span> <span class="sh">&lt;&lt;&lt;'CODE_SAMPLE'
class SomeClass
{
    public function run()
    {
        return [];
    }
}
CODE_SAMPLE</span>
<span class="p">)]);</span>
<span class="p">}</span>
</code></pre></div></div> <p>This is thought-provoking, considering that the method in <code class="language-plaintext highlighter-rouge">LongArrayToShortArrayRector.php</code> is located in the <code class="language-plaintext highlighter-rouge">Php54</code> package. In <strong>PHP 5.4</strong>, the short array syntax was introduced. Since then, it has been recommended to use the shorter array notation.</p> <p>However, this still doesn‚Äôt fully answer the question: What is the fundamental difference between calling <code class="language-plaintext highlighter-rouge">array()</code> and <code class="language-plaintext highlighter-rouge">[]</code>? So what really happens behind the scenes? When executing a PHP script, you first need to bake a cake‚Ä¶ To bake a cake, you need to:</p> <figure> <iframe src="https://www.youtube.com/embed/oVSGrY4DfUg" class="rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="100%" height="500px"></iframe> </figure> <h2 id="creating-an-abstract-syntax-tree--the-cake">Creating an Abstract Syntax Tree ‚Äì The Cake</h2> <p>The key is understanding AST (Abstract Syntax Tree). This is a tree structure necessary to separate the compilation process from the parser. The <a href="https://en.wikipedia.org/wiki/Lexical_analysis">Lexer</a> returns tokens, which are then processed by the parser to generate the AST structure. This structure is then compiled into opcode, stored in opcache, and later interpreted by the computer as executable instructions. To learn more about this topic, I recommend watching the following video:</p> <blockquote> <p><a href="https://www.youtube.com/watch?v=MWITYIWyowk">Climbing the Abstract Syntax Tree - James Titcumb - Forum PHP 2017</a></p> </blockquote> <h2 id="so-where-exactly-is-the-difference-between--and-array">So, Where Exactly is the Difference Between <code class="language-plaintext highlighter-rouge">[]</code> and <code class="language-plaintext highlighter-rouge">array()</code>?</h2> <p>The first difference I noticed was in the <a href="https://github.com/php/php-src/blob/master/Zend/zend_compile.h#L1044">compiler</a>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#define ZEND_ARRAY_SYNTAX_LIST 1  /* list() */
#define ZEND_ARRAY_SYNTAX_LONG 2  /* array() */
#define ZEND_ARRAY_SYNTAX_SHORT 3 /* [] */
</code></pre></div></div> <p>And in the case of assignment validation:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">void</span> <span class="nf">zend_verify_list_assign_target</span><span class="p">(</span><span class="n">zend_ast</span> <span class="o">*</span><span class="n">var_ast</span><span class="p">,</span> <span class="n">zend_ast_attr</span> <span class="n">array_style</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">var_ast</span><span class="o">-&gt;</span><span class="n">kind</span> <span class="o">==</span> <span class="n">ZEND_AST_ARRAY</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">var_ast</span><span class="o">-&gt;</span><span class="n">attr</span> <span class="o">==</span> <span class="n">ZEND_ARRAY_SYNTAX_LONG</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">zend_error_noreturn</span><span class="p">(</span><span class="n">E_COMPILE_ERROR</span><span class="p">,</span> <span class="s">"Cannot assign to array(), use [] instead"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">array_style</span> <span class="o">!=</span> <span class="n">var_ast</span><span class="o">-&gt;</span><span class="n">attr</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">zend_error_noreturn</span><span class="p">(</span><span class="n">E_COMPILE_ERROR</span><span class="p">,</span> <span class="s">"Cannot mix [] and list()"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">zend_can_write_to_variable</span><span class="p">(</span><span class="n">var_ast</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">zend_error_noreturn</span><span class="p">(</span><span class="n">E_COMPILE_ERROR</span><span class="p">,</span> <span class="s">"Assignments can only happen to writable values"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>In PHP code, this has the following consequences:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>  <span class="c1">// Error: cannot assign to array()</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>  <span class="c1">// Correct</span>
</code></pre></div></div> <p>Honestly, I didn‚Äôt expect to find such quirks in the compiler, but this is a significant difference.</p> <p>Another difference is visible in the <a href="https://en.wikipedia.org/wiki/Lexical_analysis">Lexer</a>, specifically in the <a href="https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1764C1-L1766C2">language_scanner.l</a> file:</p> <pre><code class="language-lexer">&lt;ST_IN_SCRIPTING&gt;"array" {
    RETURN_TOKEN_WITH_IDENT(T_ARRAY);
}

&lt;ST_IN_SCRIPTING&gt;"["|"(" {
    enter_nesting(yytext[0]);
    RETURN_TOKEN(yytext[0]);
}

&lt;ST_IN_SCRIPTING&gt;"]"|")" {
    /* Check that ] and ) match up properly with a preceding [ or ( */
    RETURN_EXIT_NESTING_TOKEN(yytext[0]);
}
</code></pre> <h2 id="what-conclusions-can-we-draw">What Conclusions Can We Draw?</h2> <ul> <li>For <code class="language-plaintext highlighter-rouge">[]</code>, the lexer must return two tokens, and the parser then merges them into the appropriate structure. This requires more work during tokenization and parsing compared to <code class="language-plaintext highlighter-rouge">array()</code>, where the lexer directly returns a <code class="language-plaintext highlighter-rouge">T_ARRAY</code> token, and the parser simply processes it as a single expression.</li> <li>In a PHP version without opcache, code must be processed every time it is executed, meaning that both <code class="language-plaintext highlighter-rouge">array()</code> and <code class="language-plaintext highlighter-rouge">[]</code> must go through the lexer and parser to generate AST and opcodes.</li> <li>Longer parsing time for <code class="language-plaintext highlighter-rouge">[]</code>: Since <code class="language-plaintext highlighter-rouge">[]</code> requires additional analysis by the parser (to recognize brackets), processing takes longer.</li> <li>Shorter parsing time for <code class="language-plaintext highlighter-rouge">array()</code>: The <code class="language-plaintext highlighter-rouge">T_ARRAY</code> token is easier to recognize, and the parser does not have to perform additional syntax analysis.</li> </ul> <p>Who would have thought that to determine the real difference between <code class="language-plaintext highlighter-rouge">[]</code> and <code class="language-plaintext highlighter-rouge">array()</code>, I would have to delve so deeply into PHP? It seems that <code class="language-plaintext highlighter-rouge">array()</code> might still have some use cases:</p> <ul> <li>When code is compiled without access to temporary memory (opcache), which is rare.</li> <li>When using the <code class="language-plaintext highlighter-rouge">eval()</code> function, where opcache is not utilized.</li> </ul> <h2 id="important-links">Important Links</h2> <ul> <li><a href="https://github.com/php/php-src/tree/master">The PHP Interpreter</a></li> <li><a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a></li> <li><a href="https://www.php.net/manual/en/opcache.preloading.php">OpCache Preloading</a></li> </ul>]]></content><author><name></name></author><category term="php"/><summary type="html"><![CDATA[Is declaring an array using the array() function becoming obsolete? What does baking a cake have in common with code compilation?]]></summary></entry></feed>